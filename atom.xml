<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2017-12-14T14:36:20.450Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[[转][译]百万级WebSockets和Go语言]]></title>
    <link href="http://colobu.com/2017/12/13/A-Million-WebSockets-and-Go/"/>
    <id>http://colobu.com/2017/12/13/A-Million-WebSockets-and-Go/</id>
    <published>2017-12-13T09:05:07.000Z</published>
    <updated>2017-12-14T14:34:36.864Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://medium.freecodecamp.org/million-websockets-and-go-cc58418460bb" target="_blank" rel="external">A Million WebSockets and Go</a><br>作者: Sergey Kamardin</p>
<p>译文: <a href="http://xiecode.cn/post/cn_06_a_million_websockets_and_go/" target="_blank" rel="external">性能优化实战：百万级WebSockets和Go语言</a><br>译者: 曼托斯</p>
<a id="more"></a>
<p>大家好！我的名字叫Sergey Kamardin。我是来自Mail.Ru的一名工程师。这篇文章将讲述我们是如何用Go语言开发一个高负荷的WebSocket服务。即使你对WebSockets熟悉但对Go语言知之甚少，我还是希望这篇文章里讲到的性能优化的思路和技术对你有所启发。</p>
<h2 id="介绍">介绍</h2>
<p>作为全文的铺垫，我想先讲一下我们为什么要开发这个服务。</p>
<p>Mail.Ru有许多包含状态的系统。用户的电子邮件存储是其中之一。有很多办法来跟踪这些状态的改变。不外乎通过定期的轮询或者系统通知来得到状态的变化。这两种方法都有它们的优缺点。对邮件这个产品来说，让用户尽快收到新的邮件是一个考量指标。邮件的轮询会产生大概每秒5万个HTTP请求，其中60%的请求会返回304状态（表示邮箱没有变化）。因此，为了减少服务器的负荷并加速邮件的接收，我们决定重写一个publisher-subscriber服务（这个服务通常也会称作bus，message broker或者event-channel）。这个服务负责接收状态更新的通知，然后还处理对这些更新的订阅。</p>
<p>重写publisher-subscriber服务之前：</p>
<p><img src="1.png" alt=""></p>
<p>现在：<br><img src="2.png" alt=""></p>
<p>上面第一个图为旧的架构。浏览器（Browser）会定期轮询API服务来获得邮件存储服务（Storage）的更新。</p>
<p>第二张图展示的是新的架构。浏览器（Browser）和通知API服务（notificcation API）建立一个WebSocket连接。通知API服务会发送相关的订阅到Bus服务上。当收到新的电子邮件时，存储服务（Storage）向Bus（1）发送一个通知，Bus又将通知发送给相应的订阅者（2）。API服务为收到的通知找到相应的连接，然后把通知推送到用户的浏览器（3）。</p>
<p>我们今天就来讨论一下这个API服务（也可以叫做WebSocket服务）。在开始之前，我想提一下这个在线服务处理将近<strong>3百万个连接</strong>。</p>
<h2 id="惯用的做法（The_idiomatic_way）">惯用的做法（The idiomatic way）</h2>
<p>首先，我们看一下不做任何优化会如何用Go来实现这个服务的部分功能。在使用<code>net/http</code> 实现具体功能前，让我们先讨论下我们将如何发送和接收数据。这些数据是定义在WebSocket协议之上的（例如JSON对象）。我们在下文中会成他们为packet。</p>
<p>我们先来实现<code>Channel</code> 结构。它包含相应的逻辑来通过WebScoket连接发送和接收packet。</p>
<h3 id="Channel结构">Channel结构</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Packet represents application level data.</span></div><div class="line"><span class="keyword">type</span> Packet <span class="keyword">struct</span> {</div><div class="line">    ...</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Channel wraps user connection.</span></div><div class="line"><span class="keyword">type</span> Channel <span class="keyword">struct</span> {</div><div class="line">    conn net.Conn    <span class="comment">// WebSocket connection.</span></div><div class="line">    send <span class="keyword">chan</span> Packet <span class="comment">// Outgoing packets queue.</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> NewChannel(conn net.Conn) *Channel {</div><div class="line">    c := &Channel{</div><div class="line">        conn: conn,</div><div class="line">        send: <span class="built_in">make</span>(<span class="keyword">chan</span> Packet, N),</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">go</span> c.reader()</div><div class="line">    <span class="keyword">go</span> c.writer()</div><div class="line"></div><div class="line">    <span class="keyword">return</span> c</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里我要强调的是读和写这两个goroutines。每个goroutine都需要各自的内存栈。栈的初始大小由操作系统和Go的版本决定，通常在2KB到8KB之间。我们之前提到有3百万个在线连接，如果每个goroutine栈需要4KB的话，所有连接就需要24GB的内存。这还没算上给<code>Channel</code> 结构，发送packet用的<code>ch.send</code> 和其它一些内部字段分配的内存空间。</p>
<h2 id="I/O_goroutines">I/O goroutines</h2>
<p>接下来看一下“reader”的实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *Channel) reader() {</div><div class="line">    <span class="comment">// We make a buffered read to reduce read syscalls.</span></div><div class="line">    buf := bufio.NewReader(c.conn)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> {</div><div class="line">        pkt, _ := readPacket(buf)</div><div class="line">        c.handle(pkt)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里我们使用了bufio.Reader 。每次都会在buf 大小允许的范围内尽量读取多的字节，从而减少read() 系统调用的次数。在无限循环中，我们期望会接收到新的数据。请记住之前这句话：期望接收到新的数据。我们之后会讨论到这一点。</p>
<p>我们把packet的解析和处理逻辑都忽略掉了，因为它们和我们要讨论的优化不相关。不过buf 值得我们的关注：它的缺省大小是4KB。这意味着所有连接将消耗掉额外的12 GB内存。“writer”也是类似的情况：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *Channel) writer() {</div><div class="line">    <span class="comment">// We make buffered write to reduce write syscalls. </span></div><div class="line">    buf := bufio.NewWriter(c.conn)</div><div class="line"></div><div class="line">    <span class="keyword">for</span> pkt := <span class="keyword">range</span> c.send {</div><div class="line">        _ := writePacket(buf, pkt)</div><div class="line">        buf.Flush()</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们在待发送packet的<code>c.send</code> channel上循环将packet写到缓存（buffer）里。细心的读者肯定已经发现，这又是额外的4KB内存。3百万个连接会占用<strong>12GB</strong>的内存。</p>
<h3 id="HTTP">HTTP</h3>
<p>我们已经有了一个简单的Channel 实现。现在我们需要一个WebSocket连接。因为还在<strong>通常做法</strong>（Idiomatic Way)的标题下，那么就先来看看通常是如何实现的。</p>
<blockquote>
<p>注：如果你不知道WebSocket是怎么工作的，那么这里值得一提的是客户端是通过一个叫升级（Upgrade）请求的特殊HTTP机制来建立WebSocket的。在成功处理升级请求以后，服务端和客户端使用TCP连接来交换二进制的WebSocket帧（frames）。这里有关于帧结构的描述。</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"net/http"</span></div><div class="line">    <span class="string">"some/websocket"</span></div><div class="line">)</div><div class="line"></div><div class="line">http.HandleFunc(<span class="string">"/v1/ws"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">    conn, _ := websocket.Upgrade(r, w)</div><div class="line">    ch := NewChannel(conn)</div><div class="line">    <span class="comment">//...</span></div><div class="line">})</div></pre></td></tr></table></figure>

<p>请注意这里的<code>http.ResponseWriter</code> 结构包含<code>bufio.Reader</code> 和<code>bufio.Writer</code> （各自分别包含4KB的缓存）。它们用于<code>*http.Request</code> 初始化和返回结果。</p>
<p>不管是哪个WebSocket，在成功回应一个升级请求之后，服务端在调用<code>responseWriter.Hijack()</code> 之后会接收到一个I/O缓存和对应的TCP连接。</p>
<blockquote>
<p>注：有时候我们可以通过<code>net/http.putBufio{Reader,Writer}</code> 调用把缓存释放回<code>net/http</code> 里的<code>sync.Pool</code> 。</p>
</blockquote>
<p>这样，这3百万个连接又需要额外的<strong>24GB</strong>内存。</p>
<p>所以，为了这个什么都不干的程序，我们已经占用了<strong>72GB</strong>的内存！</p>
<h2 id="优化">优化</h2>
<p>我们来回顾一下前面介绍的用户连接的工作流程。在建立WebSocket之后，客户端会发送请求订阅相关事件（我们这里忽略类似ping/pong 的请求）。接下来，在整个连接的生命周期里，客户端可能就不会发送任何其它数据了。</p>
<p>连接的生命周期可能会持续几秒钟到几天。</p>
<p>所以在大部分时间里，<code>Channel.reader()</code> 和<code>Channel.writer()</code> 都在等待接收和发送数据。与它们一起等待的是各自分配的4 KB的I/O缓存。</p>
<p>现在，我们发现有些地方是可以做进一步优化的，对吧？</p>
<h3 id="Netpoll">Netpoll</h3>
<p>你还记得<code>Channel.reader()</code> 的实现使用了<code>bufio.Reader.Read()</code> 吗？<code>bufio.Reader.Read()</code> 又会调用<code>conn.Read()</code> 。这个调用会被阻塞以等待接收连接上的新数据。如果连接上有新的数据，Go的运行环境（runtime）就会唤醒相应的goroutine让它去读取下一个packet。之后，goroutine会被再次阻塞来等待新的数据。我们来研究下Go的运行环境是怎么知道goroutine需要被唤醒的。</p>
<p>如果我们看一下<code>conn.Read()</code> 的实现，就会看到它调用了<code>net.netFD.Read()</code> ：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// net/fd_unix.go</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> (fd *netFD) Read(p []<span class="typename">byte</span>) (n <span class="typename">int</span>, err error) {</div><div class="line">    <span class="comment">//...</span></div><div class="line">    <span class="keyword">for</span> {</div><div class="line">        n, err = syscall.Read(fd.sysfd, p)</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            n =<span class="number"> 0</span></div><div class="line">            <span class="keyword">if</span> err == syscall.EAGAIN {</div><div class="line">                <span class="keyword">if</span> err = fd.pd.waitRead(); err == <span class="constant">nil</span> {</div><div class="line">                    <span class="keyword">continue</span></div><div class="line">                }</div><div class="line">            }</div><div class="line">        }</div><div class="line">        <span class="comment">//...</span></div><div class="line">        <span class="keyword">break</span></div><div class="line">    }</div><div class="line">    <span class="comment">//...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<blockquote>
<p>Go使用了sockets的非阻塞模式。EAGAIN表示socket里没有数据了但不会阻塞在空的socket上，OS会把控制权返回给用户进程。</p>
</blockquote>
<p>这里它首先对连接文件描述符进行<code>read()</code> 系统调用。如果<code>read()</code> 返回的是<code>EAGAIN</code> 错误，运行环境就是调用<code>pollDesc.waitRead()</code> ：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// net/fd_poll_runtime.go</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> (pd *pollDesc) waitRead() error {</div><div class="line">   <span class="keyword">return</span> pd.wait(<span class="string">'r'</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (pd *pollDesc) wait(mode <span class="typename">int</span>) error {</div><div class="line">   res := runtime_pollWait(pd.runtimeCtx, mode)</div><div class="line">   <span class="comment">//...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果继续深挖，我们可以看到netpoll的实现在Linux里用的是epoll而在BSD里用的是kqueue。我们的这些连接为什么不采用类似的方式呢？只有在socket上有可读数据时，才分配缓存空间并启用读数据的goroutine。</p>
<p>在github.com/golang/go上，有一个关于 暴露(export) netpoll函数的<a href="https://github.com/golang/go/issues/15735#issuecomment-266574151" target="_blank" rel="external">请求</a>。</p>
<h3 id="干掉goroutines">干掉goroutines</h3>
<p>假设我们用Go语言实现了netpoll。我们现在可以避免创建Channel.reader() 的goroutine，取而代之的是从订阅连接里收到新数据的事件。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">ch := NewChannel(conn)</div><div class="line"></div><div class="line"><span class="comment">// Make conn to be observed by netpoll instance.</span></div><div class="line">poller.Start(conn, netpoll.EventRead, <span class="keyword">func</span>() {</div><div class="line">    <span class="comment">// We spawn goroutine here to prevent poller wait loop</span></div><div class="line">    <span class="comment">// to become locked during receiving packet from ch.</span></div><div class="line">    <span class="keyword">go</span> Receive(ch)</div><div class="line">})</div><div class="line"></div><div class="line"><span class="comment">// Receive reads a packet from conn and handles it somehow.</span></div><div class="line"><span class="keyword">func</span> (ch *Channel) Receive() {</div><div class="line">    buf := bufio.NewReader(ch.conn)</div><div class="line">    pkt := readPacket(buf)</div><div class="line">    c.handle(pkt)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>Channel.writer()</code> 相对容易一点，因为我们只需在发送packet的时候创建goroutine并分配缓存。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (ch *Channel) Send(p Packet) {</div><div class="line">    <span class="keyword">if</span> c.noWriterYet() {</div><div class="line">        <span class="keyword">go</span> ch.writer()</div><div class="line">    }</div><div class="line">    ch.send &lt;- p</div><div class="line">}</div></pre></td></tr></table></figure>

<blockquote>
<p>注意，这里我们没有处理<code>write()</code> 系统调用时返回的<code>EAGAIN</code> 。我们依赖Go运行环境去处理它。这种情况很少发生。如果需要的话我们还是可以像之前那样来处理。</p>
</blockquote>
<p>从<code>ch.send</code> 读取待发送的packets之后，<code>ch.writer()</code> 会完成它的操作，最后释放goroutine的栈和用于发送的缓存。</p>
<p>很不错！通过避免这两个连续运行的goroutine所占用的I/O缓存和栈内存，我们已经节省了<strong>48GB</strong>。</p>
<h3 id="控制资源">控制资源</h3>
<p>大量的连接不仅仅会造成大量的内存消耗。在开发服务端的时候，我们还不停地遇到竞争条件（race conditions）和死锁（deadlocks）。随之而来的是所谓的自我分布式阻断攻击（self-DDOS）。在这种情况下，客户端会悍然地尝试重新连接服务端而把情况搞得更加糟糕。</p>
<p>举个例子，如果因为某种原因我们突然无法处理ping/pong 消息，这些空闲连接就会不断地被关闭（它们会以为这些连接已经无效因此不会收到数据）。然后客户端每N秒就会以为失去了连接并尝试重新建立连接，而不是继续等待服务端发来的消息。</p>
<p>在这种情况下，比较好的办法是让负载过重的服务端停止接受新的连接，这样负载均衡器（例如nginx）就可以把请求转到其它的服务端上去。</p>
<p>撇开服务端的负载不说，如果所有的客户端突然（很可能是因为某个bug）向服务端发送一个packet，我们之前节省的48 GB内存又将会被消耗掉。因为这时我们又会和开始一样给每个连接创建goroutine并分配缓存。</p>
<h4 id="Goroutine池">Goroutine池</h4>
<p>可以用一个goroutine池来限制同时处理packets的数目。下面的代码是一个简单的实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> gopool</div><div class="line"></div><div class="line"><span class="keyword">func</span> New(size <span class="typename">int</span>) *Pool {</div><div class="line">    <span class="keyword">return</span> &Pool{</div><div class="line">        work: <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">func</span>()),</div><div class="line">        sem:  <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>{}, size),</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *Pool) Schedule(task <span class="keyword">func</span>()) error {</div><div class="line">    <span class="keyword">select</span> {</div><div class="line">    <span class="keyword">case</span> p.work &lt;- task:</div><div class="line">    <span class="keyword">case</span> p.sem &lt;- <span class="keyword">struct</span>{}{}:</div><div class="line">        <span class="keyword">go</span> p.worker(task)</div><div class="line">    }</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (p *Pool) worker(task <span class="keyword">func</span>()) {</div><div class="line">    <span class="keyword">defer</span> <span class="keyword">func</span>() { &lt;-p.sem }</div><div class="line">    <span class="keyword">for</span> {</div><div class="line">        task()</div><div class="line">        task = &lt;-p.work</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们使用netpoll的代码就变成下面这样：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">pool := gopool.New<span class="number">(128</span>)</div><div class="line"></div><div class="line">poller.Start(conn, netpoll.EventRead, <span class="keyword">func</span>() {</div><div class="line">    <span class="comment">// We will block poller wait loop when</span></div><div class="line">    <span class="comment">// all pool workers are busy.</span></div><div class="line">    pool.Schedule(<span class="keyword">func</span>() {</div><div class="line">        Receive(ch)</div><div class="line">    })</div><div class="line">})</div></pre></td></tr></table></figure>

<p>现在我们不仅要等可读的数据出现在socket上才能读packet，还必须等到从池里获取到空闲的goroutine。</p>
<p>同样的，我们修改下Send() 的代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">pool := gopool.New<span class="number">(128</span>)</div><div class="line"></div><div class="line"><span class="keyword">func</span> (ch *Channel) Send(p Packet) {</div><div class="line">    <span class="keyword">if</span> c.noWriterYet() {</div><div class="line">        pool.Schedule(ch.writer)</div><div class="line">    }</div><div class="line">    ch.send &lt;- p</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里我们没有调用<code>go ch.writer()</code> ，而是想重复利用池里goroutine来发送数据。 所以，如果一个池有<code>N</code> 个goroutines的话，我们可以保证有<code>N</code> 个请求被同时处理。而<code>N + 1</code> 个请求不会分配<code>N + 1</code> 个缓存。goroutine池允许我们限制对新连接的<code>Accept()</code> 和<code>Upgrade()</code> ，这样就避免了大部分DDoS的情况。</p>
<h3 id="零拷贝升级（Zero-copy_upgrade）">零拷贝升级（Zero-copy upgrade）</h3>
<p>之前已经提到，客户端通过HTTP升级（Upgrade）请求切换到WebSocket协议。下面显示的是一个升级请求：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">GET /ws HTTP<span class="number">/1.1</span></div><div class="line">Host: mail.ru</div><div class="line">Connection: Upgrade</div><div class="line">Sec-Websocket-Key: A3xNe7sEB9HixkmBhVrYaA==</div><div class="line">Sec-Websocket-Version:<span class="number"> 13</span></div><div class="line">Upgrade: websocket</div><div class="line"></div><div class="line">HTTP<span class="number">/1.1</span><span class="number"> 101</span> Switching Protocols</div><div class="line">Connection: Upgrade</div><div class="line">Sec-Websocket-Accept: ksu0wXWG+YmkVx+KQR2agP0cQn4=</div><div class="line">Upgrade: websocket</div></pre></td></tr></table></figure>

<p>我们接收HTTP请求和它的头部只是为了切换到WebSocket协议，而<code>http.Request</code> 里保存了所有头部的数据。从这里可以得到启发，如果是为了优化，我们可以放弃使用标准的<code>net/http</code> 服务并在处理HTTP请求的时候避免无用的内存分配和拷贝。</p>
<blockquote>
<p>举个例子，<code>http.Request</code> 包含了一个叫做Header的字段。标准<code>net/http</code> 服务会将请求里的所有头部数据全部无条件地拷贝到Header字段里。你可以想象这个字段会保存许多冗余的数据，例如一个包含很长cookie的头部。</p>
</blockquote>
<p>我们如何来优化呢？</p>
<h4 id="WebSocket实现">WebSocket实现</h4>
<p>不幸的是，在我们优化服务端的时候所有能找到的库只支持对标准net/http 服务做升级。而且没有一个库允许我们实现上面提到的读和写的优化。为了使这些优化成为可能，我们必须有一套底层的API来操作WebSocket。为了重用缓存，我们需要类似下面这样的协议函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> ReadFrame(io.Reader) (Frame, error)</div><div class="line"><span class="keyword">func</span> WriteFrame(io.Writer, Frame) error</div></pre></td></tr></table></figure>

<p>如果我们有一个包含这样API的库，我们就按照下面的方式从连接上读取packets：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// getReadBuf, putReadBuf are intended to</span></div><div class="line"><span class="comment">// reuse *bufio.Reader (with sync.Pool for example).</span></div><div class="line"><span class="keyword">func</span> getReadBuf(io.Reader) *bufio.Reader</div><div class="line"><span class="keyword">func</span> putReadBuf(*bufio.Reader)</div><div class="line"></div><div class="line"><span class="comment">// readPacket must be called when data could be read from conn.</span></div><div class="line"><span class="keyword">func</span> readPacket(conn io.Reader) error {</div><div class="line">    buf := getReadBuf()</div><div class="line">    <span class="keyword">defer</span> putReadBuf(buf)</div><div class="line"></div><div class="line">    buf.Reset(conn)</div><div class="line">    frame, _ := ReadFrame(buf)</div><div class="line">    parsePacket(frame.Payload)</div><div class="line">    <span class="comment">//...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>简而言之，我们需要自己写一个库。</p>
<h4 id="github-com/gobwas/ws">github.com/gobwas/ws</h4>
<p>ws 库的主要设计思想是不将协议的操作逻辑暴露给用户。所有读写函数都接受通用的<code>io.Reader</code> 和<code>io.Writer</code> 接口。因此它可以随意搭配是否使用缓存以及其它I/O的库。</p>
<p>除了标准库<code>net/http</code> 里的升级请求，<code>ws</code> 还支持零拷贝升级。它能够处理升级请求并切换到WebSocket模式而不产生任何内存分配或者拷贝。<code>ws.Upgrade()</code> 接受<code>io.ReadWriter</code> （<code>net.Conn</code> 实现了这个接口）。换句话说，我们可以使用标准的<code>net.Listen()</code> 函数然后把从<code>ln.Accept()</code> 收到的连接马上交给<code>ws.Upgrade()</code> 去处理。库也允许拷贝任何请求数据来满足将来应用的需求（举个例子，拷贝Cookie 来验证一个session）。</p>
<p>下面是处理升级请求的性能测试：标准<code>net/http</code> 库的实现和使用零拷贝升级的<code>net.Listen()</code> ：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BenchmarkUpgradeHTTP   <span class="number"> 5156</span> ns/op   <span class="number"> 8576</span> B/op   <span class="number"> 9</span> allocs/op</div><div class="line">BenchmarkUpgradeTCP    <span class="number"> 973</span> ns/op    <span class="number"> 0</span> B/op      <span class="number"> 0</span> allocs/op</div></pre></td></tr></table></figure>

<p>使用ws 以及零拷贝升级为我们节省了24 GB的空间。这些空间原本被用做net/http 里处理请求的I/O缓存。</p>
<h3 id="回顾">回顾</h3>
<p>让我们来回顾一下之前提到过的优化：</p>
<ul>
<li>一个包含缓存的读goroutine会占用很多内存。方案： netpoll（epoll, kqueue）；重用缓存。</li>
<li>一个包含缓存的写goroutine会占用很多内存。方案： 在需要的时候创建goroutine；重用缓存。</li>
<li>存在大量连接请求的时候，netpoll不能很好工作。方案： 重用goroutines并且限制它们的数目。</li>
<li>net/http 对升级到WebSocket请求的处理不是最高效的。方案： 在TCP连接上实现零拷贝升级。</li>
</ul>
<p>下面是服务端的大致实现代码：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"net"</span></div><div class="line">    <span class="string">"github.com/gobwas/ws"</span></div><div class="line">)</div><div class="line"></div><div class="line">ln, _ := net.Listen(<span class="string">"tcp"</span>, <span class="string">":8080"</span>)</div><div class="line"></div><div class="line"><span class="keyword">for</span> {</div><div class="line">    <span class="comment">// Try to accept incoming connection inside free pool worker.</span></div><div class="line">    <span class="comment">// If there no free workers for 1ms, do not accept anything and try later.</span></div><div class="line">    <span class="comment">// This will help us to prevent many self-ddos or out of resource limit cases.</span></div><div class="line">    err := pool.ScheduleTimeout(time.Millisecond, <span class="keyword">func</span>() {</div><div class="line">        conn := ln.Accept()</div><div class="line">        _ = ws.Upgrade(conn)</div><div class="line"></div><div class="line">        <span class="comment">// Wrap WebSocket connection with our Channel struct.</span></div><div class="line">        <span class="comment">// This will help us to handle/send our app's packets.</span></div><div class="line">        ch := NewChannel(conn)</div><div class="line"></div><div class="line">        <span class="comment">// Wait for incoming bytes from connection.</span></div><div class="line">        poller.Start(conn, netpoll.EventRead, <span class="keyword">func</span>() {</div><div class="line">            <span class="comment">// Do not cross the resource limits.</span></div><div class="line">            pool.Schedule(<span class="keyword">func</span>() {</div><div class="line">                <span class="comment">// Read and handle incoming packet(s).</span></div><div class="line">                ch.Recevie()</div><div class="line">            })</div><div class="line">        })</div><div class="line">    })</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {   </div><div class="line">        time.Sleep(time.Millisecond)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="结论">结论</h2>
<blockquote>
<p>在程序设计时，过早优化是万恶之源。Donald Knuth</p>
</blockquote>
<p>上面的优化是有意义的，但不是所有情况都适用。举个例子，如果空闲资源（内存，CPU）与在线连接数之间的比例很高的话，优化就没有太多意义。当然，知道什么地方可以优化以及如何优化总是有帮助的。</p>
<p>谢谢你的关注！</p>
<h2 id="引用">引用</h2>
<ul>
<li><a href="https://github.com/mailru/easygo" target="_blank" rel="external">https://github.com/mailru/easygo</a></li>
<li><a href="https://github.com/gobwas/ws" target="_blank" rel="external">https://github.com/gobwas/ws</a></li>
<li><a href="https://github.com/gobwas/ws-examples" target="_blank" rel="external">https://github.com/gobwas/ws-examples</a></li>
<li><a href="https://github.com/gobwas/httphead" target="_blank" rel="external">https://github.com/gobwas/httphead</a></li>
</ul>
<p><hr><br>以下非译文中的内容，我也是看到优化的数字而感到疑惑：</p>
<blockquote>
<p>作者最后计算优化一共节省了 <code>48GB + 24GB</code>内存， 可以原先作者总共的内存占用为<code>24GB+12GB+12GB_24GB</code>,如果按照这个数计算，作者最后只需要零内存，这是不可能的，因为每个连接的协议栈会占用一部分内存， 每个goroutine的栈也会占用一部分内存，还有buffer需要一定量的内存。</p>
</blockquote>
<p>实际作者在评论中说， 又花钱每个连接平均占用 <strong>65KB</strong>的内存， 优化后只占<strong>10KB</strong>的内存，优化效果明显。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://medium.freecodecamp.org/million-websockets-and-go-cc58418460bb" target="_blank" rel="external">A Million WebSockets and Go</a><br>作者: Sergey Kamardin</p>
<p>译文: <a href="http://xiecode.cn/post/cn_06_a_million_websockets_and_go/" target="_blank" rel="external">性能优化实战：百万级WebSockets和Go语言</a><br>译者: 曼托斯</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转][译]Go 终极指南：编写一个 Go 工具]]></title>
    <link href="http://colobu.com/2017/12/12/The-ultimate-guide-to-writing-a-Go-tool/"/>
    <id>http://colobu.com/2017/12/12/The-ultimate-guide-to-writing-a-Go-tool/</id>
    <published>2017-12-12T06:52:23.000Z</published>
    <updated>2017-12-14T14:34:36.895Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/" target="_blank" rel="external">https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/</a><br>作者：Fatih Arslan<br>译文：<a href="http://oopsguy.com/2017/10/27/the-ultimate-guide-to-writing-a-go-tool/" target="_blank" rel="external">http://oopsguy.com/2017/10/27/the-ultimate-guide-to-writing-a-go-tool/</a><br>译者：oopsguy.com</p>
<a id="more"></a>
<p>我之前编写过一个叫 gomodifytags 的工具，它使我的生活变得很轻松。它会根据字段名称自动填充结构体标签字段。让我来展示一下它的功能：</p>
<p><img src="gomodifytags.gif" alt="An example usage of gomodifytags used within vim-go"></p>
<p>使用这样的工具可以<strong>很容易管理</strong>结构体的多个字段。该工具还可以添加和删除标签、管理标签选项（如 omitempty）、定义转换规则（snake_case、camelCase 等）等。但该工具是怎样工作的呢？它内部使用了什么 Go 包？有很多问题需要回答。</p>
<p>这是一篇非常长的博文，其解释了如何编写这样的工具以及每个构建细节。它包含许多独特的细节、技巧和未知的 Go 知识。</p>
<p>拿起一杯咖啡☕️，让我们深入一下吧！</p>
<hr>

<p>首先，让我列出这个工具需要做的事情：</p>
<ul>
<li>它需要读取源文件、理解并能够解析 Go 文件</li>
<li>它需要找到相关的结构体</li>
<li>找到结构体后，它需要获取字段名称</li>
<li>它需要根据字段名来更新结构体标签（根据转换规则，如 _snake<em>case</em>）</li>
<li>它需要能够把这些更改更新到文件中，或者能够以可消费的方式输出更改后的结果</li>
</ul>
<p>我们首先来了解什么是 <strong>结构体（struct）标签（tag）</strong>，从这里我们可以学习到所有东西以及如何把它们组合在一起使用，在此基础上您可以构建出这样的工具。</p>
<p><img src="gomodifytags-009.jpg" alt=""></p>
<p>结构体的标签值（内容，如 <code>json: &quot;foo&quot;</code>）<strong>不是官方规范的一部分</strong>，但是 <code>reflect</code> 包定义了一个非官方规范的格式标准，这个格式同样被 <code>stdlib</code> 包（如 <code>encoding/json</code>）所使用。它通过 <code>reflect.StructTag</code> 类型定义：</p>
<p><img src="gomodifytags-014.jpg" alt=""></p>
<p>这个定义有点长，不是很容易让人理解。我们尝试分解一下它：</p>
<ul>
<li>一个结构体标签是一个字符串文字（因为它有字符串类型）</li>
<li>键（key）部分是一个<strong>无引号</strong>的字符串文字</li>
<li>值（value）部分是<strong>带引号</strong>的字符串文字</li>
<li>键和值由冒号（:)分隔。键与值且由冒号分隔组成的值称为<strong>键值对</strong></li>
<li>结构体标签可以包含多个键值对（可选）。键值对由<strong>空格分隔</strong>。</li>
<li>不是定义的部分是选项设置。像 <code>encoding/json</code> 这样的包在读取值时当作一个由逗号分隔列表。 第一个逗号后的内容都是选项部分，比如 <code>foo,omitempty,string</code>。其有一个名为 <code>foo</code> 的值和 <code>[omitempty, string]</code> 选项</li>
<li>因为结构体标签是字符串文字，所以需要使用双引号或反引号包围。因为值必须使用引号，因此我们总是使用反引号对整个标签做处理。</li>
</ul>
<p>总结一下：<br><img src="gomodifytags-027.jpg" alt="结构体标签定义有许多隐藏的细节"></p>
<p>我们已经了解了什么是结构体标签，我们可以根据需要轻松地修改它。 现在的问题是，我们如何解析它才能使我们能够轻松进行修改？幸运的是，<code>reflect.StructTag</code> 包含一个<code>方法</code>，它允许我们进行解析并返回指定键的值。以下是一个示例：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"reflect"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    tag := reflect.StructTag(<span class="string">`species:"gopher" color:"blue"`</span>)</div><div class="line">    fmt.Println(tag.Get(<span class="string">"color"</span>), tag.Get(<span class="string">"species"</span>))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">blue gopher</div></pre></td></tr></table></figure>

<p>如果键不存在，则返回一个空字符串。</p>
<p>这是非常有用，<strong>但是</strong>也有一些不足使得它并不适合我们，因为我们需要更多的灵活性：</p>
<ul>
<li>它无法检测到标签是否<strong>格式错误</strong>（如：键部分用引号包裹，值部分没有使用引号等）。</li>
<li>它无法得知选项的<strong>语义</strong>。</li>
<li>它<strong>没有办法迭代现有的标签</strong>或返回它们。我们必须要知道要修改哪些标签。如果不知道名字怎么办？</li>
<li>修改现有标签是不可能的。</li>
<li>我们<strong>不能从头开始构建新的结构体标签</strong>。</li>
</ul>
<p>为了改进这一点，我写了一个自定义的 Go 包，它解决了上面提到的所有问题，并提供了一个 API，可以轻松地改变结构体标签的各个方面。</p>
<p><img src="gomodifytags-091.jpg" alt=""></p>
<p>该包名为 <strong>structtag</strong>，可以从 github.com/fatih/structtag 获取。 这个包允许我们以简洁的方式解析和修改标签。以下是一个完整的示例，您可以复制/粘贴并自行尝试：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line"></div><div class="line">    <span class="string">"github.com/fatih/structtag"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    tag := <span class="string">`json:"foo,omitempty,string" xml:"foo"`</span></div><div class="line"></div><div class="line">    <span class="comment">// parse the tag</span></div><div class="line">    tags, err := structtag.Parse(<span class="typename">string</span>(tag))</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// iterate over all tags</span></div><div class="line">    <span class="keyword">for</span> _, t := <span class="keyword">range</span> tags.Tags() {</div><div class="line">        fmt.Printf(<span class="string">"tag: %+v\n"</span>, t)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// get a single tag</span></div><div class="line">    jsonTag, err := tags.Get(<span class="string">"json"</span>)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// change existing tag</span></div><div class="line">    jsonTag.Name = <span class="string">"foo_bar"</span></div><div class="line">    jsonTag.Options = <span class="constant">nil</span></div><div class="line">    tags.Set(jsonTag)</div><div class="line"></div><div class="line">    <span class="comment">// add new tag</span></div><div class="line">    tags.Set(&structtag.Tag{</div><div class="line">        Key:     <span class="string">"hcl"</span>,</div><div class="line">        Name:    <span class="string">"foo"</span>,</div><div class="line">        Options: []<span class="typename">string</span>{<span class="string">"squash"</span>},</div><div class="line">    })</div><div class="line"></div><div class="line">    <span class="comment">// print the tags</span></div><div class="line">    fmt.Println(tags) <span class="comment">// Output: json:"foo_bar" xml:"foo" hcl:"foo,squash"</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在我们了解了如何解析、修改或创建结构体标签，是时候尝试修改一个 Go 源文件了。在上面的示例中，标签已经存在，但是如何从现有的 Go 结构体中获取标签呢？</p>
<p>答案是通过 <strong>AST</strong>。AST（Abstract Syntax Tree，抽象语法树）允许我们从源代码中检索每个标识符（节点）。 下面你可以看到一个结构体类型的 AST（简化版）：</p>
<p><img src="gomodifytags-0721.jpg" alt=""></p>
<p>在这棵树中，我们可以检索和操作每个标识符、每个字符串、每个括号等。这些都由 <a href="https://golang.org/pkg/go/ast/#Node" target="_blank" rel="external">AST 节点</a>表示。例如，我们可以通过替换表示它的节点将字段名称从 <code>Foo</code> 更改为 <code>Bar</code>。 该逻辑同样适用于结构体标签。</p>
<p>要获得一个 <strong>Go AST</strong>，我们需要解析源文件并将其转换成一个 <strong>AST</strong>。实际上，这两者都是通过同一个步骤来处理的。</p>
<p>要实现这一点，我们将使用 <code>go/parser</code> 包来解析文件以获取 AST（整个文件），然后使用 <code>go/ast</code> 包来处理整个树（我们可以手动做这个工作，但这是另一篇博文的主题）。 您在下面可以看到一个完整的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"fmt"</span></div><div class="line">    <span class="string">"go/ast"</span></div><div class="line">    <span class="string">"go/parser"</span></div><div class="line">    <span class="string">"go/token"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    src := <span class="string">`package main</span></div><div class="line">        type Example struct {</div><div class="line">    Foo string` + <span class="string">" `json:\"foo\"` }"</span></div><div class="line"></div><div class="line">    fset := token.NewFileSet()</div><div class="line">    file, err := parser.ParseFile(fset, <span class="string">"demo"</span>, src, parser.ParseComments)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="built_in">panic</span>(err)</div><div class="line">    }</div><div class="line"></div><div class="line">    ast.Inspect(file, <span class="keyword">func</span>(x ast.Node) <span class="typename">bool</span> {</div><div class="line">        s, ok := x.(*ast.StructType)</div><div class="line">        <span class="keyword">if</span> !ok {</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">for</span> _, field := <span class="keyword">range</span> s.Fields.List {</div><div class="line">            fmt.Printf(<span class="string">"Field: %s\n"</span>, field.Names<span class="number">[0</span>].Name)</div><div class="line">            fmt.Printf(<span class="string">"Tag:   %s\n"</span>, field.Tag.Value)</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="constant">false</span></div><div class="line">    })</div><div class="line">}</div></pre></td></tr></table></figure>

<p>输出结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">Field</span>: <span class="string">Foo</span></div><div class="line"><span class="attribute">Tag</span>: <span class="string">  `json:"foo"`</span></div></pre></td></tr></table></figure>

<p>代码执行以下操作：</p>
<ul>
<li>我们使用一个单独的结构体定义了一个 Go 包示例</li>
<li>我们使用 <code>go/parser</code> 包来解析这个字符串。<code>parser</code> 包也可以从磁盘读取文件（或整个包）。</li>
<li>在解析后，我们处理了节点（分配给变量文件）并查找由 <a href="https://golang.org/pkg/go/ast/#StructType" target="_blank" rel="external">*ast.StructType</a> 定义的 AST 节点（参考 AST 图）。通过 <code>ast.Inspect()</code> 函数完成树的处理。它会遍历所有节点，直到它收到 false 值。 这是非常方便的，因为它不需要知道每个节点。</li>
<li>我们打印了结构体的字段名称和结构体标签。</li>
</ul>
<hr>

<p>我们现在可以做两件重要的事，首先，我们知道了如何解析一个 Go 源文件并检索结构体标签（通过 <code>go/parser</code>）。其次，我们知道了如何解析 Go 结构体标签，并根据需要进行修改（通过 <code>github.com/fatih/structtag</code>）。</p>
<p>我们有了这些，现在可以通过使用这两个知识点开始构建我们的工具（命名为 gomodifytags）。该工具应按顺序执行以下操作</p>
<ul>
<li>获取配置，用于告诉我们要修改哪个结构体</li>
<li>根据配置查找和修改结构体</li>
<li>输出结果</li>
</ul>
<p>由于 gomodifytags 将主要应用于编辑器，我们将通过 CLI 标志传入配置。第二步包含多个步骤，如解析文件，找到正确的结构体，然后修改结构体（通过修改 AST）。最后，我们将结果输出，无论结果的格式是原始的 Go 源文件还是某种自定义协议（如 JSON，稍后再说）。</p>
<p>以下是简化版 gomodifytags 的主要功能：</p>
<p><img src="gomodifytags-101-e1503693113141.jpg" alt=""></p>
<p>让我们更详细地解释每一个步骤。为了简单起见，我将尝试以概括的形式来解释重要部分。 原理都一样，一旦你读完这篇博文，你将能够在没有任何指导情况下阅整个源码（指南末尾附带了所有资源）</p>
<p>让我们从第一步开始，了解如何<strong>获取配置</strong>。以下是我们的配置，包含所有必要的信息</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> config <span class="keyword">struct</span> {</div><div class="line">    <span class="comment">// first section - input & output</span></div><div class="line">    file     <span class="typename">string</span></div><div class="line">    modified io.Reader</div><div class="line">    output   <span class="typename">string</span></div><div class="line">    write    <span class="typename">bool</span></div><div class="line"></div><div class="line">    <span class="comment">// second section - struct selection</span></div><div class="line">    offset     <span class="typename">int</span></div><div class="line">    structName <span class="typename">string</span></div><div class="line">    line       <span class="typename">string</span></div><div class="line">    start, end <span class="typename">int</span></div><div class="line"></div><div class="line">    <span class="comment">// third section - struct modification</span></div><div class="line">    remove    []<span class="typename">string</span></div><div class="line">    add       []<span class="typename">string</span></div><div class="line">    override  <span class="typename">bool</span></div><div class="line">    transform <span class="typename">string</span></div><div class="line">    sort      <span class="typename">bool</span></div><div class="line">    clear     <span class="typename">bool</span></div><div class="line">    addOpts    []<span class="typename">string</span></div><div class="line">    removeOpts []<span class="typename">string</span></div><div class="line">    clearOpt   <span class="typename">bool</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>它分为三个主要部分：</p>
<p><strong>第一部分</strong>包含有关如何读取和读取哪个文件的设置。这可以是本地文件系统的文件名，也可以直接来自 stdin（主要用在编辑器中）。 它还设置如何输出结果（go 源文件或 JSON），以及是否应该覆盖文件而不是输出到 stdout。</p>
<p><strong>第二部分</strong>定义了如何选择一个结构体及其字段。有多种方法可以做到这一点。 我们可以通过它的偏移（光标位置）、结构体名称、一行单行（仅选择字段）或一系列行来定义它。最后，我们无论如何都得到开始行/结束行。例如在下面的例子中，您可以看到，我们使用它的名字来选择结构体，然后提取开始行和结束行以选择正确的字段：<br><img src="gomodifytags-128.jpg" alt=""></p>
<p>如果是用于编辑器，则最好使用<strong>字节偏移量</strong>。例如下面你可以发现我们的光标刚好在 <code>port</code> 字段名称后面，从那里我们可以很容易地得到开始行/结束行：</p>
<p><img src="gomodifytags-130.jpg" alt=""></p>
<p>配置中的第三个部分实际上是一个映射到 <code>structtag</code> 包的一对一映射。它基本上允许我们在读取字段后将配置传给 <code>structtag</code> 包。 如你所知，<code>structtag</code> 包允许我们解析一个结构体标签并对各个部分进行修改。但它不会覆盖或更新结构体字段。</p>
<p>我们如何获得配置？我们只需使用 <code>flag</code> 包，然后为配置中的每个字段创建一个标志，然后分配它们。举个例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">flagFile := flag.String(<span class="string">"file"</span>, <span class="string">""</span>, <span class="string">"Filename to be parsed"</span>)</div><div class="line">cfg := &config{</div><div class="line">	file: *flagFile,</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们对<strong>配置中的每个字段</strong>执行相同操作。有关完整内容，请查看 <code>gomodifytag</code> 当前 master 分支的标志定义</p>
<p>一旦我们有了配置，就可以做些基本的验证：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    cfg := config{ ... }</div><div class="line"></div><div class="line">    err := cfg.validate()</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        log.Fatalln(err)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// continue parsing</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// validate validates whether the config is valid or not</span></div><div class="line"><span class="keyword">func</span> (c *config) validate() error {</div><div class="line">    <span class="keyword">if</span> c.file == <span class="string">""</span> {</div><div class="line">        <span class="keyword">return</span> errors.New(<span class="string">"no file is passed"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> c.line == <span class="string">""</span> && c.offset ==<span class="number"> 0</span> && c.structName == <span class="string">""</span> {</div><div class="line">        <span class="keyword">return</span> errors.New(<span class="string">"-line, -offset or -struct is not passed"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> c.line != <span class="string">""</span> && c.offset !=<span class="number"> 0</span> ||</div><div class="line">        c.line != <span class="string">""</span> && c.structName != <span class="string">""</span> ||</div><div class="line">        c.offset !=<span class="number"> 0</span> && c.structName != <span class="string">""</span> {</div><div class="line">        <span class="keyword">return</span> errors.New(<span class="string">"-line, -offset or -struct cannot be used together. pick one"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (c.add == <span class="constant">nil</span> || <span class="built_in">len</span>(c.add) ==<span class="number"> 0</span>) &&</div><div class="line">        (c.addOptions == <span class="constant">nil</span> || <span class="built_in">len</span>(c.addOptions) ==<span class="number"> 0</span>) &&</div><div class="line">        !c.clear &&</div><div class="line">        !c.clearOption &&</div><div class="line">        (c.removeOptions == <span class="constant">nil</span> || <span class="built_in">len</span>(c.removeOptions) ==<span class="number"> 0</span>) &&</div><div class="line">        (c.remove == <span class="constant">nil</span> || <span class="built_in">len</span>(c.remove) ==<span class="number"> 0</span>) {</div><div class="line">        <span class="keyword">return</span> errors.New(<span class="string">"one of "</span> +</div><div class="line">            <span class="string">"[-add-tags, -add-options, -remove-tags, -remove-options, -clear-tags, -clear-options]"</span> +</div><div class="line">            <span class="string">" should be defined"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>将验证部分放置在一个单独的函数中，以便测试。<br>现在我们了解了如何获取配置并进行验证，我们继续解析文件：<br><img src="gomodifytags-111.jpg" alt=""></p>
<p>我们已经开始讨论如何解析文件了。这里的解析是 <code>config</code> 结构体的一个方法。实际上，所有的方法都是 <code>config</code> 结构体的一部分：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    cfg := config{}</div><div class="line"></div><div class="line">    node, err := cfg.parse()</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// continue find struct selection ...</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (c *config) parse() (ast.Node, error) {</div><div class="line">    c.fset = token.NewFileSet()</div><div class="line">    <span class="keyword">var</span> contents <span class="keyword">interface</span>{}</div><div class="line">    <span class="keyword">if</span> c.modified != <span class="constant">nil</span> {</div><div class="line">        archive, err := buildutil.ParseOverlayArchive(c.modified)</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            <span class="keyword">return</span> <span class="constant">nil</span>, fmt.Errorf(<span class="string">"failed to parse -modified archive: %v"</span>, err)</div><div class="line">        }</div><div class="line">        fc, ok := archive[c.file]</div><div class="line">        <span class="keyword">if</span> !ok {</div><div class="line">            <span class="keyword">return</span> <span class="constant">nil</span>, fmt.Errorf(<span class="string">"couldn't find %s in archive"</span>, c.file)</div><div class="line">        }</div><div class="line">        contents = fc</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> parser.ParseFile(c.fset, c.file, contents, parser.ParseComments)</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>parse</strong> 函数只做一件事：解析源代码并返回一个 <code>ast.Node</code>。如果我们传入的是文件，那就非常简单了，在这种情况下，我们使用 <code>parser.ParseFile()</code> 函数。需要注意的是 <code>token.NewFileSet()</code>，它创建一个 <code>*token.FileSet</code> 类型。我们将它存储在 <code>c.fset</code> 中，同时也传给了 <code>parser.ParseFile()</code> 函数。为什么呢？</p>
<p>因为 <code>fileset</code> 用于为每个文件<strong>单独</strong>存储每个节点的位置信息。这在以后非常有用，可以用于获得 <code>ast.Node</code> 的确切位置（请注意，<code>ast.Node</code> 使用了一个压缩了的位置信息 <code>token.Pos</code>。要获取更多的信息，它需要通过 <code>token.FileSet.Position()</code> 函数来获取一个 <code>token.Position</code>，其包含更多的信息）</p>
<p>让我们继续。如果通过 <code>stdin</code> 传递源文件，那么这更加有趣。<code>config.modified</code> 字段是一个易于测试的 <code>io.Reader</code>，但实际上我们传递的是 <code>stdin</code>。我们如何检测是否需要从 <code>stdin</code> 读取呢？</p>
<p>我们询问用户是否想通过 <code>stdin</code> 传递内容。这种情况下，工具用户需要传递 <code>--modified</code> 标志（这是一个<strong>布尔</strong>标志）。如果用户了传递它，我们只需将 <code>stdin</code> 分配给 <code>c.modified</code>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">flagModified = flag.Bool(<span class="string">"modified"</span>, <span class="constant">false</span>,</div><div class="line">    <span class="string">"read an archive of modified files from standard input"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> *flagModified {</div><div class="line">    cfg.modified = os.Stdin</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果再次检查上面的 <code>config.parse()</code> 函数，您将发现我们检查是否已分配了 <code>.modified</code> 字段。因为 <code>stdin</code> 是一个任意的数据流，我们需要能够根据给定的协议进行解析。在这种情况下，我们假定存档包含以下内容：</p>
<ul>
<li>文件名，后接一行新行</li>
<li>文件大小（十进制），后接一行新行</li>
<li>文件的内容</li>
<li>因为我们知道文件大小，可以无障碍地解析文件内容。任何超出给定文件大小的部分，我们仅仅停止解析。</li>
</ul>
<p>此方法也被其他几个工具所使用（如 <code>guru</code>、<code>gogetdoc</code> 等），对编辑器来说非常有用。 因为这样可以让编辑器传递修改后的文件内容，而不会保存到文件系统中。因此命名为 <code>modified</code>。</p>
<p>现在我们有了自己的节点，让我们继续 “搜索结构体” 这一步：</p>
<p><img src="gomodifytags-118.jpg" alt=""></p>
<p>在 <code>main</code> 函数中，我们将使用从上一步解析得到的 <code>ast.Node</code> 调用 <code>findSelection()</code> 函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    <span class="comment">// ... parse file and get ast.Node</span></div><div class="line"></div><div class="line">    start, end, err := cfg.findSelection(node)</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">return</span> err</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// continue rewriting the node with the start&end position</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>cfg.findSelection()</code> 函数根据配置返回结构体的开始位置和结束位置以告知我们如何选择一个结构体。它迭代给定节点，然后返回开始位置/结束位置（如上配置部分中所述）：</p>
<p><img src="gomodifytags-001.jpg" alt="查找步骤遍历所有节点，直到找到一个 *ast.StructType，并返回该文件的开始位置和结束位置"></p>
<p>但是怎么做呢？记住有三种模式。分别是<strong>行选择</strong>、<strong>偏移量</strong>和<strong>结构体名称</strong>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// findSelection returns the start and end position of the fields that are</span></div><div class="line"><span class="comment">// suspect to change. It depends on the line, struct or offset selection.</span></div><div class="line"><span class="keyword">func</span> (c *config) findSelection(node ast.Node) (<span class="typename">int</span>, <span class="typename">int</span>, error) {</div><div class="line">    <span class="keyword">if</span> c.line != <span class="string">""</span> {</div><div class="line">        <span class="keyword">return</span> c.lineSelection(node)</div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> c.offset !=<span class="number"> 0</span> {</div><div class="line">        <span class="keyword">return</span> c.offsetSelection(node)</div><div class="line">    } <span class="keyword">else</span> <span class="keyword">if</span> c.structName != <span class="string">""</span> {</div><div class="line">        <span class="keyword">return</span> c.structSelection(node)</div><div class="line">    } <span class="keyword">else</span> {</div><div class="line">        <span class="keyword">return</span><span class="number"> 0</span>,<span class="number"> 0</span>, errors.New(<span class="string">"-line, -offset or -struct is not passed"</span>)</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>行选择</strong>是最简单的部分。这里我们只返回标志值本身。因此如果用户传入 <code>--line 3,50</code> 标志，函数将返回<code>(3, 50, nil)</code>。 它所做的就是拆分标志值并将其转换为整数（同样执行验证）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *config) lineSelection(file ast.Node) (<span class="typename">int</span>, <span class="typename">int</span>, error) {</div><div class="line">    <span class="keyword">var</span> err error</div><div class="line">    splitted := strings.Split(c.line, <span class="string">","</span>)</div><div class="line"></div><div class="line">    start, err := strconv.Atoi(splitted<span class="number">[0</span>])</div><div class="line">    <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">return</span><span class="number"> 0</span>,<span class="number"> 0</span>, err</div><div class="line">    }</div><div class="line"></div><div class="line">    end := start</div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(splitted) ==<span class="number"> 2</span> {</div><div class="line">        end, err = strconv.Atoi(splitted<span class="number">[1</span>])</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            <span class="keyword">return</span><span class="number"> 0</span>,<span class="number"> 0</span>, err</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> start &gt; end {</div><div class="line">        <span class="keyword">return</span><span class="number"> 0</span>,<span class="number"> 0</span>, errors.New(<span class="string">"wrong range. start line cannot be larger than end line"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> start, end, <span class="constant">nil</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>当您选中一组行并高亮它们时，编辑器将使用此模式。</p>
<p><strong>偏移量</strong>和<strong>结构体名称</strong>选择需要做更多的工作。 对于这些，我们首先需要收集所有给定的结构体，以便可以计算偏移位置或搜索结构体名称。为此，我们首先要有一个收集所有结构体的函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// collectStructs collects and maps structType nodes to their positions</span></div><div class="line"><span class="keyword">func</span> collectStructs(node ast.Node) <span class="keyword">map</span>[token.Pos]*structType {</div><div class="line">    structs := <span class="built_in">make</span>(<span class="keyword">map</span>[token.Pos]*structType,<span class="number"> 0</span>)</div><div class="line">    collectStructs := <span class="keyword">func</span>(n ast.Node) <span class="typename">bool</span> {</div><div class="line">        t, ok := n.(*ast.TypeSpec)</div><div class="line">        <span class="keyword">if</span> !ok {</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> t.Type == <span class="constant">nil</span> {</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line"></div><div class="line">        structName := t.Name.Name</div><div class="line"></div><div class="line">        x, ok := t.Type.(*ast.StructType)</div><div class="line">        <span class="keyword">if</span> !ok {</div><div class="line">            <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">        }</div><div class="line"></div><div class="line">        structs[x.Pos()] = &structType{</div><div class="line">            name: structName,</div><div class="line">            node: x,</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">    }</div><div class="line">    ast.Inspect(node, collectStructs)</div><div class="line">    <span class="keyword">return</span> structs</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们使用 <code>ast.Inspect()</code> 函数逐步遍历 AST 并搜索结构体。<br>我们首先搜索 <code>*ast.TypeSpec</code>，以便我们可以获得结构体名称。搜索 <code>*ast.StructType</code> 时给定的是结构体本身，而不是它的名字。 这就是为什么我们有一个自定义的 structType 类型，它保存了名称和结构体节点本身。这样在各个地方都很方便。 因为每个结构体的位置都是唯一的，并且在同一位置上不可能存在两个不同的结构体，因此我们使用位置作为 map 的键。</p>
<p>现在我们拥有了所有结构体，在最后可以返回一个结构体的起始位置和结束位置的偏移量和结构体名称模式。 对于偏移位置，我们检查偏移是否在给定的结构体之间：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *config) offsetSelection(file ast.Node) (<span class="typename">int</span>, <span class="typename">int</span>, error) {</div><div class="line">    structs := collectStructs(file)</div><div class="line"></div><div class="line">    <span class="keyword">var</span> encStruct *ast.StructType</div><div class="line">    <span class="keyword">for</span> _, st := <span class="keyword">range</span> structs {</div><div class="line">        structBegin := c.fset.Position(st.node.Pos()).Offset</div><div class="line">        structEnd := c.fset.Position(st.node.End()).Offset</div><div class="line"></div><div class="line">        <span class="keyword">if</span> structBegin &lt;= c.offset && c.offset &lt;= structEnd {</div><div class="line">            encStruct = st.node</div><div class="line">            <span class="keyword">break</span></div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> encStruct == <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">return</span><span class="number"> 0</span>,<span class="number"> 0</span>, errors.New(<span class="string">"offset is not inside a struct"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// offset mode selects all fields</span></div><div class="line">    start := c.fset.Position(encStruct.Pos()).Line</div><div class="line">    end := c.fset.Position(encStruct.End()).Line</div><div class="line"></div><div class="line">    <span class="keyword">return</span> start, end, <span class="constant">nil</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>我们使用 <code>collectStructs()</code> 来收集所有结构体，之后在这里迭代。还得记得我们存储了用于解析文件的初始 <code>token.FileSet</code> 么？</p>
<p>现在可以用它来获取每个结构体节点的偏移信息（我们将其解码为一个 <code>token.Position</code>，它为我们提供了 <code>.Offset</code> 字段）。 我们所做的只是一个简单的检查和迭代，直到我们找到结构体（这里命名为 <code>encStruct</code>）：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> _, st := <span class="keyword">range</span> structs {</div><div class="line">    structBegin := c.fset.Position(st.node.Pos()).Offset</div><div class="line">    structEnd := c.fset.Position(st.node.End()).Offset</div><div class="line"></div><div class="line">    <span class="keyword">if</span> structBegin &lt;= c.offset && c.offset &lt;= structEnd {</div><div class="line">        encStruct = st.node</div><div class="line">        <span class="keyword">break</span></div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>有了这些信息，我们可以提取找到的结构体的开始位置和结束位置：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">start := c.fset.Position(encStruct.Pos()).Line</div><div class="line">end := c.fset.Position(encStruct.End()).Line</div></pre></td></tr></table></figure>

<p>该逻辑同样适用于结构体名称选择。 我们所做的只是尝试<strong>检查结构体名称</strong>，直到找到与给定名称一致的结构体，而不是检查偏移量是否在给定的结构体范围内：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *config) structSelection(file ast.Node) (<span class="typename">int</span>, <span class="typename">int</span>, error) {</div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, st := <span class="keyword">range</span> structs {</div><div class="line">        <span class="keyword">if</span> st.name == c.structName {</div><div class="line">            encStruct = st.node</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在我们有了开始位置和结束位置，我们终于可以进行第三步了：修改结构体字段。</p>
<p><img src="gomodifytags-136.jpg" alt=""></p>
<p>在 <code>main</code> 函数中，我们将使用从上一步解析的节点来调用 <code>cfg.rewrite()</code> 函数：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    <span class="comment">// ... find start and end position of the struct to be modified</span></div><div class="line"></div><div class="line"></div><div class="line">    rewrittenNode, errs := cfg.rewrite(node, start, end)</div><div class="line">    <span class="keyword">if</span> errs != <span class="constant">nil</span> {</div><div class="line">        <span class="keyword">if</span> _, ok := errs.(*rewriteErrors); !ok {</div><div class="line">            <span class="keyword">return</span> errs</div><div class="line">        }</div><div class="line">    }</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">// continue outputting the rewritten node</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这是该工具的核心。在 <code>rewrite</code> 函数中，我们将重写开始位置和结束位置之间的所有结构体字段。 在深入了解之前，我们可以看一下该函数的大概内容：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// rewrite rewrites the node for structs between the start and end</span></div><div class="line"><span class="comment">// positions and returns the rewritten node</span></div><div class="line"><span class="keyword">func</span> (c *config) rewrite(node ast.Node, start, end <span class="typename">int</span>) (ast.Node, error) {</div><div class="line">    errs := &rewriteErrors{errs: <span class="built_in">make</span>([]error,<span class="number"> 0</span>)}</div><div class="line"></div><div class="line">    rewriteFunc := <span class="keyword">func</span>(n ast.Node) <span class="typename">bool</span> {</div><div class="line">        <span class="comment">// rewrite the node ...</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(errs.errs) ==<span class="number"> 0</span> {</div><div class="line">        <span class="keyword">return</span> node, <span class="constant">nil</span></div><div class="line">    }</div><div class="line"></div><div class="line">    ast.Inspect(node, rewriteFunc)</div><div class="line">    <span class="keyword">return</span> node, errs</div><div class="line">}</div></pre></td></tr></table></figure>

<p>正如你所看到的，我们再次使用 <code>ast.Inspect()</code> 来逐步处理给定节点的树。我们重写 <code>rewriteFunc</code> 函数中的每个字段的标签（更多内容在后面）。</p>
<p>因为传递给 <code>ast.Inspect()</code> 的函数不会返回错误，因此我们将创建一个错误映射（使用 errs 变量定义），之后在我们逐步遍历树并处理每个单独的字段时收集错误。现在让我们来谈谈 <code>rewriteFunc</code> 的内部原理：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">rewriteFunc := <span class="keyword">func</span>(n ast.Node) <span class="typename">bool</span> {</div><div class="line">    x, ok := n.(*ast.StructType)</div><div class="line">    <span class="keyword">if</span> !ok {</div><div class="line">        <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">for</span> _, f := <span class="keyword">range</span> x.Fields.List {</div><div class="line">        line := c.fset.Position(f.Pos()).Line</div><div class="line"></div><div class="line">        <span class="keyword">if</span> !(start &lt;= line && line &lt;= end) {</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">if</span> f.Tag == <span class="constant">nil</span> {</div><div class="line">            f.Tag = &ast.BasicLit{}</div><div class="line">        }</div><div class="line"></div><div class="line">        fieldName := <span class="string">""</span></div><div class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(f.Names) !=<span class="number"> 0</span> {</div><div class="line">            fieldName = f.Names<span class="number">[0</span>].Name</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="comment">// anonymous field</span></div><div class="line">        <span class="keyword">if</span> f.Names == <span class="constant">nil</span> {</div><div class="line">            ident, ok := f.Type.(*ast.Ident)</div><div class="line">            <span class="keyword">if</span> !ok {</div><div class="line">                <span class="keyword">continue</span></div><div class="line">            }</div><div class="line"></div><div class="line">            fieldName = ident.Name</div><div class="line">        }</div><div class="line"></div><div class="line">        res, err := c.process(fieldName, f.Tag.Value)</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">            errs.Append(fmt.Errorf(<span class="string">"%s:%d:%d:%s"</span>,</div><div class="line">                c.fset.Position(f.Pos()).Filename,</div><div class="line">                c.fset.Position(f.Pos()).Line,</div><div class="line">                c.fset.Position(f.Pos()).Column,</div><div class="line">                err))</div><div class="line">            <span class="keyword">continue</span></div><div class="line">        }</div><div class="line"></div><div class="line">        f.Tag.Value = res</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">return</span> <span class="constant">true</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>记住，AST 树中的<strong>每一个节点</strong>都会调用这个函数。因此，我们只寻找类型为 <code>*ast.StructType</code> 的节点。一旦我们拥有，就可以开始迭代结构体字段。</p>
<p>这里我们使用 <code>start</code> 和 <code>end</code> 变量。这定义了我们是否要修改该字段。如果字段位置位于 start-end 之间，我们将继续，否则我们将忽略：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> !(start &lt;= line && line &lt;= end) {</div><div class="line">    <span class="keyword">continue</span> <span class="comment">// skip processing the field</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>接下来，我们检查是否存在标签。如果标签字段为空（也就是 nil），则初始化标签字段。这在有助于后面的 <code>cfg.process()</code> 函数避免 <code>panic</code>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> f.Tag == <span class="constant">nil</span> {</div><div class="line">    f.Tag = &ast.BasicLit{}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>现在让我先解释一下一个<strong>有趣</strong>的地方，然后再继续。<code>gomodifytags</code> 尝试获取字段的字段名称并处理它。然而，当它是一个匿名字段呢？：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Bar <span class="typename">string</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> {</div><div class="line">    Bar <span class="comment">//this is an anonymous field</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>在这种情况下，因为没有字段名称，我们尝试从类型名称中获取<strong>字段名称</strong>：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// if there is a field name use it</span></div><div class="line">fieldName := <span class="string">""</span></div><div class="line"><span class="keyword">if</span> <span class="built_in">len</span>(f.Names) !=<span class="number"> 0</span> {</div><div class="line">    fieldName = f.Names<span class="number">[0</span>].Name</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// if there is no field name, get it from type's name</span></div><div class="line"><span class="keyword">if</span> f.Names == <span class="constant">nil</span> {</div><div class="line">    ident, ok := f.Type.(*ast.Ident)</div><div class="line">    <span class="keyword">if</span> !ok {</div><div class="line">        <span class="keyword">continue</span></div><div class="line">    }</div><div class="line"></div><div class="line">    fieldName = ident.Name</div><div class="line">}</div></pre></td></tr></table></figure>

<p>一旦我们获得了字段名称和标签值，就可以开始处理该字段。<code>cfg.process()</code> 函数负责处理有字段名称和标签值（如果有的话）的字段。在它返回处理结果后（在我们的例子中是 struct tag 格式），我们使用它来覆盖现有的标签值：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">res, err := c.process(fieldName, f.Tag.Value)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    errs.Append(fmt.Errorf(<span class="string">"%s:%d:%d:%s"</span>,</div><div class="line">        c.fset.Position(f.Pos()).Filename,</div><div class="line">        c.fset.Position(f.Pos()).Line,</div><div class="line">        c.fset.Position(f.Pos()).Column,</div><div class="line">        err))</div><div class="line">    <span class="keyword">continue</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// rewrite the field with the new result,i.e:​​​ js​on:"foo"</span></div><div class="line">f.Tag.Value = res</div></pre></td></tr></table></figure>

<p>实际上，如果你记得 <code>structtag</code>，它返回标签实例的 <code>String()</code> 表述。在我们返回标签的最终表述之前，我们根据需要使用 <code>structtag</code> 包的各种方法修改结构体。以下是一个简单的说明图示：</p>
<p><img src="gomodifytags-0013.jpg" alt="用 structtag 包修改每个字段"></p>
<p>例如，我们要扩展 <strong>process()</strong> 中的 <strong>removeTags()</strong> 函数。此功能使用以下配置来创建要删除的标签数组（键名称）:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">flagRemoveTags = flag.String(<span class="string">"remove-tags"</span>, <span class="string">""</span>, <span class="string">"Remove tags for the comma separated list of keys"</span>)</div><div class="line"></div><div class="line"><span class="keyword">if</span> *flagRemoveTags != <span class="string">""</span> {</div><div class="line">    cfg.remove = strings.Split(*flagRemoveTags, <span class="string">","</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在 <code>removeTags()</code> 中，我们检查是否使用了 <code>--remove-tags</code>。如果有，我们将使用 <code>structtag</code> 的 <code>tags.Delete()</code> 方法来删除标签：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (c *config) removeTags(tags *structtag.Tags) *structtag.Tags {</div><div class="line">    <span class="keyword">if</span> c.remove == <span class="constant">nil</span> || <span class="built_in">len</span>(c.remove) ==<span class="number"> 0</span> {</div><div class="line">        <span class="keyword">return</span> tags</div><div class="line">    }</div><div class="line"></div><div class="line">    tags.Delete(c.remove...)</div><div class="line">    <span class="keyword">return</span> tags</div><div class="line">}</div><div class="line"></div><div class="line">此逻辑同样适用于 <span class="string">`cfg.Process()`</span> 中的所有函数。</div><div class="line"></div><div class="line"></div><div class="line">&lt;hr/&gt;</div><div class="line"></div><div class="line">我们已经有了一个重写的节点，让我们来讨论最后一个话题。输出和格式化结果：</div><div class="line"></div><div class="line">![](gomodifytags<span class="number">-158</span>.jpg)</div><div class="line"></div><div class="line">在 main 函数中，我们将使用上一步重写的节点来调用 <span class="string">`cfg.format()`</span> 函数：</div></pre></td></tr></table></figure>

<p>go<br>func main() {<br>    // ... rewrite the node</p>
<pre><code><span class="keyword">out</span>, err := cfg<span class="variable">.format</span>(rewrittenNode, errs)
<span class="keyword">if</span> err != <span class="literal">nil</span> {
    <span class="keyword">return</span> err
}

fmt<span class="variable">.Println</span>(<span class="keyword">out</span>)
</code></pre><p>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">您需要注意的一件事是，我们输出到 <span class="keyword">*</span><span class="keyword">*</span>stdout<span class="keyword">*</span><span class="keyword">*</span>。这佯做有许多优点。首先，您只需运行工具就能查看到结果， 它不会改变任何东西，只是为了让工具用户立即看到结果。其次，<span class="keyword">*</span><span class="keyword">*</span>stdout<span class="keyword">*</span><span class="keyword">*</span> 是可组合的，可以重定向到任何地方，甚至可以用来覆盖原来的工具。</div><div class="line"></div><div class="line">现在我们来看看 `format()` 函数：</div></pre></td></tr></table></figure>

<p>go<br>func (c *config) format(file ast.Node, rwErrs error) (string, error) {<br>    switch c.output {<br>    case &quot;source&quot;:<br>        // return Go source code<br>    case &quot;json&quot;:<br>        // return a custom JSON output<br>    default:<br>        return &quot;&quot;, fmt.Errorf(&quot;unknown output mode: %s&quot;, c.output)<br>    }<br>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">我们有<span class="keyword">*</span><span class="keyword">*</span>两种输出模式<span class="keyword">*</span><span class="keyword">*</span>。</div><div class="line"></div><div class="line"><span class="keyword">*</span><span class="keyword">*</span>第一个<span class="keyword">*</span><span class="keyword">*</span>（source）以 Go 格式打印 ast.Node。这是默认选项，如果您在命令行使用它或只想看到文件中的更改，那么这非常适合您。</div><div class="line"></div><div class="line"><span class="keyword">*</span><span class="keyword">*</span>第二个选项<span class="keyword">*</span><span class="keyword">*</span>（json）更为先进，其专为其他环境而设计（特别是编辑器）。它根据以下结构体对输出进行编码：</div></pre></td></tr></table></figure>

<p>go<br>type output struct {<br>    Start  int      <code>json:&quot;start&quot;</code><br>    End    int      <code>json:&quot;end&quot;</code><br>    Lines  []string <code>json:&quot;lines&quot;</code><br>    Errors []string <code>json:&quot;errors,omitempty&quot;</code><br>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">对工具进行输入和最终结果输出（没有任何错误）大概示意图如下：</div><div class="line"></div><div class="line">![](gomodifytags-<span class="number">0014</span>.jpg)</div><div class="line"></div><div class="line">回到 <span class="escape">`f</span>ormat()<span class="escape">` </span>函数。如之前所述，有两种模式。<span class="escape">`s</span>ource<span class="escape">` </span>模式使用 <span class="escape">`g</span>o/format<span class="escape">` </span>包将 AST 格式化为 Go 源码。该软件包也被许多其他官方工具（如 gofmt）使用。以下是 source 模式的实现方式：</div></pre></td></tr></table></figure>

<p>go<br>var buf bytes.Buffer<br>err := format.Node(&amp;buf, c.fset, file)<br>if err != nil {<br>    return &quot;&quot;, err<br>}</p>
<p>if c.write {<br>    err = ioutil.WriteFile(c.file, buf.Bytes(), 0)<br>    if err != nil {<br>        return &quot;&quot;, err<br>    }<br>}</p>
<p>return buf.String(), nil</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">格式包接受 <span class="escape">`i</span>o.Writer<span class="escape">` </span>并对其进行格式化。这就是为什么我们创建一个中间缓冲区（<span class="escape">`v</span>ar buf bytes.Buffer<span class="escape">`）</span>的原因，当用户传入一个 <span class="escape">`-</span>write<span class="escape">` </span>标志时，我们可以使用它来覆盖文件。格式化后，我们返回缓冲区的字符串表示形式，其中包含格式化后的 Go 源代码。</div><div class="line"></div><div class="line"><span class="escape">`j</span>son<span class="escape">` </span>模式更有趣。因为我们返回的是一段源代码，因此我们需要准确地呈现它原本的格式，这也意味着要把注释包含进去。问题在于，当使用 <span class="escape">`f</span>ormat.Node()<span class="escape">` </span>打印单个结构体时，如果它们是有损的，则无法打印出 Go 注释。</div><div class="line"></div><div class="line">什么是有损注释（lossy comment）？看看这个例子：</div></pre></td></tr></table></figure>

<p>go<br>type example struct {<br>    foo int </p>
<pre><code><span class="comment">// this is a lossy comment</span>

bar <span class="keyword">int</span> 
</code></pre><p>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">每个字段都是 <span class="escape">`*</span>ast.Field<span class="escape">` </span>类型。此结构体有一个 <span class="escape">`*</span>ast.Field.Comment<span class="escape">` </span>字段，其包含某字段的注释。</div><div class="line"></div><div class="line">但是，在上面的例子中，它属于谁？属于 <span class="escape">`f</span>oo<span class="escape">` </span>还是 <span class="escape">`b</span>ar<span class="escape">`？</span></div><div class="line"></div><div class="line"><span class="label">因为不可能确定，这些注释被称为有损注释。如果现在使用 `format.Node()` 函数打印上面的结构体，就会出现问题。 当你打印它时，你可能会得到（https:</span>//play.golang.org/p/peHsswF4JQ）：</div></pre></td></tr></table></figure>

<p>go<br>type example struct {<br>    foo int</p>
<pre><code>bar <span class="keyword">int</span>
</code></pre><p>}</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">问题在于有损注释是 `<span class="keyword">*</span>ast.File` 的<span class="keyword">*</span><span class="keyword">*</span>一部分<span class="keyword">*</span><span class="keyword">*</span>，<span class="keyword">*</span><span class="keyword">*</span>它与树分开<span class="keyword">*</span><span class="keyword">*</span>。只有打印整个文件时才能打印出来。 所以解决方法是打印整个文件，然后删除掉我们要在 JSON 输出中返回的指定行：</div></pre></td></tr></table></figure>

<p>go<br>var buf bytes.Buffer<br>err := format.Node(&amp;buf, c.fset, file)<br>if err != nil {<br>    return &quot;&quot;, err<br>}</p>
<p>var lines []string<br>scanner := bufio.NewScanner(bytes.NewBufferString(buf.String()))<br>for scanner.Scan() {<br>    lines = append(lines, scanner.Text())<br>}</p>
<p>if c.start &gt; len(lines) {<br>    return &quot;&quot;, errors.New(&quot;line selection is invalid&quot;)<br>}</p>
<p>out := &amp;output{<br>    Start: c.start,<br>    End:   c.end,<br>    Lines: lines[c.start-1 : c.end], // cut out lines<br>}</p>
<p>o, err := json.MarshalIndent(out, &quot;&quot;, &quot;  &quot;)<br>if err != nil {<br>    return &quot;&quot;, err<br>}</p>
<p>return string(o), nil<br>```</p>
<p>这样做确保我们可以打印所有注释。</p>
<hr>

<p>这就是全部内容！</p>
<p>我们成功完成了我们的工具，以下是我们在整个指南中实施的完整步骤图：</p>
<p><img src="gomodifytags-175.jpg" alt=""></p>
<p>回顾一下我们做了什么：</p>
<ul>
<li>我们通过 CLI 标志检索配置</li>
<li>我们通过 <code>go/parser</code> 包解析文件来获取一个 <code>ast.Node</code>。</li>
<li>在解析文件之后，我们搜索 获取相应的结构体来获取开始位置和结束位置，这样我们可以知道需要修改哪些字段</li>
<li>一旦我们有了开始位置和结束位置，我们再次遍历 <code>ast.Node</code>，重写开始位置和结束位置之间的每个字段（通过使用 structtag 包）</li>
<li>之后，我们将格式化重写的节点，为编辑器输出 Go 源代码或自定义的 JSON</li>
</ul>
<p>在创建此工具后，我收到了很多友好的评论，评论者们提到了这个工具如何简化他们的日常工作。正如您所看到，尽管看起来它很容易制作，但在整个指南中，我们已经针对许多特殊的情况做了特别处理。</p>
<p>gomodifytags 成功应用于以下编辑器和插件已经有几个月了，使得数以千计的开发人员提升了工作效率：</p>
<ul>
<li>vim-go</li>
<li>atom</li>
<li>vscode</li>
<li>acme</li>
</ul>
<p>如果您对原始源代码感兴趣，可以在这里找到：</p>
<p><a href="https://github.com/fatih/gomodifytags" target="_blank" rel="external">https://github.com/fatih/gomodifytags</a><br>我还在 Gophercon 2017 上发表了一个演讲，如果您感兴趣，可点击下面的 youtube 链接观看：</p>
<p><a href="https://www.youtube.com/embed/T4AIQ4RHp-c?version=3&amp;rel=1&amp;fs=1&amp;autohide=2&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent" target="_blank" rel="external">https://www.youtube.com/embed/T4AIQ4RHp-c?version=3&amp;rel=1&amp;fs=1&amp;autohide=2&amp;showsearch=0&amp;showinfo=1&amp;iv_load_policy=1&amp;wmode=transparent</a></p>
<p>谢谢您阅读此文。希望这个指南能启发您从头创建一个新的 Go 工具。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/" target="_blank" rel="external">https://arslan.io/2017/09/14/the-ultimate-guide-to-writing-a-go-tool/</a><br>作者：Fatih Arslan<br>译文：<a href="http://oopsguy.com/2017/10/27/the-ultimate-guide-to-writing-a-go-tool/" target="_blank" rel="external">http://oopsguy.com/2017/10/27/the-ultimate-guide-to-writing-a-go-tool/</a><br>译者：oopsguy.com</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Go 机器学习库来进行数据分析 3 (平均感知器)]]></title>
    <link href="http://colobu.com/2017/12/07/Three-Machine-Learning-for-Go/"/>
    <id>http://colobu.com/2017/12/07/Three-Machine-Learning-for-Go/</id>
    <published>2017-12-07T11:21:56.000Z</published>
    <updated>2017-12-09T15:22:06.126Z</updated>
    <content type="html"><![CDATA[<p>这一次，我们使用平均感知器(Average Perceptron)算法来预测美国国会的投票。</p>
<a id="more"></a>
<h2 id="1984美国国会投票记录数据集">1984美国国会投票记录数据集</h2>
<p>这一次，我们使用1984美国国会的<a href="https://archive.ics.uci.edu/ml/datasets/congressional+voting+records" target="_blank" rel="external">投票记录</a>来预测一下投票结果。</p>
<p>数据集针对不同的投票议题分为了16类， 记录了民主党和共和党议员们得投票结果。</p>
<p>格式如下</p>
<figure class="highlight csv"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">v16,v1,v2,v3,v4,v5,v6,v7,v8,v9,v10,v11,v12,v13,v14,v15,party</div><div class="line">1,-1,1,-1,1,1,1,-1,-1,-1,1,-1,1,1,1,-1,republican</div><div class="line">-<span class="ruby"><span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,republican</span></div><div class="line">-<span class="ruby"><span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,democrat</span></div><div class="line">1,-1,1,1,-1,-1,1,-1,-1,-1,-1,1,-1,1,-1,-1,democrat</div><div class="line">1,1,1,1,-1,1,1,-1,-1,-1,-1,1,-1,1,1,1,democrat</div><div class="line">1,-1,1,1,-1,1,1,-1,-1,-1,-1,-1,-1,1,1,1,democrat</div><div class="line">1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,democrat</div><div class="line">1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,-1,1,1,-1,republican</div><div class="line">1,-1,1,-1,1,1,1,-1,-1,-1,-1,-1,1,1,1,-1,republican</div><div class="line">-<span class="ruby"><span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,democrat</span></div><div class="line">-<span class="ruby"><span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,republican</span></div><div class="line">-<span class="ruby"><span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,-<span class="number">1</span>,republican</span></div><div class="line"></div><div class="line">......</div></pre></td></tr></table></figure>

<p>这一次，我们还是将数据集分为训练数据和测试数据，以评估算法的预测结果的准确性。</p>
<h2 id="平均感知器">平均感知器</h2>
<p>感知器算法一个监督学习的二分分类器， 是线性分类器的一种。</p>
<p>感知机算法是非常好的二分类算法，该算法求取一个分离超平面，超平面由w参数化并用来预测，对于一个样本x，感知机算法通过计算y = [w,x]预测样本的标签，最终的预测标签通过计算sign(y)来实现。算法仅在预测错误时修正权值w。<br>平均感知机和感知机算法的训练方法一样，不同的是每次训练样本xi后，保留先前训练的权值，训练结束后平均所有权值。最终用平均权值作为最终判别准则的权值。参数平均化可以克服由于学习速率过大所引起的训练过程中出现的震荡现象。</p>
<h2 id="代码">代码</h2>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	base <span class="string">"github.com/sjwhitworth/golearn/base"</span></div><div class="line">	evaluation <span class="string">"github.com/sjwhitworth/golearn/evaluation"</span></div><div class="line">	perceptron <span class="string">"github.com/sjwhitworth/golearn/perceptron"</span></div><div class="line">	<span class="string">"math/rand"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">	rand.Seed<span class="number">(4402201</span>)</div><div class="line"></div><div class="line">	rawData, err := base.ParseCSVToInstances(<span class="string">"../datasets/house-votes-84.csv"</span>, <span class="constant">true</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">//Initialises a new AveragePerceptron classifier</span></div><div class="line">	cls := perceptron.NewAveragePerceptron<span class="number">(10</span>,<span class="number"> 1.2</span>,<span class="number"> 0.5</span>,<span class="number"> 0.3</span>)</div><div class="line"></div><div class="line">	<span class="comment">//Do a training-test split</span></div><div class="line">	trainData, testData := base.InstancesTrainTestSplit(rawData,<span class="number"> 0.50</span>)</div><div class="line">	fmt.Println(trainData)</div><div class="line">	fmt.Println(testData)</div><div class="line">	cls.Fit(trainData)</div><div class="line"></div><div class="line">	predictions := cls.Predict(testData)</div><div class="line"></div><div class="line">	<span class="comment">// Prints precision/recall metrics</span></div><div class="line">	confusionMat, _ := evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	fmt.Println(evaluation.GetSummary(confusionMat))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>首先读入国会投票数据集。</p>
<p>然后创建平均感知器算法实例。</p>
<p>之后将数据集分为两份，一份训练数据，一份用来预测和评估。</p>
<p>最后将评估结果打印。</p>
<h2 id="评估结果">评估结果</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">democrat	98		24		70		0</span><span class="string">.</span><span class="comment">8033		0</span><span class="string">.</span><span class="comment">6806	0</span><span class="string">.</span><span class="comment">7368</span></div><div class="line"><span class="comment">republican	70		46		98		0</span><span class="string">.</span><span class="comment">6034		0</span><span class="string">.</span><span class="comment">7447	0</span><span class="string">.</span><span class="comment">6667</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">7059</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>这一次，我们使用平均感知器(Average Perceptron)算法来预测美国国会的投票。</p>
]]>
    
    </summary>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Go 机器学习库来进行数据分析 2 (决策树)]]></title>
    <link href="http://colobu.com/2017/12/07/Two-Machine-Learning-for-Go/"/>
    <id>http://colobu.com/2017/12/07/Two-Machine-Learning-for-Go/</id>
    <published>2017-12-07T10:24:30.000Z</published>
    <updated>2017-12-09T15:22:06.126Z</updated>
    <content type="html"><![CDATA[<p>这篇文章， 继续使用<a href="https://github.com/sjwhitworth/golearn" target="_blank" rel="external">golearn</a>库分析鸢尾花的数据集。 这一次，我们会使用决策树和随机森林来分析。</p>
<a id="more"></a>
<h2 id="决策树和随机森林">决策树和随机森林</h2>
<p>决策树是机器学习中最接近人类思考问题的过程的一种算法，通过若干个节点，对特征进行提问并分类（可以是二分类也可以使多分类），直至最后生成叶节点（也就是只剩下一种属性）。</p>
<p>每个决策树都表述了一种树型结构，它由它的分支来对该类型的对象依靠属性进行分类。每个决策树可以依靠对源数据库的分割进行数据测试。这个过程可以递归式的对树进行修剪。 当不能再进行分割或一个单独的类可以被应用于某一分支时，递归过程就完成了。另外，随机森林分类器将许多决策树结合起来以提升分类的正确率。</p>
<p>golearn支持两种决策树算法。ID3和RandomTree。</p>
<ul>
<li><p><strong>ID3</strong>: 以信息增益为准则选择信息增益最大的属性。</p>
<blockquote>
<p>ID3 is a decision tree induction algorithm which splits on the Attribute which gives the greatest Information Gain (entropy gradient). It performs well on categorical data. Numeric datasets will need to be discretised before using ID3 </p>
</blockquote>
</li>
<li><p><strong>RandomTree</strong>: 与ID3类似，但是选择的属性的时候随机选择。</p>
<blockquote>
<p>Random Trees are structurally identical to those generated by ID3, but the split Attribute is chosen randomly. Golearn&#39;s implementation allows you to choose up to k nodes for consideration at each split.</p>
</blockquote>
</li>
</ul>
<p>可以参考 ChongmingLiu的介绍： <a href="http://www.jianshu.com/p/38aa0daf6841" target="_blank" rel="external">决策树(ID3 &amp; C4.5 &amp; CART)</a>。</p>
<p>维基百科中对随机森林的介绍：</p>
<blockquote>
<p>在机器学习中，随机森林是一个包含多个决策树的分类器，并且其输出的类别是由个别树输出的类别的众数而定。 Leo Breiman和Adele Cutler发展出推论出随机森林的算法。而&quot;Random Forests&quot;是他们的商标。这个术语是1995年由贝尔实验室的Tin Kam Ho所提出的随机决策森林（random decision forests）而来的。这个方法则是结合Breimans的&quot;Bootstrap aggregating&quot;想法和Ho的&quot;random subspace method&quot; 以建造决策树的集合。</p>
</blockquote>
<p>在机器学习中，随机森林由许多的决策树组成，因为这些决策树的形成采用了随机的方法，因此也叫做随机决策树。随机森林中的树之间是没有关联的。当测试数据进入随机森林时，其实就是让每一颗决策树进行分类，最后取所有决策树中分类结果最多的那类为最终的结果。因此随机森林是一个包含多个决策树的分类器，并且其输出的类别是由个别树输出的类别的众数而定。</p>
<h2 id="代码">代码</h2>
<p>下面是使用决策树和随机森林预测鸢尾花分类的代码，来自golearn:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Demonstrates decision tree classification</span></div><div class="line"></div><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/base"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/ensemble"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/evaluation"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/filters"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/trees"</span></div><div class="line">	<span class="string">"math/rand"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">	<span class="keyword">var</span> tree base.Classifier</div><div class="line"></div><div class="line">	rand.Seed<span class="number">(44111342</span>)</div><div class="line"></div><div class="line">	<span class="comment">// Load in the iris dataset</span></div><div class="line">	iris, err := base.ParseCSVToInstances(<span class="string">"../datasets/iris_headers.csv"</span>, <span class="constant">true</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Discretise the iris dataset with Chi-Merge</span></div><div class="line">	filt := filters.NewChiMergeFilter(iris,<span class="number"> 0.999</span>)</div><div class="line">	<span class="keyword">for</span> _, a := <span class="keyword">range</span> base.NonClassFloatAttributes(iris) {</div><div class="line">		filt.AddAttribute(a)</div><div class="line">	}</div><div class="line">	filt.Train()</div><div class="line">	irisf := base.NewLazilyFilteredInstances(iris, filt)</div><div class="line"></div><div class="line">	<span class="comment">// Create a 60-40 training-test split</span></div><div class="line">	trainData, testData := base.InstancesTrainTestSplit(irisf,<span class="number"> 0.60</span>)</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// First up, use ID3</span></div><div class="line">	<span class="comment">//</span></div><div class="line">	tree = trees.NewID3DecisionTree<span class="number">(0.6</span>)</div><div class="line">	<span class="comment">// (Parameter controls train-prune split.)</span></div><div class="line"></div><div class="line">	<span class="comment">// Train the ID3 tree</span></div><div class="line">	err = tree.Fit(trainData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Generate predictions</span></div><div class="line">	predictions, err := tree.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Evaluate</span></div><div class="line">	fmt.Println(<span class="string">"ID3 Performance (information gain)"</span>)</div><div class="line">	cf, err := evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(cf))</div><div class="line"></div><div class="line">	tree = trees.NewID3DecisionTreeFromRule<span class="number">(0.6</span>, <span class="built_in">new</span>(trees.InformationGainRatioRuleGenerator))</div><div class="line">	<span class="comment">// (Parameter controls train-prune split.)</span></div><div class="line"></div><div class="line">	<span class="comment">// Train the ID3 tree</span></div><div class="line">	err = tree.Fit(trainData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Generate predictions</span></div><div class="line">	predictions, err = tree.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Evaluate</span></div><div class="line">	fmt.Println(<span class="string">"ID3 Performance (information gain ratio)"</span>)</div><div class="line">	cf, err = evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(cf))</div><div class="line"></div><div class="line">	tree = trees.NewID3DecisionTreeFromRule<span class="number">(0.6</span>, <span class="built_in">new</span>(trees.GiniCoefficientRuleGenerator))</div><div class="line">	<span class="comment">// (Parameter controls train-prune split.)</span></div><div class="line"></div><div class="line">	<span class="comment">// Train the ID3 tree</span></div><div class="line">	err = tree.Fit(trainData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Generate predictions</span></div><div class="line">	predictions, err = tree.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Evaluate</span></div><div class="line">	fmt.Println(<span class="string">"ID3 Performance (gini index generator)"</span>)</div><div class="line">	cf, err = evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(cf))</div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Next up, Random Trees</span></div><div class="line">	<span class="comment">//</span></div><div class="line"></div><div class="line">	<span class="comment">// Consider two randomly-chosen attributes</span></div><div class="line">	tree = trees.NewRandomTree<span class="number">(2</span>)</div><div class="line">	err = tree.Fit(trainData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line">	predictions, err = tree.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line">	fmt.Println(<span class="string">"RandomTree Performance"</span>)</div><div class="line">	cf, err = evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(cf))</div><div class="line"></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// Finally, Random Forests</span></div><div class="line">	<span class="comment">//</span></div><div class="line">	tree = ensemble.NewRandomForest<span class="number">(70</span>,<span class="number"> 3</span>)</div><div class="line">	err = tree.Fit(trainData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line">	predictions, err = tree.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line">	fmt.Println(<span class="string">"RandomForest Performance"</span>)</div><div class="line">	cf, err = evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(cf))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>首选使用<a href="http://www.aaai.org/Papers/AAAI/1992/AAAI92-019.pdf" target="_blank" rel="external">ChiMerge</a>方法进行数据离散，ChiMerge 是监督的、自底向上的(即基于合并的)数据离散化方法。它依赖于卡方分析：具有最小卡方值的相邻区间合并在一起，直到满足确定的停止准则。<br>基本思想：对于精确的离散化，相对类频率在一个区间内应当完全一致。因此，如果两个相邻的区间具有非常类似的类分布，则这两个区间可以合并；否则，它们应当保持分开。而低卡方值表明它们具有相似的类分布。可以参考&quot;Principles of Data Mining&quot;第二版中的第105页--第115页。</p>
<p>接着调用<code>base.NewLazilyFilteredInstances</code>应用filter得到FixedDataGrid。</p>
<p>之后将数据集分成训练数据和测试数据两部分。</p>
<p>接下来就是训练数据、预测与评估了。</p>
<p>分别使用<code>ID3</code>、<code>ID3 with InformationGainRatioRuleGenerator</code>、<code>ID3 with GiniCoefficientRuleGenerator</code>、<code>RandomTree</code>、<code>RandomForest</code>算法进行处理。</p>
<h2 id="评估结果">评估结果</h2>
<p>以下是各种算法的评估结果，可以和　kNN进行比较,看起来比不过kNN的预测。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="comment">ID3</span> <span class="comment">Performance</span> <span class="comment">(information</span> <span class="comment">gain)</span></div><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">virginica	32		5		46		0</span><span class="string">.</span><span class="comment">8649		0</span><span class="string">.</span><span class="comment">9697	0</span><span class="string">.</span><span class="comment">9143</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">versicolor	4		1		61		0</span><span class="string">.</span><span class="comment">8000		0</span><span class="string">.</span><span class="comment">1818	0</span><span class="string">.</span><span class="comment">2963</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">setosa	29		13		42		0</span><span class="string">.</span><span class="comment">6905		1</span><span class="string">.</span><span class="comment">0000	0</span><span class="string">.</span><span class="comment">8169</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">7738</span></div><div class="line"></div><div class="line"><span class="comment">ID3</span> <span class="comment">Performance</span> <span class="comment">(information</span> <span class="comment">gain</span> <span class="comment">ratio)</span></div><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">virginica	29		3		48		0</span><span class="string">.</span><span class="comment">9062		0</span><span class="string">.</span><span class="comment">8788	0</span><span class="string">.</span><span class="comment">8923</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">versicolor	5		3		59		0</span><span class="string">.</span><span class="comment">6250		0</span><span class="string">.</span><span class="comment">2273	0</span><span class="string">.</span><span class="comment">3333</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">setosa	29		15		40		0</span><span class="string">.</span><span class="comment">6591		1</span><span class="string">.</span><span class="comment">0000	0</span><span class="string">.</span><span class="comment">7945</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">7500</span></div><div class="line"></div><div class="line"><span class="comment">ID3</span> <span class="comment">Performance</span> <span class="comment">(gini</span> <span class="comment">index</span> <span class="comment">generator)</span></div><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">virginica	26		5		46		0</span><span class="string">.</span><span class="comment">8387		0</span><span class="string">.</span><span class="comment">7879	0</span><span class="string">.</span><span class="comment">8125</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">versicolor	17		36		26		0</span><span class="string">.</span><span class="comment">3208		0</span><span class="string">.</span><span class="comment">7727	0</span><span class="string">.</span><span class="comment">4533</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">setosa	0		0		55		NaN		0</span><span class="string">.</span><span class="comment">0000	NaN</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">5119</span></div><div class="line"></div><div class="line"><span class="comment">RandomTree</span> <span class="comment">Performance</span></div><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">virginica	30		3		48		0</span><span class="string">.</span><span class="comment">9091		0</span><span class="string">.</span><span class="comment">9091	0</span><span class="string">.</span><span class="comment">9091</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">versicolor	9		3		59		0</span><span class="string">.</span><span class="comment">7500		0</span><span class="string">.</span><span class="comment">4091	0</span><span class="string">.</span><span class="comment">5294</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">setosa	29		10		45		0</span><span class="string">.</span><span class="comment">7436		1</span><span class="string">.</span><span class="comment">0000	0</span><span class="string">.</span><span class="comment">8529</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">8095</span></div><div class="line"></div><div class="line"><span class="comment">RandomForest</span> <span class="comment">Performance</span></div><div class="line"><span class="comment">Reference</span> <span class="comment">Class	True</span> <span class="comment">Positives	False</span> <span class="comment">Positives	True</span> <span class="comment">Negatives	Precision	Recall	F1</span> <span class="comment">Score</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">	</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">virginica	31		8		43		0</span><span class="string">.</span><span class="comment">7949		0</span><span class="string">.</span><span class="comment">9394	0</span><span class="string">.</span><span class="comment">8611</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">versicolor	0		0		62		NaN		0</span><span class="string">.</span><span class="comment">0000	NaN</span></div><div class="line"><span class="comment">Iris</span><span class="literal">-</span><span class="comment">setosa	29		16		39		0</span><span class="string">.</span><span class="comment">6444		1</span><span class="string">.</span><span class="comment">0000	0</span><span class="string">.</span><span class="comment">7838</span></div><div class="line"><span class="comment">Overall</span> <span class="comment">accuracy:</span> <span class="comment">0</span><span class="string">.</span><span class="comment">7143</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>这篇文章， 继续使用<a href="https://github.com/sjwhitworth/golearn" target="_blank" rel="external">golearn</a>库分析鸢尾花的数据集。 这一次，我们会使用决策树和随机森林来分析。</p>
]]>
    
    </summary>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Go 机器学习库来进行数据分析 1 (kNN)]]></title>
    <link href="http://colobu.com/2017/12/07/One-Machine-Learning-for-Go/"/>
    <id>http://colobu.com/2017/12/07/One-Machine-Learning-for-Go/</id>
    <published>2017-12-07T01:46:04.000Z</published>
    <updated>2017-12-09T15:22:06.063Z</updated>
    <content type="html"><![CDATA[<p>这个系列的文章是介绍如何使用Go语言来进行数据分析和机器学习。</p>
<p>Go机器学习的库目前还不是很多，功能海没有Python的丰富，希望在未来的几年里能有更多的功能丰富库面试。</p>
<p>这篇文章利用<a href="https://github.com/sjwhitworth/golearn" target="_blank" rel="external">golearn</a>库， 使用kNN方法来对Iris数据集进行分析。</p>
<a id="more"></a>
<h2 id="Iris数据集">Iris数据集</h2>
<p>Iris数据集也称为鸢尾花数据集，或者叫做费雪鸢尾花卉数据集或者安德森鸢尾花卉数据集。是一类多重变量分析的数据集。它最初是埃德加·安德森从加拿大加斯帕半岛上的鸢尾属花朵中提取的地理变异数据，后由罗纳德·费雪作为判别分析的一个例子，运用到统计学中。</p>
<p>其它比较流行的数据集还有Adult,Wine,Car Evaluation等(<a href="http://www.jianshu.com/p/be23b3870d2e" target="_blank" rel="external">1</a>)。</p>
<p>Iris数据集包含了150个样本，都属于鸢尾属下的三个亚属，分别是山鸢尾(setosa)、变色鸢尾(versicolor)和维吉尼亚鸢尾(virginica)。四个特征被用作样本的定量分析，它们分别是<strong>花萼</strong>和<strong>花瓣</strong>的<strong>长度</strong>和<strong>宽度</strong>。基于这四个特征的集合，费雪发展了一个线性判别分析以确定其属种。</p>
<p>下面是这三种鸢尾的花,非常的漂亮：</p>
<table class="one" border="1" width="100%"><br><tr><br><td width="33%"><a href="/2017/12/07/One-Machine-Learning-for-Go/Kosaciec_szczecinkowaty_Iris_setosa.jpg" title="" class="fancybox" rel="article0"><img src="Kosaciec_szczecinkowaty_Iris_setosa.jpg" alt=""></a></td><br><td width="33%"><a href="/2017/12/07/One-Machine-Learning-for-Go/Iris_versicolor_3.jpg" title="" class="fancybox" rel="article0"><img src="Iris_versicolor_3.jpg" alt=""></a></td><br><td width="33%"><a href="/2017/12/07/One-Machine-Learning-for-Go/Iris_virginica.jpg" title="" class="fancybox" rel="article0"><img src="Iris_virginica.jpg" alt=""></a></td><br></tr><br></table>


<p>下图是鸢尾花数据集的散布图， 第一个种类与另外两个种类是线性可分离的，后两个种类是非线性可分离的：</p>
<p><img src="Iris_dataset_scatterplot.png" alt=""></p>
<p>以上内容主要参考维基百科和百度百科关于Iris数据集的介绍。</p>
<p>这个数据集在网上很容易搜到，也可以在 golearn 项目中下载。</p>
<h2 id="kNN_K近邻算法">kNN K近邻算法</h2>
<p>分类算法是数据挖掘分类技术中最简单的方法之一。所谓K最近邻，就是k个最近的邻居的意思，说的是每个样本都可以用它最接近的k个邻居来代表。</p>
<p>kNN算法的核心思想是如果一个样本在特征空间中的k个最相邻的样本中的大多数属于某一个类别，则该样本也属于这个类别，并具有这个类别上样本的特性。该方法在确定分类决策上只依据最邻近的一个或者几个样本的类别来决定待分样本所属的类别。 kNN方法在类别决策时，只与极少量的相邻样本有关。由于kNN方法主要靠周围有限的邻近的样本，而不是靠判别类域的方法来确定所属类别的，因此对于类域的交叉或重叠较多的待分样本集来说，kNN方法较其他方法更为适合。</p>
<p>简单说， 如果你住在高档小区，周围都是&quot;高端人口&quot;， 那么可以判定你就是&quot;高端人口&quot;, 然后就不会被......</p>
<p><code>k</code> 代表最近的<code>k</code>个邻居。</p>
<p>算法更详细的介绍可以参考:<a href="https://baike.baidu.com/item/邻近算法/1151153?fromtitle=Knn&amp;fromid=3479559" target="_blank" rel="external">百度百科</a>和<a href="https://zh.wikipedia.org/wiki/最近鄰居法" target="_blank" rel="external">维基百科</a>。</p>
<h2 id="训练数据和预测">训练数据和预测</h2>
<p>下面就让我们看看 golearn使用kNN算法分析鸢尾花数据集的例子。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/base"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/evaluation"</span></div><div class="line">	<span class="string">"github.com/sjwhitworth/golearn/knn"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	rawData, err := base.ParseCSVToInstances(<span class="string">"../datasets/iris_headers.csv"</span>, <span class="constant">true</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">//Initialises a new KNN classifier</span></div><div class="line">	cls := knn.NewKnnClassifier(<span class="string">"euclidean"</span>, <span class="string">"linear"</span>,<span class="number"> 2</span>)</div><div class="line"></div><div class="line">	<span class="comment">//Do a training-test split</span></div><div class="line">	trainData, testData := base.InstancesTrainTestSplit(rawData,<span class="number"> 0.50</span>)</div><div class="line">	cls.Fit(trainData)</div><div class="line"></div><div class="line">	<span class="comment">//Calculates the Euclidean distance and returns the most popular label</span></div><div class="line">	predictions, err := cls.Predict(testData)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line">	fmt.Println(predictions)</div><div class="line"></div><div class="line">	<span class="comment">// Prints precision/recall metrics</span></div><div class="line">	confusionMat, err := evaluation.GetConfusionMatrix(testData, predictions)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(fmt.Sprintf(<span class="string">"Unable to get confusion matrix: %s"</span>, err.Error()))</div><div class="line">	}</div><div class="line">	fmt.Println(evaluation.GetSummary(confusionMat))</div><div class="line">}</div></pre></td></tr></table></figure>

<p><strong>#12</strong> 行加载鸢尾花数据集， base提供了读取CSV文本文件的方法。</p>
<p><strong>#18</strong> 行创建一个kNN分类器， 距离的计算使用欧几里德方法，此外还支持<code>manhattan</code>、<code>cosine</code>距离计算方法。第二个参数支持<code>linear</code>和<code>kdtree</code>。</p>
<p><strong>#18</strong> 还指定了<code>K</code>为2。</p>
<p><strong>#21</strong> 将鸢尾花数据集按照参数分成两份，它使用随机数和这个参数比较，所以分成的数据的结果大致是这个比例。一部分用于训练数据，一部分用于测试。接着<strong>#22</strong>开始训练数据。</p>
<p><strong>#25</strong> 使用测试预测数据，并将预测结果打印出来。</p>
<p><strong>#32 ~ #36</strong> 是评估预测模型，并将评估结果输出。</p>
<h2 id="评估">评估</h2>
<p>首先看一下评估结果</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Reference Class	True Positives	False Positives	True Negatives	Precision	Recall	F1 Score</div><div class="line">---------------	--------------	---------------	--------------	---------	------	--------</div><div class="line">Iris-setosa<span class="number">	30</span>	<span class="number">	0</span>	<span class="number">	58</span>	<span class="number">	1.0000</span>	<span class="number">	1.0000</span><span class="number">	1.0000</span></div><div class="line">Iris-virginica<span class="number">	27</span>	<span class="number">	1</span>	<span class="number">	58</span>	<span class="number">	0.9643</span>	<span class="number">	0.9310</span><span class="number">	0.9474</span></div><div class="line">Iris-versicolor<span class="number">	28</span>	<span class="number">	2</span>	<span class="number">	57</span>	<span class="number">	0.9333</span>	<span class="number">	0.9655</span><span class="number">	0.9492</span></div></pre></td></tr></table></figure>

<p>这里有几个概念需要说明一下。</p>
<ul>
<li>ConfusionMatrix： 混淆矩阵，它描绘样本数据的真实属性与识别结果类型之间的关系，是评价分类器性能的一种常用方法，用于有监督学习。</li>
<li>True Positives: 真正，TP, 被模型预测为正的正样本；可以称作判断为真的正确率</li>
<li>False Positives: 假正，FP，误报， 被模型预测为正的负样本；可以称作误报率</li>
<li>True Negatives: 真负，TN, 被模型预测为负的负样本 ；可以称作判断为假的正确率</li>
<li>False Negatives: 假负，FN,漏报， 被模型预测为负的正样本；可以称作漏报率</li>
<li>Precision: 精确率, 正确预测正负的个数/总个数，它表示的是预测为正的样本中有多少是真正的正样本。 $$P = \frac{TP}{TP+FP}$$,</li>
<li>Recall: 召回率，它表示的是样本中的正例有多少被预测正确了， $$R = TPR = \frac{TP}{TP+FN}$$</li>
<li>F1 Score:  为了能够评价不同算法的优劣，在Precision和Recall的基础上提出了F1值的概念，来对Precision和Recall进行整体评价。F1的定义如下：<code>F1值  = 正确率 * 召回率 * 2 / (正确率 + 召回率)</code></li>
</ul>
<h2 id="Python代码实现">Python代码实现</h2>
<p>使用<code>sklearn</code>很容易实现上面的逻辑。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> neighbors, datasets, metrics</div><div class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split</div><div class="line"></div><div class="line"> </div><div class="line"><span class="comment"># import some data to play with</span></div><div class="line">IRIS = datasets.load_iris()</div><div class="line"> </div><div class="line"><span class="comment"># prepare data</span></div><div class="line">X_train, X_test, Y_train, Y_test = train_test_split(IRIS.data, IRIS.target, test_size=<span class="number">0.5</span>, random_state=<span class="number">0</span>)</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment"># we create an instance of Neighbours Classifier and fit the data.</span></div><div class="line">knn = neighbors.KNeighborsClassifier(n_neighbors=<span class="number">2</span>, weights=<span class="string">'distance'</span>)</div><div class="line">knn.fit(X_train, Y_train)</div><div class="line"></div><div class="line"><span class="comment"># make prediction</span></div><div class="line">predicted = knn.predict(X_test)</div><div class="line"> </div><div class="line"><span class="comment"># evaluate</span></div><div class="line">print(metrics.classification_report(Y_test, predicted))</div><div class="line">print(metrics.confusion_matrix(Y_test, predicted))</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>这个系列的文章是介绍如何使用Go语言来进行数据分析和机器学习。</p>
<p>Go机器学习的库目前还不是很多，功能海没有Python的丰富，希望在未来的几年里能有更多的功能丰富库面试。</p>
<p>这篇文章利用<a href="https://github.com/sjwhitworth/golearn" target="_blank" rel="external">golearn</a>库， 使用kNN方法来对Iris数据集进行分析。</p>
]]>
    
    </summary>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言中实现基于 event-loop 网络处理]]></title>
    <link href="http://colobu.com/2017/11/29/event-loop-networking-in-Go/"/>
    <id>http://colobu.com/2017/11/29/event-loop-networking-in-Go/</id>
    <published>2017-11-29T07:59:07.000Z</published>
    <updated>2017-12-09T15:22:06.126Z</updated>
    <content type="html"><![CDATA[<p>我们知道， Go语言为并发编程提供了简洁的编程方式， 你可以以&quot;同步&quot;的编程风格来并发执行代码， 比如使用<code>go</code>关键字新开一个goroutine。 对于网络编程，Go标准库和运行时内部采用 <code>epoll/kqueue/IoCompletionPort</code>来实现基于 <code>event-loop</code>的网络异步处理，但是通过<code>netpoll</code>的方式对外提供同步的访问。具体代码可以参考 <a href="https://golang.org/src/runtime/" target="_blank" rel="external">runtime/netpoll</a>、<a href="https://golang.org/src/net/" target="_blank" rel="external">net</a>和<a href="https://golang.org/src/internal/poll/" target="_blank" rel="external">internal/poll</a>。</p>
<blockquote>
<p>Package poll supports non-blocking I/O on file descriptors with polling.<br>This supports I/O operations that block only a goroutine, not a thread.<br>This is used by the net and os packages.<br>It uses a poller built into the runtime, with support from the<br>runtime scheduler.</p>
</blockquote>
<p>当然，我们平常不会设计到这些封装的细节，正常使用<code>net</code>包就很方便的开发网络程序了， 但是，如果我们想自己实现基于<code>epoll</code>的 <code>event-loop</code>网络程序呢？</p>
<a id="more"></a>
<h2 id="基于epoll的简单程序">基于epoll的简单程序</h2>
<p><code>man epoll</code>可以查看epoll的相关介绍。下面这个例子来自<a href="https://gist.github.com/tevino/3a4f4ec4ea9d0ca66d4f" target="_blank" rel="external">tevino</a>， 采用<code>edge-triggered</code>方式处理事件。</p>
<p>它采用 <code>syscall.Socket</code>、<code>syscall.SetNonblock</code>、<code>syscall.Bind</code>、<code>syscall.Listen</code>系统调用来监听端口，然后采用<code>syscall.EpollCreate1</code>、<code>syscall.EpollCtl</code>、<code>syscall.EpollWait</code>来关联这个监听的file descriptor， 一旦有新的连接的事件过来，使用<code>syscall.Accept</code>接收连接请求，并对这个连接file descriptor调用<code>syscall.EpollCtl</code>监听数据事件。一旦连接有数据ready, 调用<code>syscall.Read</code>读数据，调用<code>syscall.Write</code>写数据。</p>
<figure class="highlight go"><figcaption><span>来自https://gist.github.com/tevino/3a4f4ec4ea9d0ca66d4f</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"net"</span></div><div class="line">	<span class="string">"os"</span></div><div class="line">	<span class="string">"syscall"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">const</span> (</div><div class="line">	EPOLLET        =<span class="number"> 1</span> &lt;&lt;<span class="number"> 31</span></div><div class="line">	MaxEpollEvents =<span class="number"> 32</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> echo(fd <span class="typename">int</span>) {</div><div class="line">	<span class="keyword">defer</span> syscall.Close(fd)</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[32</span> *<span class="number"> 1024</span>]<span class="typename">byte</span></div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		nbytes, e := syscall.Read(fd, buf[:])</div><div class="line">		<span class="keyword">if</span> nbytes &gt;<span class="number"> 0</span> {</div><div class="line">			fmt.Printf(<span class="string">"&gt;&gt;&gt; %s"</span>, buf)</div><div class="line">			syscall.Write(fd, buf[:nbytes])</div><div class="line">			fmt.Printf(<span class="string">"&lt;&lt;&lt; %s"</span>, buf)</div><div class="line">		}</div><div class="line">		<span class="keyword">if</span> e != <span class="constant">nil</span> {</div><div class="line">			<span class="keyword">break</span></div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> event syscall.EpollEvent</div><div class="line">	<span class="keyword">var</span> events [MaxEpollEvents]syscall.EpollEvent</div><div class="line"></div><div class="line">	fd, err := syscall.Socket(syscall.AF_INET, syscall.O_NONBLOCK|syscall.SOCK_STREAM,<span class="number"> 0</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		fmt.Println(err)</div><div class="line">		os.Exit<span class="number">(1</span>)</div><div class="line">	}</div><div class="line">	<span class="keyword">defer</span> syscall.Close(fd)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> err = syscall.SetNonblock(fd, <span class="constant">true</span>); err != <span class="constant">nil</span> {</div><div class="line">		fmt.Println(<span class="string">"setnonblock1: "</span>, err)</div><div class="line">		os.Exit<span class="number">(1</span>)</div><div class="line">	}</div><div class="line"></div><div class="line">	addr := syscall.SockaddrInet4{Port:<span class="number"> 2000</span>}</div><div class="line">	<span class="built_in">copy</span>(addr.Addr[:], net.ParseIP(<span class="string">"0.0.0.0"</span>).To4())</div><div class="line"></div><div class="line">	syscall.Bind(fd, &addr)</div><div class="line">	syscall.Listen(fd,<span class="number"> 10</span>)</div><div class="line"></div><div class="line">	epfd, e := syscall.EpollCreate1<span class="number">(0</span>)</div><div class="line">	<span class="keyword">if</span> e != <span class="constant">nil</span> {</div><div class="line">		fmt.Println(<span class="string">"epoll_create1: "</span>, e)</div><div class="line">		os.Exit<span class="number">(1</span>)</div><div class="line">	}</div><div class="line">	<span class="keyword">defer</span> syscall.Close(epfd)</div><div class="line"></div><div class="line">	event.Events = syscall.EPOLLIN</div><div class="line">	event.Fd = <span class="typename">int32</span>(fd)</div><div class="line">	<span class="keyword">if</span> e = syscall.EpollCtl(epfd, syscall.EPOLL_CTL_ADD, fd, &event); e != <span class="constant">nil</span> {</div><div class="line">		fmt.Println(<span class="string">"epoll_ctl: "</span>, e)</div><div class="line">		os.Exit<span class="number">(1</span>)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		nevents, e := syscall.EpollWait(epfd, events[:],<span class="number"> -1</span>)</div><div class="line">		<span class="keyword">if</span> e != <span class="constant">nil</span> {</div><div class="line">			fmt.Println(<span class="string">"epoll_wait: "</span>, e)</div><div class="line">			<span class="keyword">break</span></div><div class="line">		}</div><div class="line"></div><div class="line">		<span class="keyword">for</span> ev :=<span class="number"> 0</span>; ev &lt; nevents; ev++ {</div><div class="line">			<span class="keyword">if</span> <span class="typename">int</span>(events[ev].Fd) == fd {</div><div class="line">				connFd, _, err := syscall.Accept(fd)</div><div class="line">				<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">					fmt.Println(<span class="string">"accept: "</span>, err)</div><div class="line">					<span class="keyword">continue</span></div><div class="line">				}</div><div class="line">				syscall.SetNonblock(fd, <span class="constant">true</span>)</div><div class="line">				event.Events = syscall.EPOLLIN | EPOLLET</div><div class="line">				event.Fd = <span class="typename">int32</span>(connFd)</div><div class="line">				<span class="keyword">if</span> err := syscall.EpollCtl(epfd, syscall.EPOLL_CTL_ADD, connFd, &event); err != <span class="constant">nil</span> {</div><div class="line">					fmt.Print(<span class="string">"epoll_ctl: "</span>, connFd, err)</div><div class="line">					os.Exit<span class="number">(1</span>)</div><div class="line">				}</div><div class="line">			} <span class="keyword">else</span> {</div><div class="line">				<span class="keyword">go</span> echo(<span class="typename">int</span>(events[ev].Fd))</div><div class="line">			}</div><div class="line">		}</div><div class="line"></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面的基于<code>epoll</code>只是一个简单的<code>event-loop</code>处理原型，而且在有些平台下(MAC OS)也不能执行，事件的处理也很粗糙，如果你想实现一个完整的<code>event-loop</code>的网络程序， 可以参考下节的库。</p>
<h2 id="evio">evio</h2>
<p><a href="https://github.com/tidwall/evio" target="_blank" rel="external">evio</a>是一个性能很高的event-loop网络库，代码简单，功能强大。它直接使用 <code>epoll</code>和<code>kqueue</code>系统调用，除了Go标准net库提供了另外一种思路， 类似<a href="https://github.com/libuv/libuv" target="_blank" rel="external">libuv</a>和<a href="https://github.com/libevent/libevent" target="_blank" rel="external">libevent</a>。</p>
<p>这个库实现redis和haproxy等同的包处理机制，但并不想完全替代标准的net包。对于一个需要长时间运行的请求(大于1毫秒)， 比如数据库访问、身份验证等，建议还是使用Go net/http库。</p>
<p>你可能知道， 由很多基于event-loop的程序， 比如Nginx、Haproxy、redis、memcached等，性能都非常不错，而且它们都是单线程运行的，非常快。</p>
<p>这个库还有一个好处， 你可以在一个event-loop中处理多个network binding。</p>
<p>一个简单的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"github.com/tidwall/evio"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> events evio.Events</div><div class="line">	events.Data = <span class="keyword">func</span>(id <span class="typename">int</span>, in []<span class="typename">byte</span>) (out []<span class="typename">byte</span>, action evio.Action) {</div><div class="line">		out = in</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> err := evio.Serve(events, <span class="string">"tcp://localhost:5000"</span>, <span class="string">"tcp://192.168.0.10:5001"</span>, <span class="string">"tcp://192.168.0.10:5002"</span>,<span class="string">"unix://socket"</span>); err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err.Error())</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>作者对性能做了对比，性能非常不错。</p>
<p><img src="echo.png" alt="简单的echo例子"><br><img src="http.png" alt="http对比"><br><img src="redis_pipeline_1.png" alt="pipeline 为1"><br><img src="redis_pipeline_8.png" alt="pipeline 为8"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>我们知道， Go语言为并发编程提供了简洁的编程方式， 你可以以&quot;同步&quot;的编程风格来并发执行代码， 比如使用<code>go</code>关键字新开一个goroutine。 对于网络编程，Go标准库和运行时内部采用 <code>epoll/kqueue/IoCompletionPort</code>来实现基于 <code>event-loop</code>的网络异步处理，但是通过<code>netpoll</code>的方式对外提供同步的访问。具体代码可以参考 <a href="https://golang.org/src/runtime/" target="_blank" rel="external">runtime/netpoll</a>、<a href="https://golang.org/src/net/" target="_blank" rel="external">net</a>和<a href="https://golang.org/src/internal/poll/" target="_blank" rel="external">internal/poll</a>。</p>
<blockquote>
<p>Package poll supports non-blocking I/O on file descriptors with polling.<br>This supports I/O operations that block only a goroutine, not a thread.<br>This is used by the net and os packages.<br>It uses a poller built into the runtime, with support from the<br>runtime scheduler.</p>
</blockquote>
<p>当然，我们平常不会设计到这些封装的细节，正常使用<code>net</code>包就很方便的开发网络程序了， 但是，如果我们想自己实现基于<code>epoll</code>的 <code>event-loop</code>网络程序呢？</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]Go TCP Socket的实现]]></title>
    <link href="http://colobu.com/2017/11/28/TCP-Socket-Implementation-On-Golang/"/>
    <id>http://colobu.com/2017/11/28/TCP-Socket-Implementation-On-Golang/</id>
    <published>2017-11-28T11:18:34.000Z</published>
    <updated>2017-12-09T15:22:06.110Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://medium.com/@ggiovani/tcp-socket-implementation-on-golang-c38b67c5d8b" target="_blank" rel="external">TCP Socket Implementation On Golang</a> by Gian Giovani.</p>
<blockquote>
<p><strong>译者注</strong>: 作者并没有从源代码级别去分析Go socket的实现，而是利用<code>strace</code>工具来反推Go Socket的行为。这一方法可以扩展我们分析代码的手段。<br>源代码级别的分析可以看其实现: <a href="https://golang.org/src/runtime/netpoll.go" target="_blank" rel="external">net poll</a>,以及一些分析文章:<a href="https://morsmachine.dk/netpoller" target="_blank" rel="external">The Go netpoller</a>, <a href="http://hustcat.github.io/go-netpoller-and-timeout/" target="_blank" rel="external">The Go netpoller and timeout</a></p>
</blockquote>
<p>Go语言是我写web程序的首选， 它隐藏了很多细节，但仍然不失灵活性。最新我用<a href="https://linux.die.net/man/1/strace" target="_blank" rel="external">strace</a>工具分析了一下一个http程序，纯属手贱但还是发现了一些有趣的事情。</p>
<p>下面是<code>strace</code>的结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%</span> <span class="comment">time</span>     <span class="comment">seconds</span>  <span class="comment">usecs/call</span>     <span class="comment">calls</span>    <span class="comment">errors</span> <span class="comment">syscall</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"> <span class="comment">91</span><span class="string">.</span><span class="comment">24</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">397615</span>         <span class="comment">336</span>      <span class="comment">1185</span>        <span class="comment">29</span> <span class="comment">futex</span></div><div class="line">  <span class="comment">4</span><span class="string">.</span><span class="comment">13</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">018009</span>           <span class="comment">3</span>      <span class="comment">7115</span>           <span class="comment">clock_gettime</span></div><div class="line">  <span class="comment">2</span><span class="string">.</span><span class="comment">92</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">012735</span>          <span class="comment">19</span>       <span class="comment">654</span>           <span class="comment">epoll_wait</span></div><div class="line">  <span class="comment">1</span><span class="string">.</span><span class="comment">31</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">005701</span>           <span class="comment">6</span>       <span class="comment">911</span>           <span class="comment">write</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">20</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000878</span>           <span class="comment">3</span>       <span class="comment">335</span>           <span class="comment">epoll_ctl</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">12</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000525</span>           <span class="comment">1</span>       <span class="comment">915</span>       <span class="comment">457</span> <span class="comment">read</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">02</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000106</span>           <span class="comment">2</span>        <span class="comment">59</span>           <span class="comment">select</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000059</span>           <span class="comment">0</span>       <span class="comment">170</span>           <span class="comment">close</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000053</span>           <span class="comment">0</span>       <span class="comment">791</span>           <span class="comment">setsockopt</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000035</span>           <span class="comment">0</span>       <span class="comment">158</span>           <span class="comment">getpeername</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000034</span>           <span class="comment">0</span>       <span class="comment">170</span>           <span class="comment">socket</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000029</span>           <span class="comment">0</span>       <span class="comment">160</span>           <span class="comment">getsockname</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000026</span>           <span class="comment">0</span>       <span class="comment">159</span>           <span class="comment">getsockopt</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>         <span class="comment">7</span>           <span class="comment">sched_yield</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>       <span class="comment">166</span>       <span class="comment">166</span> <span class="comment">connect</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>         <span class="comment">3</span>         <span class="comment">1</span> <span class="comment">accept4</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">100</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">435805</span>                 <span class="comment">12958</span>       <span class="comment">653</span> <span class="comment">total</span></div></pre></td></tr></table></figure>

<a id="more"></a>
<p>在这个剖析结果中有很多有趣的东东，但本文中要特别指出的是<code>read</code>的错误数和<code>futex</code>调用的错误数。</p>
<p>一开始我没有深思futex的调用， 大部分情况它无非是一个唤醒调用(wake call)。既然这个程序会处理每秒几百个请求，它应该包含很多go routine。另一方面，它使用了channel,这也会导致很多block情况，所以有很多futex调用也很正常。 不过后来我发现这个数也包含来自其它的逻辑，后面再表。</p>
<h2 id="Why_you_no_read">Why you no read</h2>
<p>有谁喜欢错误(error)？短短一分钟就有几百次的错误，太糟糕了， 这是我看到这个剖析结果后最初的印象。那么 <code>read call</code>又是什么东东？</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">read<span class="number">(36</span>, <span class="string">"GET /xxx/v3?q=xx%20ch&d"</span>...,<span class="number"> 4096</span>) =<span class="number"> 520</span></div><div class="line">...</div><div class="line">read<span class="number">(36</span>,<span class="number"> 0</span>xc422aa4291,<span class="number"> 1</span>)               =<span class="number"> -1</span> EAGAIN (Resource temporarily unavailable)</div></pre></td></tr></table></figure>

<p>每次read调用同一个文件描述符，总是(可能)伴随着一个 <code>EAGAIN</code> error。我记得这个错误，当文件描述符还没有准备(ready)某个操作的时候就会返回这个错，上面的例子中操作是<code>read</code>。问题是为什么Go会这样做呢？</p>
<p>我猜想这可能是<code>epoll_wait</code>的一个bug, 它为每一个文件描述符提供了错误的<code>ready</code>事件？每一个文件描述符？ 看起来read事件是错误事件的两倍，为什么是两倍？</p>
<p>老实说，我的<code>epoll</code>知识很了了，程序只是一个简单的处理事件的socket handler(<a href="https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/" target="_blank" rel="external">类似</a>)。没有多线程，没有同步，非常简单。</p>
<p>通过Google我找到了一篇极棒的<a href="https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/" target="_blank" rel="external">文章</a>分析评论<code>epoll</code>，由Marek所写，。</p>
<p>这篇文章重要的摘要就是：在多线程中使用<code>epoll</code>, 不必要的唤醒(wake up)通常是不可避免的，因为我们想通知每个等待事件的worker。</p>
<p>这也正好解释了我们的futex 唤醒数。还是让我们看一个简化版本来好好理解怎么在基于事件的socket处理程序中使用<code>epoll</code>吧：</p>
<ol>
<li>Bind <code>socket listener</code> 到 <code>file descriptor</code>, 我们称之为 <code>s_fd</code></li>
<li>使用<code>epoll_create</code>创建 <code>epoll file descriptor</code> , 我们称之为 <code>e_fd</code></li>
<li>通过<code>epol_ctl</code> bind <code>s_fd</code> 到 <code>e_fd</code>, 处理特殊的事件(通常<code>EPOLLIN|EPOLLOUT</code>)</li>
<li>创建一个无限循环 (event loop), 它会在每次循环中调用<code>epoll_wait</code>得到已经ready连接</li>
<li>处理ready的连接, 在多worker实现中会通知每一个worker</li>
</ol>
<p>Using strace I found that golang using edge triggered epoll<br>使用<code>strace</code>我发现 golang使用<a href="http://man7.org/linux/man-pages/man7/epoll.7.html" target="_blank" rel="external"> edge triggered epoll</a>:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">epoll_ctl(<span class="number">4</span>, EPOLL_CTL_ADD, <span class="number">3</span>, {EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, {<span class="keyword">u32</span>=<span class="number">2490298448</span>, <span class="keyword">u64</span>=<span class="number">140490870550608</span>}}) = <span class="number">0</span></div></pre></td></tr></table></figure>

<p>这意味着下面的过程应该是go socket的实现：</p>
<p>1、<strong>Kernel</strong>: 收到一个新连接.<br>2、<strong>Kernel</strong>: 通知等待的线程 threads A 和 B. 由于level-triggered 通知的&quot;惊群&quot;(“thundering herd”)行为，kernel必须唤醒这两个线程.<br>3、<strong>Thread A</strong>: 完成 epoll_wait().<br>4、<strong>Thread B</strong>: 完成 epoll_wait().<br>5、<strong>Thread A</strong>: 执行 accept(), 成功.<br>6、<strong>Thread B</strong>: 执行 accept(), 失败， EAGAIN错误.</p>
<p>现在我有八成把握就是这个case，不过还是让我们用一个简单的<a href="">程序</a>来分析。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"net/http"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	http.HandleFunc(<span class="string">"/"</span>, handler)</div><div class="line">	http.HandleFunc(<span class="string">"/test"</span>, handler)</div><div class="line">	http.ListenAndServe(<span class="string">":8080"</span>, <span class="constant">nil</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> handler(w http.ResponseWriter, r *http.Request) {</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>一个简单的请求后的<code>strace</code>结果:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">epoll_wait(<span class="number">4</span>, [{EPOLLIN|EPOLLOUT, {u32=<span class="number">2186919600</span>, u64=<span class="number">140542106779312</span>}}], <span class="number">128</span>, -<span class="number">1</span>) = <span class="number">1</span></div><div class="line">futex(<span class="number">0x7c1bd8</span>, FUTEX_WAKE, <span class="number">1</span>)          = <span class="number">1</span></div><div class="line">futex(<span class="number">0x7c1b10</span>, FUTEX_WAKE, <span class="number">1</span>)          = <span class="number">1</span></div><div class="line">read(<span class="number">5</span>, <span class="string">"GET / HTTP/1.1\r\nHost: localhost:"</span><span class="keyword">...</span>, <span class="number">4096</span>) = <span class="number">348</span></div><div class="line">futex(<span class="number">0xc420060110</span>, FUTEX_WAKE, <span class="number">1</span>)      = <span class="number">1</span></div><div class="line">write(<span class="number">5</span>, <span class="string">"HTTP/1.1 200 OK\r\nDate: Sat, 03 J"</span><span class="keyword">...</span>, <span class="number">116</span>) = <span class="number">116</span></div><div class="line">futex(<span class="number">0xc420060110</span>, FUTEX_WAKE, <span class="number">1</span>)      = <span class="number">1</span></div><div class="line">read(<span class="number">5</span>, <span class="number">0xc4200f6000</span>, <span class="number">4096</span>)             = -<span class="number">1</span> EAGAIN (Resource temporarily unavailable)</div></pre></td></tr></table></figure>

<p>看到<code>epoll_wait</code>有两个futex调用，我认为是worker执行以及一次 error read。</p>
<p>如果<code>GOMAXPROCS</code>设置为1,在单worker情况下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">epoll_wait(<span class="number">4</span>,[{EPOLLIN, {u32=<span class="number">1969377136</span>, u64=<span class="number">140245536493424</span>}}], <span class="number">128</span>, -<span class="number">1</span>) = <span class="number">1</span></div><div class="line">futex(<span class="number">0x7c1bd8</span>, FUTEX_WAKE, <span class="number">1</span>)          = <span class="number">1</span></div><div class="line">accept4(<span class="number">3</span>, {sa_family=AF_INET6, sin6_port=htons(<span class="number">54400</span>), inet_pton(AF_INET6, <span class="string">"::ffff:127.0.0.1"</span>, &sin6_addr), sin6_flowinfo=<span class="number">0</span>, sin6_scope_id=<span class="number">0</span>}, [<span class="number">28</span>], SOCK_CLOEXEC|SOCK_NONBLOCK) = <span class="number">6</span></div><div class="line">epoll_ctl(<span class="number">4</span>, EPOLL_CTL_ADD, <span class="number">6</span>, {EPOLLIN|EPOLLOUT|EPOLLRDHUP|EPOLLET, {u32=<span class="number">1969376752</span>, u64=<span class="number">140245536493040</span>}}) = <span class="number">0</span></div><div class="line">getsockname(<span class="number">6</span>, {sa_family=AF_INET6, sin6_port=htons(<span class="number">8080</span>), inet_pton(AF_INET6, <span class="string">"::ffff:127.0.0.1"</span>, &sin6_addr), sin6_flowinfo=<span class="number">0</span>, sin6_scope_id=<span class="number">0</span>}, [<span class="number">28</span>]) = <span class="number">0</span></div><div class="line">setsockopt(<span class="number">6</span>, SOL_TCP, TCP_NODELAY, [<span class="number">1</span>], <span class="number">4</span>) = <span class="number">0</span></div><div class="line">setsockopt(<span class="number">6</span>, SOL_SOCKET, SO_KEEPALIVE, [<span class="number">1</span>], <span class="number">4</span>) = <span class="number">0</span></div><div class="line">setsockopt(<span class="number">6</span>, SOL_TCP, TCP_KEEPINTVL, [<span class="number">180</span>], <span class="number">4</span>) = <span class="number">0</span></div><div class="line">setsockopt(<span class="number">6</span>, SOL_TCP, TCP_KEEPIDLE, [<span class="number">180</span>], <span class="number">4</span>) = <span class="number">0</span></div><div class="line">accept4(<span class="number">3</span>, <span class="number">0xc42004db78</span>, <span class="number">0xc42004db6c</span>, SOCK_CLOEXEC|SOCK_NONBLOCK) = -<span class="number">1</span> EAGAIN (Resource temporarily unavailable)</div><div class="line">read(<span class="number">6</span>, <span class="string">"GET /test?kjhkjhkjh HTTP/1.1\r\nHo"</span><span class="keyword">...</span>, <span class="number">4096</span>) = <span class="number">92</span></div><div class="line">write(<span class="number">6</span>, <span class="string">"HTTP/1.1 200 OK\r\nDate: Sat, 03 J"</span><span class="keyword">...</span>, <span class="number">139</span>) = <span class="number">139</span></div><div class="line">read(<span class="number">6</span>, <span class="string">""</span>, <span class="number">4096</span>)</div></pre></td></tr></table></figure>

<p>当使用1个worker，epoll_wait之后只有一次futex唤醒，并没有error read。然而我发现并不总是这样， 有时候我依然可以得到read error和两次futex 唤醒。</p>
<h2 id="And_then_what_to_do?">And then what to do?</h2>
<p>在Marek的文章中他谈到Linux 4.5之后可以使用<code>EPOLLEXCLUSIVE</code>。我的Linux版本是4.8，为什么问题还是出现？或许Go并没有使用这个标志，我希望将来的版本可以使用这个标志。</p>
<p>从中我学到了很多知识，希望你也是。</p>
<p>[0] <a href="https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/" target="_blank" rel="external">https://banu.com/blog/2/how-to-use-epoll-a-complete-example-in-c/</a><br>[1] <a href="https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/" target="_blank" rel="external">https://idea.popcount.org/2017-02-20-epoll-is-fundamentally-broken-12/</a><br>[2] <a href="https://gist.github.com/wejick/2cef1f8799361318a62a59f6801eade8" target="_blank" rel="external">https://gist.github.com/wejick/2cef1f8799361318a62a59f6801eade8</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://medium.com/@ggiovani/tcp-socket-implementation-on-golang-c38b67c5d8b" target="_blank" rel="external">TCP Socket Implementation On Golang</a> by Gian Giovani.</p>
<blockquote>
<p><strong>译者注</strong>: 作者并没有从源代码级别去分析Go socket的实现，而是利用<code>strace</code>工具来反推Go Socket的行为。这一方法可以扩展我们分析代码的手段。<br>源代码级别的分析可以看其实现: <a href="https://golang.org/src/runtime/netpoll.go" target="_blank" rel="external">net poll</a>,以及一些分析文章:<a href="https://morsmachine.dk/netpoller" target="_blank" rel="external">The Go netpoller</a>, <a href="http://hustcat.github.io/go-netpoller-and-timeout/" target="_blank" rel="external">The Go netpoller and timeout</a></p>
</blockquote>
<p>Go语言是我写web程序的首选， 它隐藏了很多细节，但仍然不失灵活性。最新我用<a href="https://linux.die.net/man/1/strace" target="_blank" rel="external">strace</a>工具分析了一下一个http程序，纯属手贱但还是发现了一些有趣的事情。</p>
<p>下面是<code>strace</code>的结果：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">%</span> <span class="comment">time</span>     <span class="comment">seconds</span>  <span class="comment">usecs/call</span>     <span class="comment">calls</span>    <span class="comment">errors</span> <span class="comment">syscall</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"> <span class="comment">91</span><span class="string">.</span><span class="comment">24</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">397615</span>         <span class="comment">336</span>      <span class="comment">1185</span>        <span class="comment">29</span> <span class="comment">futex</span></div><div class="line">  <span class="comment">4</span><span class="string">.</span><span class="comment">13</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">018009</span>           <span class="comment">3</span>      <span class="comment">7115</span>           <span class="comment">clock_gettime</span></div><div class="line">  <span class="comment">2</span><span class="string">.</span><span class="comment">92</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">012735</span>          <span class="comment">19</span>       <span class="comment">654</span>           <span class="comment">epoll_wait</span></div><div class="line">  <span class="comment">1</span><span class="string">.</span><span class="comment">31</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">005701</span>           <span class="comment">6</span>       <span class="comment">911</span>           <span class="comment">write</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">20</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000878</span>           <span class="comment">3</span>       <span class="comment">335</span>           <span class="comment">epoll_ctl</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">12</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000525</span>           <span class="comment">1</span>       <span class="comment">915</span>       <span class="comment">457</span> <span class="comment">read</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">02</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000106</span>           <span class="comment">2</span>        <span class="comment">59</span>           <span class="comment">select</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000059</span>           <span class="comment">0</span>       <span class="comment">170</span>           <span class="comment">close</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000053</span>           <span class="comment">0</span>       <span class="comment">791</span>           <span class="comment">setsockopt</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000035</span>           <span class="comment">0</span>       <span class="comment">158</span>           <span class="comment">getpeername</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000034</span>           <span class="comment">0</span>       <span class="comment">170</span>           <span class="comment">socket</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000029</span>           <span class="comment">0</span>       <span class="comment">160</span>           <span class="comment">getsockname</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">01</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000026</span>           <span class="comment">0</span>       <span class="comment">159</span>           <span class="comment">getsockopt</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>         <span class="comment">7</span>           <span class="comment">sched_yield</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>       <span class="comment">166</span>       <span class="comment">166</span> <span class="comment">connect</span></div><div class="line">  <span class="comment">0</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">000000</span>           <span class="comment">0</span>         <span class="comment">3</span>         <span class="comment">1</span> <span class="comment">accept4</span></div><div class="line"><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span></div><div class="line"><span class="comment">100</span><span class="string">.</span><span class="comment">00</span>    <span class="comment">0</span><span class="string">.</span><span class="comment">435805</span>                 <span class="comment">12958</span>       <span class="comment">653</span> <span class="comment">total</span></div></pre></td></tr></table></figure>

]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 1.10 的pprof的工具将直接支持火焰图]]></title>
    <link href="http://colobu.com/2017/11/22/new-pprof-UI/"/>
    <id>http://colobu.com/2017/11/22/new-pprof-UI/</id>
    <published>2017-11-22T06:10:07.000Z</published>
    <updated>2017-12-09T15:22:06.188Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/google/pprof" target="_blank" rel="external">google/pprof</a>是一个性能可视化和分析工具，由Google的工程师开发。虽然自称不是Google官方的工具，但是项目挂在google的team下，而且还在Google其它项目中得到应用，是非常好的一个性能剖析工具。</p>
<p><a href="https://github.com/golang/go/tree/master/src/cmd/pprof" target="_blank" rel="external">go tool pprof</a> <a href="https://github.com/golang/go/tree/master/src/cmd/vendor/github.com/google/pprof" target="_blank" rel="external">复制</a>了一份<code>google/pprof</code>的代码， 封装了一个golang的工具，用来分析Go pprof包产生的剖析数据,也就是最终数据的处理和分析还是通过<code>gogole/pprof</code>来实现的。</p>
<p>这样，你至少就用两种方式来分析Go程序的 <code>pprof</code>数据：</p>
<ol>
<li><code>go tool pprof</code> : Go封装的<code>pprof</code>的工具</li>
<li><code>pprof</code>: 原始的<code>pprof</code>工具</li>
</ol>
<a id="more"></a>
<p><code>pprof</code>读写一组<code>profile.proto</code>格式的数据，产生可视化的数据分析报告，数据是protocol buffer格式的数据，具体格式可以参考: <a href="https://github.com/google/pprof/blob/master/proto/profile.proto" target="_blank" rel="external">profile.proto</a>。因此，它可以分析可以任意产生这种格式的程序，不管程序是什么语言开发的。</p>
<p>它可以读取本地的剖析数据，或者通过http访问线上的实时的剖析数据，具体使用方法可以参考官方的<a href="https://github.com/google/pprof" target="_blank" rel="external">说明</a>。</p>
<p>今天8月份的时候，<code>pprof</code>发布了新的UI。 新的UI提供了顶部菜单(工具栏)， 可以提供各种不同的功能的切换，非常的方便。 同时，展示也提供了新的样式，更加的好看，SVG图中的展示也更加醒目。</p>
<p>现在, 另一个很重要的功能火焰图也被<a href="https://github.com/google/pprof/issues/166" target="_blank" rel="external">合并</a>到主分支，这样，我们不用再利用第三方的工具<a href="https://github.com/uber/go-torch" target="_blank" rel="external">go-torch</a>等来查看火焰图。 这也意味着， 明年二月份发布的Go 1.10中我们可以直接通过<code>go tool pprof</code>查看火焰图了。</p>
<p>如果你不想等待到明年二月份，你可以下载最新的<code>pprof</code>来查看。</p>
<p><code>go get -u github.com/google/pprof</code></p>
<p><img src="pprof.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/google/pprof" target="_blank" rel="external">google/pprof</a>是一个性能可视化和分析工具，由Google的工程师开发。虽然自称不是Google官方的工具，但是项目挂在google的team下，而且还在Google其它项目中得到应用，是非常好的一个性能剖析工具。</p>
<p><a href="https://github.com/golang/go/tree/master/src/cmd/pprof" target="_blank" rel="external">go tool pprof</a> <a href="https://github.com/golang/go/tree/master/src/cmd/vendor/github.com/google/pprof" target="_blank" rel="external">复制</a>了一份<code>google/pprof</code>的代码， 封装了一个golang的工具，用来分析Go pprof包产生的剖析数据,也就是最终数据的处理和分析还是通过<code>gogole/pprof</code>来实现的。</p>
<p>这样，你至少就用两种方式来分析Go程序的 <code>pprof</code>数据：</p>
<ol>
<li><code>go tool pprof</code> : Go封装的<code>pprof</code>的工具</li>
<li><code>pprof</code>: 原始的<code>pprof</code>工具</li>
</ol>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Kafka的复制机制]]></title>
    <link href="http://colobu.com/2017/11/02/kafka-replication/"/>
    <id>http://colobu.com/2017/11/02/kafka-replication/</id>
    <published>2017-11-02T10:15:34.000Z</published>
    <updated>2017-12-09T15:22:06.173Z</updated>
    <content type="html"><![CDATA[<p>最近在设计一个多分区多副本的消息系统，以前对kafka有一些了解，在阅读了阿里的RocketMQ、小米的Pegasus等分布式系统后，再仔细阅读的kafka的复制设计，整理出本篇文档，可以和其它系统做一个对比。</p>
<p>Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<ol>
<li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</li>
<li>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</li>
<li>支持通过Kafka服务器和消费机集群来分区消息。</li>
<li>支持流式处理。</li>
</ol>
<p>7年过去了， kafka已经成为一个羽翼丰满的发布订阅平台、消息存储、流处理的工具。财富500强企业中有三分之一的公司使用了kafka平台。也就是在昨天(2017年11月1日)，kafka发布了它的<code>1.0.0</code>版本。</p>
<p>本文主要参考了Jun Rao(饶军)的<a href="https://engineering.linkedin.com/kafka/intra-cluster-replication-apache-kafka" target="_blank" rel="external">Intra-cluster Replication in Apache Kafka</a>, Jun Rao毕业于清华大学，哥读到博士，后来在IBM、LinkedIn工作，在LinkedIn期间任Kafka组的技术leader。2014年Kafka一帮人成立了Confluent公司，推广Kafka的商业应用，Jun Rao是共同创始人。</p>
<a id="more"></a>
<p>复制提供了高可用， 即使有些节点出现了失败：</p>
<ol>
<li>Producer可以继续发布消息</li>
<li>Consumer可以继续接收消息</li>
</ol>
<p>有两种方案可以保证强一致的数据复制: primary-backup replication 和 quorum-based replication。两种方案都要求选举出一个leader，其它的副本作为follower。所有的写都发给leader, 然后leader将消息发给follower。</p>
<p>基于quorum的复制可以采用raft、paxos等算法， 比如Zookeeper、 Google Spanner、etcd等。在有 2n + 1个节点的情况下，最多可以容忍n个节点失败。</p>
<p>基于primary-backup的复制等primary和backup都写入成功才算消息接收成功， 在有n个节点的情况下，最多可以容忍n-1节点失败，比如微软的<a href="https://www.microsoft.com/en-us/research/publication/pacifica-replication-in-log-based-distributed-storage-systems/" target="_blank" rel="external">PacifiaA</a>。</p>
<p>这两种方式各有优缺点。<br>1、基于quorum的方式延迟(latency)可能会好于primary-backup,因为基于quorum的方式只需要部分节点写入成功就可以返回。<br>2、在同样多的节点下基于primary-backup的复制可以容忍更多的节点失败，只要有一个节点活着就可以工作。<br>3、primary-backup在两个节点的情况下就可以提供容错，而基于quorum的方式至少需要三个节点。</p>
<p>Kafka采用了第二种方式，也就是主从模式， 主要是基于容错的考虑，并且在两个节点的情况下也可以提供高可用。</p>
<p>万一一个节点慢了怎么办？首先这种情况是很少发生的，万一发生了可以设置timeout参数处理这种情况。</p>
<p><img src="kafka_replication_diagram.png" alt=""></p>
<p>kafka的复制是针对分区的。比如上图中有四个broker,一个topic,2个分区，复制因子是3。当producer发送一个消息的时候，它会选择一个分区，比如<code>topic1-part1</code>分区，将消息发送给这个分区的leader， broker2、broker3会拉取这个消息，一旦消息被拉取过来，slave会发送ack给master，这时候master才commit这个log。</p>
<p>这个过程中producer有两个选择：一是等所有的副本都拉取成功producer菜收到写入成功的response,二是等leader写入成功就得到成功的response。第一个中可以确保在异常情况下不丢消息，但是latency就下来了。后一种latency提高很多，但是一旦有异常情况，slave还没有来得及拉取到最新的消息leader就挂了，这种情况下就有可能丢消息了。</p>
<p><img src="kafka-architecture-topics-replication-to-partition-0" alt=""></p>
<p><img src="kafka-architecture-topics-replication-to-partition-1" alt=""></p>
<p>一个Broker既可能是一个分区的leader,也可能是另一个分区的slave，如上图所示。</p>
<p>kafka实际是保证在<strong>足够多</strong>的slave写入成功的情况下就认为消息写入成功，而不是全部写入成功。这是因为有可能一些节点网络不好，或者机器有问题hang住了，如果leader一直等着，那么所有后续的消息都堆积起来了， 所以kafka认为只要足够多的副本写入就可以饿。那么，怎么才认为是<strong>足够多</strong>呢？</p>
<p>Kafka引入了 <strong>ISR</strong>的概念。ISR是<code>in-sync replicas</code>的简写。ISR的副本保持和leader的同步，当然leader本身也在ISR中。初始状态所有的副本都处于ISR中，当一个消息发送给leader的时候，leader会等待ISR中所有的副本告诉它已经接收了这个消息，如果一个副本失败了，那么它会被移除ISR。下一条消息来的时候，leader就会将消息发送给当前的ISR中节点了。</p>
<p>同时，leader还维护这HW(high watermark),这是一个分区的最后一条消息的offset。HW会持续的将HW发送给slave，broker可以将它写入到磁盘中以便将来恢复。</p>
<p>当一个失败的副本重启的时候，它首先恢复磁盘中记录的HW，然后将它的消息truncate到HW这个offset。这是因为HW之后的消息不保证已经commit。这时它变成了一个slave， 从HW开始从Leader中同步数据，一旦追上leader，它就可以再加入到ISR中。</p>
<p>kafka使用Zookeeper实现leader选举。如果leader失败，controller会从ISR选出一个新的leader。leader 选举的时候可能会有数据丢失，但是committed的消息保证不会丢失。</p>
<h3 id="Leader_failure">Leader failure</h3>
<p>There are 3 cases of leader failure which should be considered -</p>
<ol>
<li>The leader crashes before writing the messages to its local log. In this case, the client will timeout and resend the message to the new leader.</li>
<li>The leader crashes after writing the messages to its local log, but before sending the response back to the client<br>Atomicity has to be guaranteed: Either all the replicas wrote the messages or none of them<br>The client will retry sending the message. In this scenario, the system should ideally ensure that the messages are not written twice. Maybe, one of the replicas had written the message to its local log, committed it, and it gets elected as the new leader.</li>
<li>The leader crashes after sending the response. In this case, a new leader will be elected and start receiving requests.</li>
</ol>
<p>When this happens, we need to perform the following steps to elect a new leader.</p>
<p>1.Each surviving replica in ISR registers itself in Zookeeper.</p>
<ol>
<li>The replica that registers first becomes the new leader. The new leader chooses its LEO as the new HW.</li>
<li>Each replica registers a listener in Zookeeper so that it will be informed of any leader change. Everytime a replica is notified about a new leader:<br>If the replica is not the new leader (it must be a follower), it truncates its log to its HW and then starts to catch up from the new leader.</li>
<li>The leader waits until all surviving replicas in ISR have caught up or a configured time has passed. The leader writes the current ISR to Zookeeper and opens itself up for both reads and writes.<br>(Note, during the initial startup when ISR is empty, any replica can become the leader.)</li>
</ol>
<h3 id="参考文档">参考文档</h3>
<ol>
<li><a href="https://www.confluent.io/blog/apache-kafka-goes-1-0/" target="_blank" rel="external">https://www.confluent.io/blog/apache-kafka-goes-1-0/</a></li>
<li><a href="https://engineering.linkedin.com/kafka/intra-cluster-replication-apache-kafka" target="_blank" rel="external">https://engineering.linkedin.com/kafka/intra-cluster-replication-apache-kafka</a></li>
<li><a href="https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Replication" target="_blank" rel="external">https://cwiki.apache.org/confluence/display/KAFKA/Kafka+Replication</a></li>
<li><a href="https://www.youtube.com/watch?v=XcvHmqmh16g" target="_blank" rel="external">Intra-cluster Replication in Apache Kafka</a></li>
<li><a href="https://www.youtube.com/watch?v=kDx8hZhvCQ0" target="_blank" rel="external">Kafka Tutorial - Fault Tolerance</a></li>
<li><a href="https://dzone.com/articles/kafka-topic-architecture-replication-failover-and" target="_blank" rel="external">https://dzone.com/articles/kafka-topic-architecture-replication-failover-and</a></li>
<li><a href="http://meuslivros.github.io/kafka/ch04s04.html" target="_blank" rel="external">http://meuslivros.github.io/kafka/ch04s04.html</a></li>
<li><a href="https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/" target="_blank" rel="external">https://www.confluent.io/blog/hands-free-kafka-replication-a-lesson-in-operational-simplicity/</a></li>
<li><a href="https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines" target="_blank" rel="external">https://engineering.linkedin.com/kafka/benchmarking-apache-kafka-2-million-writes-second-three-cheap-machines</a></li>
<li><a href="https://www.confluent.io/product/multi-datacenter/" target="_blank" rel="external">https://www.confluent.io/product/multi-datacenter/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近在设计一个多分区多副本的消息系统，以前对kafka有一些了解，在阅读了阿里的RocketMQ、小米的Pegasus等分布式系统后，再仔细阅读的kafka的复制设计，整理出本篇文档，可以和其它系统做一个对比。</p>
<p>Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<ol>
<li>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</li>
<li>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</li>
<li>支持通过Kafka服务器和消费机集群来分区消息。</li>
<li>支持流式处理。</li>
</ol>
<p>7年过去了， kafka已经成为一个羽翼丰满的发布订阅平台、消息存储、流处理的工具。财富500强企业中有三分之一的公司使用了kafka平台。也就是在昨天(2017年11月1日)，kafka发布了它的<code>1.0.0</code>版本。</p>
<p>本文主要参考了Jun Rao(饶军)的<a href="https://engineering.linkedin.com/kafka/intra-cluster-replication-apache-kafka" target="_blank" rel="external">Intra-cluster Replication in Apache Kafka</a>, Jun Rao毕业于清华大学，哥读到博士，后来在IBM、LinkedIn工作，在LinkedIn期间任Kafka组的技术leader。2014年Kafka一帮人成立了Confluent公司，推广Kafka的商业应用，Jun Rao是共同创始人。</p>
]]>
    
    </summary>
    
      <category term="kafka" scheme="http://colobu.com/tags/kafka/"/>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何整个替换git master分支?]]></title>
    <link href="http://colobu.com/2017/10/24/How-to-replace-master-branch-in-git/"/>
    <id>http://colobu.com/2017/10/24/How-to-replace-master-branch-in-git/</id>
    <published>2017-10-24T06:18:24.000Z</published>
    <updated>2017-10-26T15:14:07.371Z</updated>
    <content type="html"><![CDATA[<p>最近需要将一个项目的master分支用另一个分支完全替换， 查找了相关资料，最后追溯到stackoverflow上的一个提问: <a href="https://stackoverflow.com/questions/2862590/how-to-replace-master-branch-in-git-entirely-from-another-branch" target="_blank" rel="external">How to replace master branch in git, entirely, from another branch？</a>。</p>
<p>网友给出了两种方案。</p>
<p>假设需要将<code>seotweaks</code>分支替换成<code>master</code>。</p>
<p><strong>1、</strong></p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git checkout seotweaks</div><div class="line">git merge <span class="operator">-s</span> ours master</div><div class="line">git checkout master</div><div class="line">git merge seotweaks</div></pre></td></tr></table></figure>

<p><code>-s ours</code>是<code>--strategy=ours</code>的简写。</p>
<p><strong>2、</strong><br>如果上面的操作有问题， 还可以使用下面这个方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git branch -m master old-master</div><div class="line">git branch -m seotweaks master</div><div class="line">git push -f origin master</div></pre></td></tr></table></figure>

<p><code>-m</code>用来重命名分支。</p>
<p><strong>This might remove commits in origin master</strong>。</p>
<p><a href="https://git-scm.com/docs" target="_blank" rel="external">git cmd</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近需要将一个项目的master分支用另一个分支完全替换， 查找了相关资料，最后追溯到stackoverflow上的一个提问: <a href="https://stackoverflow.com/questions/2862590/how-to-replace-maste]]>
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译] Kafka 存储的工作机制]]></title>
    <link href="http://colobu.com/2017/10/12/How-Kafka%E2%80%99s-Storage-Internals-Work/"/>
    <id>http://colobu.com/2017/10/12/How-Kafka’s-Storage-Internals-Work/</id>
    <published>2017-10-12T07:35:15.000Z</published>
    <updated>2017-10-26T15:14:07.264Z</updated>
    <content type="html"><![CDATA[<p>翻译自 Kafka/Confluent 公司的工程师 Travis Jeffery 的文章: <a href="https://thehoard.blog/how-Kafkas-storage-internals-work-3a29b02e026" target="_blank" rel="external">How Kafka’s Storage Internals Work</a>。</p>
<p>通过本文我会帮助你理解Kafka是如何存储它的数据的。<br>对于调优Kafka的性能以及了解broker配置实际是干什么的， 了解Kafka的存储很有用。 我受Kafka的简单性的启发， 用我所学开始实现一个Go的Kafka: <a href="https://github.com/travisjeffery/jocko" target="_blank" rel="external">jocko</a>。</p>
<p>那么， Kafka存储内部是如何工作的呢？<br><a id="more"></a></p>
<h2 id="Kafka_的存储单元是分区">Kafka 的存储单元是分区</h2>
<p>分区(partition)是有序的， 新的不可变的消息增加到尾部。一个分区不能扩多个boker，甚至不能跨多个磁盘。</p>
<p><img src="1.png" alt=""></p>
<h2 id="保留策略管理kakfa如何保留消息">保留策略管理kakfa如何保留消息</h2>
<p>你可以指定保留多少数据和多久的数据(大小和时间策略)， 之后kakfa会按照顺序清理数据， 不管数据是否已经倍消费。</p>
<h2 id="分区被分割成多个分段">分区被分割成多个分段</h2>
<p>所以Kafka会定期地查找磁盘中需要清理的消息。如果一个分区单一的文件比较打， 操作会很慢，而且容易出错。为了解决这个问题(和其它问题)， 分区文件被分割成几个分段(segment)。</p>
<p>当Kafka往分区中写数据时， 它实际是往分段文件中写的。如果这个分段文件达到文件大小的限制，一个新的分段文件会被创建，以后往这个分区上写的数据会写入到这个新的分段文件中。</p>
<p>分段文件使用它们的基偏移量(<code>base offset</code>)作为文件名。 一个分段文件的基偏移量 要大于前一个分段中的偏移量， 小于或者等于本分段文件中的偏移量。</p>
<p><img src="2.png" alt=""></p>
<p>在磁盘中， 每个分区一个文件夹， 包含分段文件， 分段文件由索引文件和log文件两个文件组成。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ tree Kafka | head -<span class="keyword">n</span> <span class="number">6</span></div><div class="line">Kafka</div><div class="line">├── events-<span class="number">1</span></div><div class="line">│ ├── <span class="number">00000000003064504069</span>.<span class="built_in">index</span></div><div class="line">│ ├── <span class="number">00000000003064504069</span>.<span class="built_in">log</span></div><div class="line">│ ├── <span class="number">00000000003065011416</span>.<span class="built_in">index</span></div><div class="line">│ ├── <span class="number">00000000003065011416</span>.<span class="built_in">log</span></div></pre></td></tr></table></figure>

<h2 id="分段日志文件存储消息">分段日志文件存储消息</h2>
<p>每个消息包含它的值，偏移量，时间戳，key,消息大小、编解码器器、checksum 以及消息的版本。</p>
<p>磁盘上的数据格式和broker从producer接收到网络消息时一样的， 也和发送给consumer的消息格式一样。这种设计的好处时可以使用<a href="https://www.ibm.com/developerworks/library/j-zerocopy/" target="_blank" rel="external">零拷贝</a>进行数据传输。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ bin/Kafka-<span class="command">run</span>-<span class="type">class</span>.sh Kafka.tools.DumpLogSegments <span class="comment">--deep-iteration --print-data-log --files /data/Kafka/events-1/00000000003065011416.log | head -n 4</span></div><div class="line">Dumping /data/Kafka/appusers-<span class="number">1</span>/<span class="number">00000000003065011416.</span><span class="command">log</span></div><div class="line">Starting <span class="command">offset</span>: <span class="number">3065011416</span></div><div class="line"><span class="command">offset</span>: <span class="number">3065011416</span> position: <span class="number">0</span> isvalid: <span class="constant">true</span> payloadsize: <span class="number">2820</span> magic: <span class="number">1</span> compresscodec: NoCompressionCodec crc: <span class="number">811055132</span> payload: {<span class="string">"name"</span>: <span class="string">"Travis"</span>, msg: <span class="string">"Hey, what's up?"</span>}</div><div class="line"><span class="command">offset</span>: <span class="number">3065011417</span> position: <span class="number">1779</span> isvalid: <span class="constant">true</span> payloadsize: <span class="number">2244</span> magic: <span class="number">1</span> compresscodec: NoCompressionCodec crc: <span class="number">151590202</span> payload: {<span class="string">"name"</span>: <span class="string">"Wale"</span>, msg: <span class="string">"Starving."</span>}</div></pre></td></tr></table></figure>

<h2 id="分段索引文件记录消息在日志文件中的位置(偏移量)">分段索引文件记录消息在日志文件中的位置(偏移量)</h2>
<p>分段索引文件记录消息在日志文件中的位置(偏移量)。</p>
<p><img src="3.png" alt=""></p>
<p>索引文件映射到内存中。偏移量的查找使用二分查找， 找到最接近偏移量的位置(小于或者等于目标偏移量)。</p>
<p>索引文件是由8字节的entry组成。4个字节存储相相对偏移量， 4个字节存储位置。相对偏移量加上基偏移量才是实际偏移量，这样只用4个字节久可以了。 例如，假设基偏移量是<code>10000000000000000000</code>，之后的偏移量<code>10000000000000000001</code>、<code>10000000000000000002</code>只需用<code>1</code>、<code>2</code>来表示即可。</p>
<h2 id="Kafka保持压缩的消息">Kafka保持压缩的消息</h2>
<p>Producer发送的一批消息会呗压缩在一起，作为一个消息的payload发送给broker。和前面的介绍一样，数据保持原样压缩存在磁盘上。</p>
<p><img src="4.png" alt=""></p>
<h2 id="回顾">回顾</h2>
<p>Now you know how Kafka storage internals work:</p>
<p>现在， 你应该了解了Kafka是如何存储日志(消息)的：</p>
<ul>
<li>分区时存储的基本单元</li>
<li>分区文件被分割成分段文件</li>
<li>分段文件包含两个文件：索引文件和日志</li>
<li>索引文件记录消息在日志文件中的位置，用来快速查询消息</li>
<li>索引文件中存在的是相对偏移值</li>
<li>压缩的批量消息保持不变存储</li>
<li>磁盘上的文件和收发的消息时一样的</li>
</ul>
<h2 id="实现Go语言的kafak">实现Go语言的kafak</h2>
<p>我正在用Go实现Kafka。 目前我已经实现了在单个broker上读写分段，正在实现分布式。欢迎贡献。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>翻译自 Kafka/Confluent 公司的工程师 Travis Jeffery 的文章: <a href="https://thehoard.blog/how-Kafkas-storage-internals-work-3a29b02e026" target="_blank" rel="external">How Kafka’s Storage Internals Work</a>。</p>
<p>通过本文我会帮助你理解Kafka是如何存储它的数据的。<br>对于调优Kafka的性能以及了解broker配置实际是干什么的， 了解Kafka的存储很有用。 我受Kafka的简单性的启发， 用我所学开始实现一个Go的Kafka: <a href="https://github.com/travisjeffery/jocko" target="_blank" rel="external">jocko</a>。</p>
<p>那么， Kafka存储内部是如何工作的呢？<br>]]>
    
    </summary>
    
      <category term="Kafka" scheme="http://colobu.com/tags/Kafka/"/>
    
      <category term="大数据" scheme="http://colobu.com/categories/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[GOMAXPROCS需要设置吗？]]></title>
    <link href="http://colobu.com/2017/10/11/interesting-things-about-GOMAXPROCS/"/>
    <id>http://colobu.com/2017/10/11/interesting-things-about-GOMAXPROCS/</id>
    <published>2017-10-11T06:27:38.000Z</published>
    <updated>2017-10-26T15:14:07.564Z</updated>
    <content type="html"><![CDATA[<p>自 Go 1.5开始， Go的<code>GOMAXPROCS</code>默认值已经设置为 CPU的核数， 这允许我们的Go程序充分使用机器的每一个CPU,最大程度的提高我们程序的并发性能， 而且，在大部分情况下， 我们并不会去设置这个参数。因为默认值已经足够好了， 以至于fasthttp的作者valyala<a href="https://github.com/golang/go/issues/20303" target="_blank" rel="external">提议</a>禁止<code>runtime.GOMAXPROCS</code>设置这个数值, 对于所有的case, <code>GOMAXPROCS</code>默认值是否是最好的值呢？</p>
<p><a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">badger</a>的作者Manish Rai Jain就遇到了这样一个<a href="https://groups.google.com/forum/#!topic/golang-nuts/jPb_h3TvlKE/discussion" target="_blank" rel="external">问题</a>。</p>
<a id="more"></a>
<p>Manish Rai Jain 写了一段<a href="https://github.com/dgraph-io/badger-bench/blob/master/randread/main.go" target="_blank" rel="external">Go代码</a>, 用来测试Go的读写SSD的性能，看看是否能打到Linux的I/O测试工具<a href="https://linux.die.net/man/1/fio" target="_blank" rel="external">fio</a>的读写性能。 使用fio，可以在 AWS(Amazon i3.large instance with NVMe SSD)达到100K IOPS， 但是使用这个Go程序，怎么也无法接近这个IOPS。</p>
<p>他尝试了三个case:</p>
<ol>
<li>单个goroutine随机读</li>
<li>使用一定数量的goroutine随机读</li>
<li>类似#2,但是使用一个channel</li>
</ol>
<p>明显#1, #3比不上#2的性能，但是#2怎么也达不到fio的吞吐率。如果大家都使用小于CPU的核数, Go和Fio的吞吐率接近，但是如果把goroutine设置为大于CPU的核数，Fio性能提升明显，直到达到最大的IOPS，但是Go程序却没有显著变化。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ fio --name=randread --ioengine=psync --iodepth=<span class="number">32</span> --rw=randread --bs=<span class="number">4</span>k --direct=<span class="number">0</span> --size=<span class="number">2</span>G --numjobs=<span class="number">16</span> --runtime=<span class="number">120</span> --group_reporting</div><div class="line">Gives around <span class="number">62</span>K, tested via sar <span class="operator">-d</span> <span class="number">1</span> -p, <span class="keyword">while</span></div><div class="line"></div><div class="line">$ go build . && GOMAXPROCS=<span class="number">16</span> ./randread --dir ~/diskfio --jobs <span class="number">16</span> --num <span class="number">2000000</span> --mode <span class="number">1</span></div><div class="line">Gives around <span class="number">44</span>K, via sar. Number of cores on my machine are <span class="number">4</span>.</div></pre></td></tr></table></figure>

<p>通过将<code>GOMAXPROCS</code>设置更大的数(64/128, 数倍CPU核数), Go 程序可以取得几乎和Fio一样的吞吐率。</p>
<p>在今年的Gophercon上，Manish Rai Jain碰到了Russ Cox，问到了这个问题：</p>
<blockquote>
<p>If File::Read blocks goroutines, which then spawn new OS threads, in a long running job, there should be plenty of OS threads created already, so the random read throughput should increase over time and stabilize to the maximum possible value. But, that&#39;s not what I see in my benchmarks.</p>
</blockquote>
<p>大意是如果文件读取倍 block， Go会产生新的OS Thread,因为有很多的OS Thread,所以随机读的吞吐率应该也会上升才对，但是实际却不是。</p>
<p>Russ Cox解释说<code>GOMAXPROCS</code>就像一个多路复用器，所以<code>GOMAXPROCS</code>就会是一个瓶颈。</p>
<blockquote>
<p>The GOMAXPROCS in a way acts like a multiplexer. From docs, &quot;the GOMAXPROCS variable limits the number of operating system threads that can execute user-level Go code simultaneously.&quot; Which basically means, all reads must first be run only via GOMAXPROCS number of goroutines, before switching over to some OS thread (not really a switch, but conceptually speaking). This introduces a bottleneck for throughput.</p>
</blockquote>
<p>最后Manish Rai Jain在他的高性能的K/V数据库调大了这个<a href="https://github.com/dgraph-io/dgraph/commit/30237a1429debab73eff38fea2f724914ca38b77" target="_blank" rel="external">参数</a>。</p>
<p>这是一个有趣的讨论，很明显默认的<code>GOMAXPROCS</code>在某些情况下也不是最好的值，特别是在Manish Rai Jain这种写block的情况下，设置<code>GOMAXPROCS</code>更大一些会提高I/O的吞吐率。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>自 Go 1.5开始， Go的<code>GOMAXPROCS</code>默认值已经设置为 CPU的核数， 这允许我们的Go程序充分使用机器的每一个CPU,最大程度的提高我们程序的并发性能， 而且，在大部分情况下， 我们并不会去设置这个参数。因为默认值已经足够好了， 以至于fasthttp的作者valyala<a href="https://github.com/golang/go/issues/20303" target="_blank" rel="external">提议</a>禁止<code>runtime.GOMAXPROCS</code>设置这个数值, 对于所有的case, <code>GOMAXPROCS</code>默认值是否是最好的值呢？</p>
<p><a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">badger</a>的作者Manish Rai Jain就遇到了这样一个<a href="https://groups.google.com/forum/#!topic/golang-nuts/jPb_h3TvlKE/discussion" target="_blank" rel="external">问题</a>。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[badger 一个高性能的LSM K/V store]]></title>
    <link href="http://colobu.com/2017/10/11/badger-a-performant-k-v-store/"/>
    <id>http://colobu.com/2017/10/11/badger-a-performant-k-v-store/</id>
    <published>2017-10-11T01:21:54.000Z</published>
    <updated>2017-10-26T15:14:07.387Z</updated>
    <content type="html"><![CDATA[<p>大家好，给大家介绍一下， 新晋的高性能的 K/V数据库: <a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">badger</a>。</p>
<p>这是 <a href="https://dgraph.io" target="_blank" rel="external">dgraph.io</a>开发的一款基于 log structured merge (LSM) tree 的 key-value 本地数据库， 使用 Go 开发。</p>
<p>事实上，市面上已经有一些知名的基于LSM tree的k/v数据库， 比如 <a href="https://github.com/google/leveldb" target="_blank" rel="external">leveldb</a>、<a href="https://github.com/syndtr/goleveldb" target="_blank" rel="external">goleveldb</a>、<a href="http://rocksdb.org" target="_blank" rel="external">rocksdb</a>、<a href="https://github.com/boltdb/bolt" target="_blank" rel="external">boltdb</a>, 可是为什么还要创造新的轮子呢。我们不妨从LSM说起。</p>
<a id="more"></a>
<h2 id="LSM_Tree">LSM Tree</h2>
<p><img src="LSM.png" alt=""></p>
<p><a href="https://en.wikipedia.org/wiki/Log-structured_merge-tree" target="_blank" rel="external">Log-structured merge-tree</a> (简称 LSM tree) 可以追溯到1996年 Patrick O&#39;Neil等人的<a href="http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.44.2782&amp;rep=rep1&amp;type=pdf" target="_blank" rel="external">论文</a>。最简单的LSM tree是两层树状结构C0,C1。 C0比较小，驻留在内存，当C0超过一定的大小， 一些连续的片段会从C0移动到磁盘中的C1中，这是一次merge的过程。在实际的应用中， 一般会分为更多的层级(level)， 而层级C0都会驻留在内存中。<br><img src="LSM_Tree.png" alt=""></p>
<p>2006年， Google发表了它的那篇著名的文章: <a href="https://www.google.com.sg/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjb2euMvufWAhVGNo8KHTd5CskQFggnMAA&amp;url=https%3A%2F%2Fresearch.google.com%2Farchive%2Fbigtable-osdi06.pdf&amp;usg=AOvVaw16gNeVUuapPgFX2eTD2tUI" target="_blank" rel="external">Bigtable: A Distributed Storage System for Structured Data</a>, 不但催生了 HBase这样的项目的诞生， 而且广泛地引起了大家对 LSM tree这种数据结构重视。</p>
<p><img src="bigtable.png" alt=""></p>
<p>之后， 2007 HBase, 2010年 Cassandra， 2011年 LevelDB, 2013年 RocksDB, 2015年 InfluxDB的 LSM tree引擎等众多的 基于LSM tree的k/v数据库(引擎)诞生。</p>
<p><a href="https://github.com/google/leveldb" target="_blank" rel="external">LevelDB</a> 也是由Google的牛人 Jeffrey Dean 和 Sanjay Ghemawat创建的，被多个NoSql数据库用作底层的存储引擎。 <a href="https://github.com/facebook/rocksdb" target="_blank" rel="external">RocksDB</a> fork自LevelDB，但为多核和SSD做了很多的优化， 增加了一些有用的特性，比如Bloom filters、事务、TTL等，被Facebook、Yahoo!和Linkedin等公司使用。</p>
<h2 id="badger">badger</h2>
<p>回到开始的问题， 既然已经有了一些优秀的开源的LSM tree的项目，为什么dgraph还要创建一个新的轮子呢？</p>
<p>答案是: <strong>更好的性能</strong>。</p>
<p>dgraph开发一个新的基于LSM tree的数据库引擎badger是基于这篇论文： <a href="https://www.usenix.org/system/files/conference/fast16/fast16-papers-lu.pdf" target="_blank" rel="external">WiscKey: Separating Keys from Values<br>in SSD-conscious Storage</a>, 这篇论文很新， 也就是去年(2016年)发表的，这篇论文提出了一种新的设计，专门为SSD所优化，将key和value分别存储以减少I/O放大。论文是由斯康辛大学麦迪逊分校的Lanyue Lu等人完成，Lanyue Lu毕业于中国科大，现在就职于Google。论文中提供了一个测试数据，加载数据库要比LevelDB快2.5–111倍，随机lookup要快1.6-14倍。</p>
<p>dgraph实现的这个产品叫做 <a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">Badger</a>, 对于随机读，Badger至少要比RocksDB快3.5倍，对于值的大小从128B到16KB，数据加载Badger比LevelDB快0.86 - 14倍。</p>
<p>Badger分离的key和value,只有key存在LSM tree中， value存在WAL中，叫做value log。通常情况下，key比较小，所以LSM tree比较小，当获取value值的时候，再从SSD存储中读取。现在的SSD， 比如Samsung 960 Pro，对于4KB的数据块，可以提供44万的读操作/秒，这相当快了。</p>
<p>LSM tree最主要的性能消耗在于 compaction 过程。 在compaction的时候，多个文件需要读进内存，排序，然后再写回。每个文件都固定大小，如果文件中包含value, 文件大小会显著的增加，compaction会更频繁地发生。Badger不存储value，而是存储value的指针， 如果每个键是16， 每个value的指针是16 byte的话，一个64MB的文件就可以存储200万个键值对。</p>
<p>因为Badger不存储value，而是存储value的指针,compaction的时候只移动key和value指针，对于 1KB大小的value和16 byte的key， 写放大为<code>(10*16 + 1024)/(16 + 1024) ~ 1.14</code>。</p>
<p>因为Badger的LSM tree比较小，所以它的层级相对于普通的LSM tree要少，这也意味着查找会更少。例如1KB大小的value, 22byte的key, 7500万条数据的原始大小是 72GB,但是对于Badger的LSM tree来说，只需要1.7G,完全可以放在内存中，这也是Badger的随机读比RocksDB快3.5的原因。</p>
<h2 id="容错">容错</h2>
<p>LSM tree将所有的更新写入到内存中的memtable，一旦填满， memtable回替换为immutable memtable，最终回写入到磁盘中的level0中。</p>
<p>如果机器宕机，内存表中的数据就会丢失。k/v数据库一般使用write-ahead log (WAL)来处理这个问题，Badger也一样。Badger会记录memtable的最后一个值的指针，当恢复的时候，它可以replay和重建LSM tree。</p>
<h2 id="文件大小">文件大小</h2>
<p>Badger还使用技术对value值进行压缩，以便是log文件更小。</p>
<p>对于1KB的value,16 byte的key, 7500万条数据，RocksDB的 LSM tree 是 50GB， Badger的 value log文件是74GB(未压缩)， LSM tree 是 1.7GB。</p>
<p>和RocksDB的Benchmark比较：</p>
<p><img src="badger-benchmarks.png" alt=""></p>
<h2 id="使用">使用</h2>
<p>Badger使用起来超级简单， 配置参数页不多，而且提供了默认的配置参数。</p>
<p>下面的代码是读写查和便利的代码，所有的操作都是在事务中完成的， Badger的事物是基于MVCC实现的。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"log"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/dgraph-io/badger"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	opts := badger.DefaultOptions</div><div class="line">	opts.Dir = <span class="string">"./data"</span></div><div class="line">	opts.ValueDir = <span class="string">"./data"</span></div><div class="line">	db, err := badger.Open(&opts)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatal(err)</div><div class="line">	}</div><div class="line">	<span class="keyword">defer</span> db.Close()</div><div class="line"></div><div class="line">	<span class="comment">// set</span></div><div class="line">	err = db.Update(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		err := txn.Set([]<span class="typename">byte</span>(<span class="string">"answer"</span>), []<span class="typename">byte</span>(<span class="string">"42"</span>),<span class="number"> 0</span>)</div><div class="line">		<span class="keyword">return</span> err</div><div class="line">	})</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// get</span></div><div class="line">	err = db.View(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		item, err := txn.Get([]<span class="typename">byte</span>(<span class="string">"answer"</span>))</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		}</div><div class="line">		val, err := item.Value()</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		}</div><div class="line">		fmt.Printf(<span class="string">"The answer is: %s\n"</span>, val)</div><div class="line">		<span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">	})</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// iterate</span></div><div class="line">	err = db.View(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		opts := badger.DefaultIteratorOptions</div><div class="line">		opts.PrefetchSize =<span class="number"> 10</span></div><div class="line">		it := txn.NewIterator(opts)</div><div class="line">		<span class="keyword">for</span> it.Rewind(); it.Valid(); it.Next() {</div><div class="line">			item := it.Item()</div><div class="line">			k := item.Key()</div><div class="line">			v, err := item.Value()</div><div class="line">			<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">				<span class="keyword">return</span> err</div><div class="line">			}</div><div class="line">			fmt.Printf(<span class="string">"key=%s, value=%s\n"</span>, k, v)</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">	})</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Prefix scans</span></div><div class="line">	db.View(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		it := txn.NewIterator(badger.DefaultIteratorOptions)</div><div class="line">		prefix := []<span class="typename">byte</span>(<span class="string">"ans"</span>)</div><div class="line">		<span class="keyword">for</span> it.Seek(prefix); it.ValidForPrefix(prefix); it.Next() {</div><div class="line">			item := it.Item()</div><div class="line">			k := item.Key()</div><div class="line">			v, err := item.Value()</div><div class="line">			<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">				<span class="keyword">return</span> err</div><div class="line">			}</div><div class="line">			fmt.Printf(<span class="string">"key=%s, value=%s\n"</span>, k, v)</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">	})</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// iterate keys</span></div><div class="line">	err = db.View(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		opts := badger.DefaultIteratorOptions</div><div class="line">		opts.PrefetchValues = <span class="constant">false</span></div><div class="line">		it := txn.NewIterator(opts)</div><div class="line">		<span class="keyword">for</span> it.Rewind(); it.Valid(); it.Next() {</div><div class="line">			item := it.Item()</div><div class="line">			k := item.Key()</div><div class="line">			fmt.Printf(<span class="string">"key=%s\n"</span>, k)</div><div class="line">		}</div><div class="line">		<span class="keyword">return</span> <span class="constant">nil</span></div><div class="line">	})</div><div class="line"></div><div class="line">	<span class="comment">// delete</span></div><div class="line">	err = db.Update(<span class="keyword">func</span>(txn *badger.Txn) error {</div><div class="line">		<span class="keyword">return</span> txn.Delete([]<span class="typename">byte</span>(<span class="string">"answer"</span>))</div><div class="line">	})</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		<span class="built_in">panic</span>(err)</div><div class="line">	}</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<h2 id="参考文档">参考文档</h2>
<ol>
<li><a href="https://blog.dgraph.io/post/badger/" target="_blank" rel="external">https://blog.dgraph.io/post/badger/</a></li>
<li><a href="https://www.slideshare.net/ssuser7e134a/log-structured-merge-tree" target="_blank" rel="external">https://www.slideshare.net/ssuser7e134a/log-structured-merge-tree</a></li>
<li><a href="https://blog.dgraph.io/post/badger/" target="_blank" rel="external">https://blog.dgraph.io/post/badger/</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>大家好，给大家介绍一下， 新晋的高性能的 K/V数据库: <a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">badger</a>。</p>
<p>这是 <a href="https://dgraph.io" target="_blank" rel="external">dgraph.io</a>开发的一款基于 log structured merge (LSM) tree 的 key-value 本地数据库， 使用 Go 开发。</p>
<p>事实上，市面上已经有一些知名的基于LSM tree的k/v数据库， 比如 <a href="https://github.com/google/leveldb" target="_blank" rel="external">leveldb</a>、<a href="https://github.com/syndtr/goleveldb" target="_blank" rel="external">goleveldb</a>、<a href="http://rocksdb.org" target="_blank" rel="external">rocksdb</a>、<a href="https://github.com/boltdb/bolt" target="_blank" rel="external">boltdb</a>, 可是为什么还要创造新的轮子呢。我们不妨从LSM说起。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Convert Shadowsocks into an HTTP proxy]]></title>
    <link href="http://colobu.com/2017/10/10/Convert-Shadowsocks-into-an-HTTP-proxy/"/>
    <id>http://colobu.com/2017/10/10/Convert-Shadowsocks-into-an-HTTP-proxy/</id>
    <published>2017-10-10T07:30:27.000Z</published>
    <updated>2017-10-26T15:14:07.239Z</updated>
    <content type="html"><![CDATA[<p><strong>备用，不解释</strong></p>
<h2 id="socks5_to_http_proxy">socks5 to http proxy</h2>
<p>1、 首先安装 polipo, 设置parent proxy to Ss:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">apt-get install polipo</div><div class="line">service polipo stop</div><div class="line">polipo socksParentProxy=localhost:<span class="number">1080</span> &</div></pre></td></tr></table></figure>

<p>macosx运行</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">brew install polipo</div><div class="line">polipo socksParentProxy=localhost:<span class="number">1080</span> &</div></pre></td></tr></table></figure>

<p>设置全局http proxy:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">http_proxy=<span class="keyword">http</span>://localhost:<span class="number">8123</span> apt-<span class="built_in">get</span> update</div><div class="line">http_proxy=<span class="keyword">http</span>://localhost:<span class="number">8123</span> curl www.google.com</div><div class="line">http_proxy=<span class="keyword">http</span>://localhost:<span class="number">8123</span> wget www.google.com</div></pre></td></tr></table></figure>

<p>对于git:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git config --<span class="keyword">global</span> http.proxy <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8123</span></div><div class="line">git <span class="keyword">clone</span> https:<span class="comment">//github.com/xxx/xxx.git</span></div><div class="line">git xxx</div><div class="line">git xxx</div><div class="line">git config --<span class="keyword">global</span> --<span class="keyword">unset</span>-all http.proxy</div></pre></td></tr></table></figure>

<h2 id="glide_mirror">glide mirror</h2>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$ rm -rf ~/.glide</div><div class="line">$ mkdir -p ~/.glide</div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/mobile <span class="keyword">https</span>://github.com/golang/mobile <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/crypto <span class="keyword">https</span>://github.com/golang/crypto <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/net <span class="keyword">https</span>://github.com/golang/net <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/tools <span class="keyword">https</span>://github.com/golang/tools <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/<span class="keyword">text</span> <span class="keyword">https</span>://github.com/golang/<span class="keyword">text</span> <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/image <span class="keyword">https</span>://github.com/golang/image <span class="comment">--vcs git</span></div><div class="line">$ glide mirror <span class="built_in">set</span> <span class="keyword">https</span>://golang.org/x/sys <span class="keyword">https</span>://github.com/golang/sys <span class="comment">--vcs git</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><strong>备用，不解释</strong></p>
<h2 id="socks5_to_http_proxy">socks5 to http proxy</h2>
<p>1、 首先安装 polipo, 设置parent proxy to Ss:</p>
<figure ]]>
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]KV存储的对比]]></title>
    <link href="http://colobu.com/2017/10/10/comparision-of-kv-datastore/"/>
    <id>http://colobu.com/2017/10/10/comparision-of-kv-datastore/</id>
    <published>2017-10-10T03:12:28.000Z</published>
    <updated>2017-10-26T15:14:07.551Z</updated>
    <content type="html"><![CDATA[<p>本文转自饿了么的高级架构师陈东明(cadem)发布于云栖社区的文章: <a href="https://yq.aliyun.com/articles/85634?spm=5176.8091938.0.0.Bck5cC" target="_blank" rel="external">KV存储的对比</a>。作者还整理了另外一篇文章: <a href="https://yq.aliyun.com/articles/85619?spm=5176.8091938.0.0.Bck5cC" target="_blank" rel="external">存储系统的分类</a>,列举了常见的一些kv存储模型和实现。</p>
<p>最近对各种KV存储进行一个比较，从存储引擎到存储引擎的类型，到单机版的kvstore，再到分布式kvstore集群。</p>
<a id="more"></a>
<h2 id="存储引擎的类型">存储引擎的类型</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>全称</th>
</tr>
</thead>
<tbody>
<tr>
<td>btree</td>
<td></td>
</tr>
<tr>
<td>LSH</td>
<td>Log-Structured Hash Table</td>
</tr>
<tr>
<td>LSM</td>
<td>Log-Structured Merge Tree</td>
</tr>
<tr>
<td>FractalTree</td>
<td>分型树</td>
</tr>
</tbody>
</table>
<h2 id="存储引擎">存储引擎</h2>
<p><span id="thx">Welcome to Oschina Tools website</span>            <table><thead><tr><th>类型</th><th>名称</th><th>语言</th><th>备注</th><th>应用在___</th><th>dbengine排名</th><th>出品</th></tr></thead><tbody><tr><td>berkeleyDB</td><td>BTREE, HASH, QUEUE, RECNO</td><td>C,Java</td><td></td><td></td><td>No.9</td><td>oracle</td></tr><tr><td>Wiredtiger</td><td>btree, LSM</td><td>C</td><td></td><td>mongodb</td><td>No.24</td><td>WiredTiger/mongodb</td></tr><tr><td>Tokyo Cabinet /Kyoto Cabinet</td><td>b+tree,hash table</td><td></td><td></td><td>nmdb,Kyoto Tycoon</td><td>NO.27/No.36</td><td>FAL Labs</td></tr><tr><td>LMDB</td><td>btree</td><td>C</td><td></td><td>OpenLDAP</td><td></td><td>symas</td></tr><tr><td>BoltDB</td><td>btree</td><td>Go</td><td>LMDB的go版本</td><td></td><td></td><td></td></tr><tr><td>leveldb</td><td>LSM</td><td>c++</td><td></td><td></td><td>No.15</td><td>google</td></tr><tr><td>goleveldb</td><td>LSM</td><td>Go</td><td>leveldb的go版本</td><td></td><td></td><td>个人</td></tr><tr><td>levigo</td><td>LSM</td><td>Go</td><td>Go wrapper for LevelDB</td><td></td><td></td><td>个人</td></tr><tr><td>rocksdb</td><td>LSM</td><td>c++,java</td><td></td><td></td><td>No.18</td><td>facebook</td></tr><tr><td>gorocksdb</td><td>LSM</td><td>Go</td><td>Go wrapper for RocksDB</td><td></td><td></td><td>个人</td></tr><tr><td>mongo-rocks</td><td>LSM</td><td>C++</td><td></td><td>RocksDB Storage Engine Module for MongoDB</td><td></td><td>mongo partner</td></tr><tr><td>bitcast</td><td>LSH</td><td>C</td><td></td><td>beansdb,riak</td><td></td><td>basho</td></tr><tr><td>PerconaFT</td><td>FractalTree</td><td>C++</td><td>Mysql存储引擎之TokuDB</td><td>percona</td><td></td><td></td></tr></tbody></table></p>
<h2 id="单机kvstore">单机kvstore</h2>
<table><thead><tr><th>类型</th><th>名称</th><th>采用的存储引擎</th><th>语言</th><th>出品</th><th>主从复制</th><th>github star</th></tr></thead><tbody><tr><td>kv对</td><td>nmdb</td><td>qdbm, berkeley db, tokyo cabinet,tdb</td><td>C</td><td>个人Alberto Bertogli</td><td></td><td></td></tr><tr><td>kv对</td><td>memcachedb</td><td>Berkeley DB</td><td>C</td><td>新浪</td><td>yes</td><td></td></tr><tr><td>kv对</td><td>Kyoto Tycoon</td><td>Kyoto Cabinet</td><td>C/C++</td><td>FAL Labs</td><td></td><td></td></tr><tr><td>结构化kv(redis兼容）</td><td>ssdb</td><td>leveddb</td><td>C/C++</td><td>个人ideawu</td><td>yes</td><td>4k+</td></tr><tr><td>结构化kv(redis兼容）</td><td>ssdb-rocks</td><td>rocksdb</td><td>C/C++</td><td>个人ideawu</td><td></td><td>92</td></tr><tr><td>结构化kv(redis兼容）</td><td>ardb</td><td>LevelDB, RocksDB, LMDB, WiredTiger</td><td>C++</td><td>个人yinqiwen</td><td>yes</td><td>800+</td></tr><tr><td>结构化kv(redis兼容）</td><td>(reborndb)qdb</td><td>Rocksdb and LevelDB</td><td>Go</td><td>个人ngaut</td><td></td><td>200+</td></tr><tr><td>结构化kv(redis兼容）</td><td>Pika</td><td>Rocksdb</td><td>C</td><td>Qihoo360</td><td>yes</td><td>900+</td></tr><tr><td>结构化kv(redis兼容）</td><td>LedisDB</td><td>LevelDB, goleveldb, LMDB, RocksDB, BoltDB or Memory</td><td>Go</td><td>个人SiddonTang</td><td></td><td>2K+</td></tr></tbody></table>

<h2 id="单机kvstore的分布式代理">单机kvstore的分布式代理</h2>
<table><thead><tr><th>名称</th><th>语言</th><th>存储</th><th>出品</th><th>应用/githubstar</th><th>分片</th><th>弹性</th><th>备注</th></tr></thead><tbody><tr><td>Reborndb</td><td>Go</td><td>qdb</td><td>个人ngaut</td><td>200+</td><td>yes</td><td>yes</td><td></td></tr><tr><td>Netflix Dynomite</td><td>C</td><td>redis,memcached</td><td>Netflix</td><td>1.9K+</td><td></td><td></td><td>Dynamo</td></tr><tr><td>Codis</td><td>Go</td><td>codis-server(定制redis)</td><td>社区CodisLabs</td><td>5K+</td><td></td><td></td><td></td></tr><tr><td>Twenproxy</td><td>C</td><td>redis,memcached</td><td>twitter</td><td>6K+</td><td></td><td></td><td></td></tr></tbody></table>

<h2 id="分布式KVstore">分布式KVstore</h2>
<table><thead><tr><th>类型</th><th>名称</th><th>语言</th><th>出品</th><th>dbengine排名/githubstar</th><th>存储引擎</th><th>社区活跃</th><th>特性</th><th>备注</th></tr></thead><tbody><tr><td>kv型</td><td>riak</td><td>erlang</td><td>basho</td><td>No.3/2K+</td><td>bitcask</td><td></td><td></td><td>Dynamo</td></tr><tr><td>kv型</td><td>beansdb</td><td>C</td><td>douban</td><td>600+</td><td>bitcask模型</td><td>近2年没有更新，没有文档</td><td></td><td>Dynamo</td></tr><tr><td>kv型</td><td>project Voldmort</td><td>Java</td><td>LinkedIn</td><td>No.29/1.8K+</td><td>BDB-JE,MySQL,Read-Only</td><td></td><td></td><td></td></tr><tr><td>kv型</td><td>Scalris</td><td>erlang</td><td>Zuse Institute Berlin</td><td>No.35/88</td><td></td><td></td><td></td><td></td></tr><tr><td>kv型</td><td>aeospike</td><td></td><td>aespike</td><td>No.7</td><td></td><td></td><td></td><td></td></tr><tr><td>kv型</td><td>Tair</td><td>C/C++</td><td>alibaba</td><td>400+</td><td>自研的fdb</td><td>停止更新，没有文档</td><td></td><td></td></tr></tbody></table>

<h2 id="补充">补充</h2>
<p>原文中没有提到的，在这里添加上作为补充。</p>
<ul>
<li><a href="https://github.com/pingcap/tidb" target="_blank" rel="external">tidb</a>: 国产的分布式NewSQL产品，底层采用tikv, 支持MySQL协议， PingCap出品。</li>
<li><a href="https://github.com/dgraph-io/badger" target="_blank" rel="external">badger</a>: 性能优异，特别为SSD优化，仅仅key存储在LSM tree中。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文转自饿了么的高级架构师陈东明(cadem)发布于云栖社区的文章: <a href="https://yq.aliyun.com/articles/85634?spm=5176.8091938.0.0.Bck5cC" target="_blank" rel="external">KV存储的对比</a>。作者还整理了另外一篇文章: <a href="https://yq.aliyun.com/articles/85619?spm=5176.8091938.0.0.Bck5cC" target="_blank" rel="external">存储系统的分类</a>,列举了常见的一些kv存储模型和实现。</p>
<p>最近对各种KV存储进行一个比较，从存储引擎到存储引擎的类型，到单机版的kvstore，再到分布式kvstore集群。</p>
]]>
    
    </summary>
    
      <category term="数据库" scheme="http://colobu.com/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[functor applicative 和 monad]]></title>
    <link href="http://colobu.com/2017/09/30/functor-applicative-and-monad/"/>
    <id>http://colobu.com/2017/09/30/functor-applicative-and-monad/</id>
    <published>2017-09-30T14:16:53.000Z</published>
    <updated>2017-10-05T14:30:54.436Z</updated>
    <content type="html"><![CDATA[<p>Monad 函数式编程中的一个概念， 在 Haskell 和 Scala 语言中用的比较多。</p>
<a id="more"></a>
<p>这个概念来源于数学中的范畴学，过于学术化，我看国内的文章介绍的很多，但是准确、清晰而简要的介绍的文章却没有看到。</p>
<p>我也不准备介绍，因为我对它的理解也不够深，这里引用 <a href="http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="external">Functors, Applicatives, And Monads In Pictures</a>一文中的图片和总结，来加深一下自己的理解。</p>
<p><img src="recap.png" alt=""></p>
<ul>
<li><strong>functors</strong>: you apply a function to a wrapped value using fmap or &lt;$&gt;</li>
<li><strong>applicatives</strong>: you apply a wrapped function to a wrapped value using &lt;*&gt; or liftA</li>
<li><strong>monads</strong>: you apply a function that returns a wrapped value, to a wrapped value using &gt;&gt;= or liftM</li>
</ul>
<p><img src="fmap.png" alt="Functor 的作用就是应用一个函数到一个上下文中的值"></p>
<p><img src="applicative.png" alt="Applicative 的作用则是应用一个上下文中的函数到一个上下文中的值"></p>
<p><img src="bind.png" alt="Monad 应用的是一个返回上下文的值的函数，将这个函数应用在一个上下文中的值上"></p>
<p>这篇文章已经被翻译成中文： <a href="http://jiyinyiyong.github.io/monads-in-pictures/" target="_blank" rel="external">Functor, Applicative, 以及 Monad 的图片阐释</a>。<br>kotlin中文版： <a href="https://hltj.me/kotlin/2017/08/25/kotlin-functor-applicative-monad-cn.html" target="_blank" rel="external">Kotlin 版图解 Functor、Applicative 与 Monad</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Monad 函数式编程中的一个概念， 在 Haskell 和 Scala 语言中用的比较多。</p>
]]>
    
    </summary>
    
      <category term="算法" scheme="http://colobu.com/categories/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用 Go 和 Let's Encrypt 快速配置HTTPS加密]]></title>
    <link href="http://colobu.com/2017/09/30/use-letsencrypt-in-go/"/>
    <id>http://colobu.com/2017/09/30/use-letsencrypt-in-go/</id>
    <published>2017-09-30T08:28:28.000Z</published>
    <updated>2017-09-30T14:15:44.802Z</updated>
    <content type="html"><![CDATA[<p><a href="https://www.google.com.sg/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjAguS9vszWAhXDo48KHZPNCMUQFggnMAA&amp;url=https%3A%2F%2Fletsencrypt.org%2F&amp;usg=AOvVaw3jJenSMDof06eZ9Vr2RLNL" target="_blank" rel="external">Let&#39;s Encrypt</a> 在2015年秋季推出了免费的数字证书认证计划，旨在消除当前手动创建和安装证书的复杂性，并推广加密的万维网服务，为安全网站提供<strong>免费</strong>的SSL/TLS证书。<br>Let&#39;s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。</p>
<p>用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（<a href="https://github.com/ietf-wg-acme/acme/" target="_blank" rel="external">ACME</a>）。提案的一个版本已作为一个Internet草案发布。</p>
<p>目前， 申请证书的域名只能是特定的域名， 不支持<a href="https://zh.wikipedia.org/wiki/通配符证书" target="_blank" rel="external">通配符证书</a>(*.example.com)，这对于一个拥有众多子域名的公司来说很不方便。但是今年已经说了，将于2018年1月<a href="https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html" target="_blank" rel="external">支持通配符证书</a>和ACME v2 API。</p>
<a id="more"></a>
<p>原先有一些支持Let&#39;s Encrypt的 Go 工具和库， 比如<a href="https://github.com/xenolf/lego" target="_blank" rel="external">lego</a>、<a href="https://github.com/hlandau/acme" target="_blank" rel="external">acme</a>、<a href="https://github.com/ericchiang/letsencrypt" target="_blank" rel="external">letsencrypt</a>、<a href="https://github.com/rsc/letsencrypt" target="_blank" rel="external">rsc/letsencrypt</a>, 但是我推荐使用官方的库：<a href="https://godoc.org/golang.org/x/crypto/acme/autocert" target="_blank" rel="external">x/crypto/acme/autocert</a>, 简单好用，并且官方维护。</p>
<p>稍微复杂一点的使用姿势如下(其实已经很简单了)：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">m := autocert.Manager{</div><div class="line">    Cache:      autocert.DirCache(<span class="string">"secret-dir"</span>),</div><div class="line">    Prompt:     autocert.AcceptTOS,</div><div class="line">    HostPolicy: autocert.HostWhitelist(<span class="string">"example.org"</span>),</div><div class="line">}</div><div class="line">s := &http.Server{</div><div class="line">    Addr:      <span class="string">":https"</span>,</div><div class="line">    TLSConfig: &tls.Config{GetCertificate: m.GetCertificate},</div><div class="line">}</div><div class="line">s.ListenAndServeTLS(<span class="string">""</span>, <span class="string">""</span>)</div></pre></td></tr></table></figure>

<p><code>autocert.Manager</code>提供了<code>GetCertificate</code>方法， 可以用来配置<code>TLSConfig</code>。</p>
<p>更简单的方式是一行搞定：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mux := http.NewServeMux()</div><div class="line">mux.HandleFunc(<span class="string">"/"</span>, <span class="keyword">func</span>(w http.ResponseWriter, r *http.Request) {</div><div class="line">    fmt.Fprintf(w, <span class="string">"Hello, TLS user! Your config: %+v"</span>, r.TLS)</div><div class="line">})</div><div class="line">log.Fatal(http.Serve(autocert.NewListener(<span class="string">"example.com"</span>), mux))</div></pre></td></tr></table></figure>

<p><code>autocert.NewListener</code>提供了一个自动配置的listener，使用起来非常的方便。</p>
<p>所以，如果你想做一些额外的配置，如果证书要缓存的位置，就用上面的方式， 如果想傻瓜式的使用，就用一行代码的方式。</p>
<p>关于这个包的设计的一些讨论可以看: <a href="https://github.com/golang/go/issues/17053" target="_blank" rel="external">#17053</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://www.google.com.sg/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=1&amp;cad=rja&amp;uact=8&amp;ved=0ahUKEwjAguS9vszWAhXDo48KHZPNCMUQFggnMAA&amp;url=https%3A%2F%2Fletsencrypt.org%2F&amp;usg=AOvVaw3jJenSMDof06eZ9Vr2RLNL" target="_blank" rel="external">Let&#39;s Encrypt</a> 在2015年秋季推出了免费的数字证书认证计划，旨在消除当前手动创建和安装证书的复杂性，并推广加密的万维网服务，为安全网站提供<strong>免费</strong>的SSL/TLS证书。<br>Let&#39;s Encrypt 是由互联网安全研究小组（ISRG，一个公益组织）提供的服务。主要赞助商包括电子前哨基金会，Mozilla基金会，Akamai以及思科。2015年4月9日，ISRG与Linux基金会宣布合作。</p>
<p>用以实现这一新的数字证书认证机构的协议被称为自动证书管理环境（<a href="https://github.com/ietf-wg-acme/acme/" target="_blank" rel="external">ACME</a>）。提案的一个版本已作为一个Internet草案发布。</p>
<p>目前， 申请证书的域名只能是特定的域名， 不支持<a href="https://zh.wikipedia.org/wiki/通配符证书" target="_blank" rel="external">通配符证书</a>(*.example.com)，这对于一个拥有众多子域名的公司来说很不方便。但是今年已经说了，将于2018年1月<a href="https://letsencrypt.org/2017/07/06/wildcard-certificates-coming-jan-2018.html" target="_blank" rel="external">支持通配符证书</a>和ACME v2 API。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转][译]面向分布式系统工程师的分布式系统理论]]></title>
    <link href="http://colobu.com/2017/09/27/distributed-systems-theory-for-the-distributed-systems-engineer/"/>
    <id>http://colobu.com/2017/09/27/distributed-systems-theory-for-the-distributed-systems-engineer/</id>
    <published>2017-09-27T08:06:40.000Z</published>
    <updated>2017-09-30T14:15:44.755Z</updated>
    <content type="html"><![CDATA[<p>原文：<a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="external">Distributed systems theory for the distributed systems engineer</a></p>
<p>译者：<a href="http://blog.xiayf.cn/2014/08/10/Distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="external">youngsterxyf</a></p>
<p>Gwen Shapira，大腕级的解决方案架构师（SA），如今Cloudera的全职工程师，在<a href="https://twitter.com/gwenshap/status/497203248332165121" target="_blank" rel="external">Twitter上提的一个问题</a>引起了我的思考。</p>
<p>如果是以前，我可能会回答“嗯，这里有篇FLP论文，这里有篇Paxos论文，这里还有篇拜占庭将军问题的论文...”，我会罗列一箩筐重要的材料，如果你一头扎进去，至少花费6个月的时间才能过一遍这些材料。然而我已逐渐明白推荐大量的理论性的论文通常恰恰是着手学习分布式系统理论的错误方式（除非你在做一个PhD项目）。论文通常比较深入难懂，需要认真地研习，通常还需要大量的时间投入(significant experience)来理清这些论文的重要贡献，以及在整个理论体系中的位置。要求工程师具备这样的专业水平又有多大的意义呢？</p>
<p>但是，很遗憾，对分布式系统理论方面的重大研究成果和思想进行概括、归纳、背景分析的‘导引’性质的优秀材料非常缺乏；特别是没有居高临下态度的材料。对这块空白区域的思考让我想到了另一个有趣的问题：</p>
<blockquote>
<p>一个分布式系统工程师应该知道些什么分布式系统理论？</p>
</blockquote>
<p>在这种情况下，一知半解(a little theory)并不会是一件多危险的事情。因此我尝试整理一个列表，罗列出作为一个分布式系统工程师的我认为能够直接应用于我日常工作的一些基本概念；或者让分布式系统工程师完全有能力设计一个新系统的“筹码”。如果你认为我漏掉了一些东西，请联系我。</p>
<a id="more"></a>
<h2 id="入门第一步">入门第一步</h2>
<p>以下4篇材料出色地解释了构建分布式系统会遇到的一些挑战，共同概述了一系列分布式系统工程师必须要解决的技术上的难题，为之后章节中更深入的研究做好准备。</p>
<ul>
<li><a href="http://book.mixu.net/distsys/" target="_blank" rel="external">好玩又实在的分布式系统理论</a>是一本简短的书籍，其内容覆盖了分布式系统领域的一些基本议题，包括时间的作用及不同的复制策略。 《Distributed Systems for Fun and Profit》</li>
<li><a href="http://www.somethingsimilar.com/2013/01/14/notes-on-distributed-systems-for-young-bloods/" target="_blank" rel="external">为分布式系统领域新人整理的笔记</a> - 不是理论对理论地讲述，而是做一个非常好非常实用的平衡，让你对其余材料的阅读能够落地。《Notes on distributed systems for young bloods》</li>
<li><a href="http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.41.7628" target="_blank" rel="external">分布式系统研究综述报告</a> - 一篇经典的论文，解释了为什么不能将所有远程交互都模拟成和本地对象一样。《A Note on Distributed Systems》</li>
<li><a href="http://en.wikipedia.org/wiki/Fallacies_of_Distributed_Computing" target="_blank" rel="external">关于分布式计算的若干谬论</a> - 分布式计算方面的8点谬论，提醒系统设计者可能会忘记的几类事情。《The fallacies of distributed computing》</li>
</ul>
<h2 id="失败和时间">失败和时间</h2>
<p>分布式系统工程师需要面对的许多困难最终都可以归咎于两个潜在的原因：</p>
<ul>
<li>进程可能会失败</li>
<li>不存在一种好的方式来周知目前为止进程已经做了些什么</li>
</ul>
<p>进程之间对于时间的认知能共享些什么？哪些失败的场景是能够检测到？什么算法和原语可能被正确地实现？这三个问题有着非常深层的联系。多数时候，我们会假设两个不同节点之间对于时间概念或时间以什么样的速度逝去没有任何可共享的认知。</p>
<p>你应该知道：</p>
<ul>
<li>失败模式的（部分）分层：<a href="http://www.cse.psu.edu/~gcao/teach/513-00/c7.pdf" target="_blank" rel="external">崩溃停止-&gt;排除(omission)</a>-&gt;<a href="http://en.wikipedia.org/wiki/Byzantine_fault_tolerance" target="_blank" rel="external">拜占庭容错</a>。你应该理解：在高层次上可能发生的问题在低层次上肯定可能发生，在低层次上不可能发生的问题在高层次上也肯定不可能发生。</li>
<li>在没有任何共享时钟的情况下如何判断在另一个事件之前是否产生了某事件。这意味着你需要理解<a href="http://web.stanford.edu/class/cs240/readings/lamport.pdf" target="_blank" rel="external">Lamport时钟</a>及其一般化的<a href="http://en.wikipedia.org/wiki/Vector_clock" target="_blank" rel="external">向量时钟</a>，也需要阅读一下这篇<a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf" target="_blank" rel="external">Dynamo论文</a>。</li>
<li>单个失败发生的可能性对于我们实现正确的分布式系统到底会有多大的影响（请阅读下面关于FLP结果的笔记）？</li>
<li>不同的时间模型：同步、部分同步和异步（若我找到好的参考文献会添加链接）</li>
</ul>
<h2 id="容错的基本矛盾">容错的基本矛盾</h2>
<p>一个系统，若要不降级而容忍某些错误的发生，就必须能够好像那些错误没有发生一样地运作。这通常意味着系统的这些部分必须能够冗余地工作，但是非绝对必要地做更多的工作通常会在性能和资源耗用方面产生一些消耗。这是为系统添加容错带来的基本矛盾。</p>
<p>你应该知道：</p>
<ul>
<li>确保单拷贝可串行化(single-copy serialisability)的仲裁(quorum)技术。可阅读<a href="https://ecommons.library.cornell.edu/bitstream/1813/6323/1/82-483.pdf" target="_blank" rel="external">Skeen的原始论文</a>，但可能更建议阅读<a href="http://en.wikipedia.org/wiki/Quorum_(distributed_computing" target="_blank" rel="external">这个Wikipedia词条</a>)。</li>
<li>关于<a href="http://the-paper-trail.org/blog/consensus-protocols-two-phase-commit/" target="_blank" rel="external">两阶段提交</a>、<a href="http://the-paper-trail.org/blog/consensus-protocols-three-phase-commit/" target="_blank" rel="external">三阶段提交</a>和<a href="http://the-paper-trail.org/blog/consensus-protocols-paxos/" target="_blank" rel="external">Paxos算法</a>，以及为什么它们有不同的容错性质。</li>
<li>最终一致性，及其他技术是如何以弱化对系统行为的保证为代价来尝试避免这种矛盾的。这篇<a href="http://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf" target="_blank" rel="external">Dynamo论文</a>是一个很好的起点，同时Pat Helland的经典之作<a href="http://www.ics.uci.edu/~cs223/papers/cidr07p15.pdf" target="_blank" rel="external">Life Beyond Transactions</a>也是必读的。</li>
</ul>
<h2 id="基本的原语">基本的原语</h2>
<p>分布式系统中很少有大家一致认同的基本构建块，但越来越多地在出现。你应该以下的问题是什么，以及在哪可以找到它们的解决方案：</p>
<ul>
<li>Leader选举(leader election)（例如<a href="http://en.wikipedia.org/wiki/Bully_algorithm" target="_blank" rel="external">Bully算法</a>）</li>
<li>一致的快照（例如Chandy和Lamport所写的<a href="http://research.microsoft.com/en-us/um/people/lamport/pubs/chandy.pdf" target="_blank" rel="external">经典论文</a>）</li>
<li>共识（阅读上文提到的关于2PC和Paxos的博文）</li>
<li>分布式状态机复制（看看<a href="http://en.wikipedia.org/wiki/State_machine_replication" target="_blank" rel="external">Wikipedia</a>就可以，但<a href="http://research.microsoft.com/en-us/um/people/blampson/58-Consensus/Acrobat.pdf" target="_blank" rel="external">Lampson的论文</a>更权威，只是枯燥了点）。</li>
</ul>
<h2 id="基础结论">基础结论</h2>
<p>某些客观事实是需要内化于心的，以下是几个关键点（a flavour）（当然还有更多）：</p>
<ul>
<li>如果进程之间可能丢失某些消息，那么不可能在实现一致性存储的同时能响应所有的请求。这就是<a href="http://lpd.epfl.ch/sgilbert/pubs/BrewersConjecture-SigAct.pdf" target="_blank" rel="external">CAP定理</a>。</li>
<li>一致性不可能同时满足以下条件 a) 总是正确 b) 在异步系统中只要有一个机器发生故障，系统总是能终止运行——停止失败（FLP 结论）。在给出证明之前，首先是一个我在洛杉矶演讲的幻灯片：我们喜爱的论文，我希望它能合理的解释这个结论。<br>建议：确实没有必要理解其证明。</li>
<li>一般而言，消息交互少于两轮是不可能达成共识(Consensus)。</li>
</ul>
<h2 id="真实系统">真实系统</h2>
<p>最重要的练习是重复地阅读新兴的、真实系统的描述，并尝试评价它们的设计决策。一遍又一遍地这样去做。一些建议：</p>
<p><strong>Google</strong>:</p>
<p><a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/gfs-sosp2003.pdf" target="_blank" rel="external">GFS</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/spanner-osdi2012.pdf" target="_blank" rel="external">Spanner</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/41344.pdf" target="_blank" rel="external">F1</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/chubby-osdi06.pdf" target="_blank" rel="external">Chubby</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/archive/bigtable-osdi06.pdf" target="_blank" rel="external">BigTable</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/41378.pdf" target="_blank" rel="external">MillWheel</a>、<a href="http://eurosys2013.tudos.org/wp-content/uploads/2013/paper/Schwarzkopf.pdf" target="_blank" rel="external">Omega</a>、<a href="http://static.googleusercontent.com/media/research.google.com/en/us/pubs/archive/36356.pdf" target="_blank" rel="external">Dapper</a>、<a href="http://www.cs.utexas.edu/users/lorenzo/corsi/cs380d/papers/paper2-1.pdf" target="_blank" rel="external">Paxos Made Live</a>、<a href="http://cacm.acm.org/magazines/2013/2/160173-the-tail-at-scale/abstract" target="_blank" rel="external">The Tail At Scale</a>。</p>
<p><strong>Not Google</strong>:</p>
<p><a href="http://research.microsoft.com/en-us/projects/dryad/eurosys07.pdf" target="_blank" rel="external">Dryad</a>, <a href="https://www.cs.cornell.edu/projects/ladis2009/papers/lakshman-ladis2009.pdf" target="_blank" rel="external">Cassandra</a>, <a href="http://ceph.com/papers/weil-ceph-osdi06.pdf" target="_blank" rel="external">Ceph</a>, <a href="https://ramcloud.stanford.edu/wiki/display/ramcloud/RAMCloud+Papers" target="_blank" rel="external">RAMCloud</a>, <a href="http://hyperdex.org/papers/" target="_blank" rel="external">HyperDex</a>, <a href="http://www.mpi-sws.org/~druschel/courses/ds/papers/cooper-pnuts.pdf" target="_blank" rel="external">PNUTS</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文：<a href="http://the-paper-trail.org/blog/distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="external">Distributed systems theory for the distributed systems engineer</a></p>
<p>译者：<a href="http://blog.xiayf.cn/2014/08/10/Distributed-systems-theory-for-the-distributed-systems-engineer/" target="_blank" rel="external">youngsterxyf</a></p>
<p>Gwen Shapira，大腕级的解决方案架构师（SA），如今Cloudera的全职工程师，在<a href="https://twitter.com/gwenshap/status/497203248332165121" target="_blank" rel="external">Twitter上提的一个问题</a>引起了我的思考。</p>
<p>如果是以前，我可能会回答“嗯，这里有篇FLP论文，这里有篇Paxos论文，这里还有篇拜占庭将军问题的论文...”，我会罗列一箩筐重要的材料，如果你一头扎进去，至少花费6个月的时间才能过一遍这些材料。然而我已逐渐明白推荐大量的理论性的论文通常恰恰是着手学习分布式系统理论的错误方式（除非你在做一个PhD项目）。论文通常比较深入难懂，需要认真地研习，通常还需要大量的时间投入(significant experience)来理清这些论文的重要贡献，以及在整个理论体系中的位置。要求工程师具备这样的专业水平又有多大的意义呢？</p>
<p>但是，很遗憾，对分布式系统理论方面的重大研究成果和思想进行概括、归纳、背景分析的‘导引’性质的优秀材料非常缺乏；特别是没有居高临下态度的材料。对这块空白区域的思考让我想到了另一个有趣的问题：</p>
<blockquote>
<p>一个分布式系统工程师应该知道些什么分布式系统理论？</p>
</blockquote>
<p>在这种情况下，一知半解(a little theory)并不会是一件多危险的事情。因此我尝试整理一个列表，罗列出作为一个分布式系统工程师的我认为能够直接应用于我日常工作的一些基本概念；或者让分布式系统工程师完全有能力设计一个新系统的“筹码”。如果你认为我漏掉了一些东西，请联系我。</p>
]]>
    
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]使用 bcc/BPF 分析 go 程序]]></title>
    <link href="http://colobu.com/2017/09/22/golang-bcc-bpf-function-tracing/"/>
    <id>http://colobu.com/2017/09/22/golang-bcc-bpf-function-tracing/</id>
    <published>2017-09-22T06:03:54.000Z</published>
    <updated>2017-09-30T14:15:44.755Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>BCC 是基于 BPF 的 Linux IO 分析、监控、网络工具集合。BPF Compiler Collection (BCC) 是创建高效内核追踪和处理程序的工具包，包含几个有用的工具和用例。BCC 扩展了 BPF (Berkeley Packet Filters) 的用途，BPF 之前被称为 eBPF，是 Linux 3.15 新增的一个新特性。BCC 大部分的功能都要求 Linux 4.1+。</p>
</blockquote>
<p>本文翻译自性能分析大牛<a href="http://www.brendangregg.com/index.html" target="_blank" rel="external">Brendan Gregg</a>的 2017年中旬的一篇文章: <a href="http://www.brendangregg.com/blog/2017-01-31/golang-bcc-bpf-function-tracing.html" target="_blank" rel="external">Golang bcc/BPF Function Tracing</a>, 介绍如何使用最新的工具更加深入的分析Go程序。</p>
<a id="more"></a>
<p><img src="bcc_tracing_tools_2017.png" alt="Linux bbc/BPF tracing tools"></p>
<p>本文中我将逐步展示一个新的分析Go程序的方式： 使用Linux 4.x的 eBPF 技术进行动态分析。如果你搜索一下<code>go</code>和<code>BPF</code>关键字， 你会发现一些使用 BPF的Go程序库(比如 <a href="https://github.com/iovisor/gobpf" target="_blank" rel="external">gobpf</a>)。这并不是我想在本文中介绍的：我是要使用 BPF 来对Go程序进行性能分析和调试。 如果你还不了解 BPF, 我几周前在 linux.conf.au 有一些介绍 (<a href="https://www.youtube.com/watch?v=JRFNIKUROPE" target="_blank" rel="external">youtube</a>, <a href="http://www.slideshare.net/brendangregg/bpf-tracing-and-more" target="_blank" rel="external">slideshare</a>)。</p>
<p>现在已经有一些方式可以调试和跟踪(debug and trace)Go程序, 包括(但不限于下列方式):</p>
<ul>
<li>使用 <a href="https://golang.org/doc/gdb" target="_blank" rel="external">gdb</a>和 go runtime支持</li>
<li><a href="https://golang.org/pkg/runtime/trace/" target="_blank" rel="external">go execution tracer</a></li>
<li>GODEBUG, 使用 gctrace 和 schedtrace 参数</li>
</ul>
<p>BPF tracing技术可以做更多的工作，当然它也有自己的优缺点，下面我会用一个简单的<code>hello.go</code>程序来演示这些：</p>
<figure class="highlight go"><figcaption><span>hello.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">        fmt.Println(<span class="string">"Hello, BPF!"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我会用<code>gccgo</code>先编译，然后再用 go 自己的编译器来编译 (如果你不知道它们之间的区别，请看 VonC 做的这个 <a href="http://stackoverflow.com/a/25811505" target="_blank" rel="external">总结</a>。 一句话, gccgo可以产生更加优化的二进制文件，但适用于更老版本的go)。</p>
<h3 id="函数统计_(gccgo)">函数统计 (gccgo)</h3>
<p>编译:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ gccgo -o hello hello.<span class="keyword">go</span></div><div class="line">$ ./hello</div><div class="line">Hello, BPF!</div></pre></td></tr></table></figure>

<p>现在可以使用 <a href="https://github.com/iovisor/bcc" target="_blank" rel="external">bcc</a> tool <code>funccount</code> 动态跟踪和统计所有的以<code>fmt.</code>开头的Go库函数，我同时会在另外一个终端中运行这个hello程序：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># funccount 'go:fmt.*'</span></div><div class="line">Tracing <span class="number">160</span> functions <span class="keyword">for</span> <span class="string">"go:fmt.*"</span><span class="keyword">...</span> Hit Ctrl-C to end.</div><div class="line">^C</div><div class="line">FUNC                                    COUNT</div><div class="line">fmt..import                                 <span class="number">1</span></div><div class="line">fmt.padString.pN7_fmt.fmt                   <span class="number">1</span></div><div class="line">fmt.fmt_s.pN7_fmt.fmt                       <span class="number">1</span></div><div class="line">fmt.WriteString.pN10_fmt.buffer             <span class="number">1</span></div><div class="line">fmt.free.pN6_fmt.pp                         <span class="number">1</span></div><div class="line">fmt.fmtString.pN6_fmt.pp                    <span class="number">1</span></div><div class="line">fmt.doPrint.pN6_fmt.pp                      <span class="number">1</span></div><div class="line">fmt.init.pN7_fmt.fmt                        <span class="number">1</span></div><div class="line">fmt.printArg.pN6_fmt.pp                     <span class="number">1</span></div><div class="line">fmt.WriteByte.pN10_fmt.buffer               <span class="number">1</span></div><div class="line">fmt.Println                                 <span class="number">1</span></div><div class="line">fmt.truncate.pN7_fmt.fmt                    <span class="number">1</span></div><div class="line">fmt.Fprintln                                <span class="number">1</span></div><div class="line">fmt.$nested1                                <span class="number">1</span></div><div class="line">fmt.newPrinter                              <span class="number">1</span></div><div class="line">fmt.clearflags.pN7_fmt.fmt                  <span class="number">2</span></div><div class="line">Detaching...</div></pre></td></tr></table></figure>

<p>漂亮! 输出结果中包含了<code>fmt.Println()</code>, 还有一些其它的调用。</p>
<p>实际并不需要以特定的方式运行Go程序， 你可以跟踪一个已经运行的Go程序进程，并不需要重新启动它， 怎么做呢？</p>
<ul>
<li>使用 <a href="http://www.brendangregg.com/blog/2015-06-28/linux-ftrace-uprobe.html" target="_blank" rel="external">Linux uprobes: User-Level Dynamic Tracing</a>, Linux 3.5中增加的一个功能。 它使用一个软中断重写了kernel的指令，并且当跟踪程序结束的时候会恢复进程。</li>
<li>gccgo编译的程序有一个标准的符号表，可以用来查询函数。</li>
<li>本例中使用了 <code>libgo</code>, 它包含<code>fmt</code>包。</li>
<li>uprobes可以附加到已经运行的进程上， 或者像我上面做的那样， 捕获所有使用它的进程。</li>
<li>更有效地， 我经常统计内核上下文的函数调用次数， 只将调用次数发送到用户空间。</li>
</ul>
<p>对于操作系统来讲， 这个二进制文件的信息如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>file hello</div><div class="line"><span class="symbol">hello:</span> <span class="constant">ELF</span> <span class="number">64</span>-bit <span class="constant">LSB</span> executable, x86-<span class="number">64</span>, version <span class="number">1</span> (<span class="constant">SYSV</span>), dynamically linked, interpreter /lib64/ld-linux-x86-<span class="number">64</span>.so.<span class="number">2</span>, <span class="keyword">for</span> <span class="constant">GNU</span>/<span class="constant">Linux</span> <span class="number">2.6</span>.<span class="number">32</span>, <span class="constant">BuildID</span>[sha1]=<span class="number">4</span>dc45f1eb023f44ddb32c15bbe0fb4f933e61815, <span class="keyword">not</span> stripped</div><div class="line"><span class="variable">$ </span>ls -lh hello</div><div class="line">-rwxr-xr-x <span class="number">1</span> bgregg root <span class="number">29</span>K <span class="constant">Jan</span> <span class="number">12</span> <span class="number">21</span><span class="symbol">:</span><span class="number">18</span> hello</div><div class="line"><span class="variable">$ </span>ldd hello</div><div class="line">    linux-vdso.so.<span class="number">1</span> =&gt;  (<span class="number">0x00007ffc4cb1a000</span>)</div><div class="line">    libgo.so.<span class="number">9</span> =&gt; <span class="regexp">/usr/lib</span><span class="regexp">/x86_64-linux-gnu/libgo</span>.so.<span class="number">9</span> (<span class="number">0x00007f25f2407000</span>)</div><div class="line">    libgcc_s.so.<span class="number">1</span> =&gt; <span class="regexp">/lib/x</span>86_64-linux-gnu/libgcc_s.so.<span class="number">1</span> (<span class="number">0x00007f25f21f1000</span>)</div><div class="line">    libc.so.<span class="number">6</span> =&gt; <span class="regexp">/lib/x</span>86_64-linux-gnu/libc.so.<span class="number">6</span> (<span class="number">0x00007f25f1e27000</span>)</div><div class="line">    /lib64/ld-linux-x86-<span class="number">64</span>.so.<span class="number">2</span> (<span class="number">0x0000560b44960000</span>)</div><div class="line">    libpthread.so.<span class="number">0</span> =&gt; <span class="regexp">/lib/x</span>86_64-linux-gnu/libpthread.so.<span class="number">0</span> (<span class="number">0x00007f25f1c0a000</span>)</div><div class="line">    libm.so.<span class="number">6</span> =&gt; <span class="regexp">/lib/x</span>86_64-linux-gnu/libm.so.<span class="number">6</span> (<span class="number">0x00007f25f1901000</span>)</div><div class="line"><span class="variable">$ </span>objdump -tT /usr/lib/x86_64-linux-gnu/libgo.so.<span class="number">9</span> | grep fmt.<span class="constant">Println</span></div><div class="line"><span class="number">0000000001221070</span> g     <span class="constant">O</span> .data.rel.ro   <span class="number">000000000000000</span>8              fmt.<span class="constant">Println</span><span class="variable">$descriptor</span></div><div class="line"><span class="number">0000000000</span>97809<span class="number">0</span> g     <span class="constant">F</span> .text  <span class="number">0000000000000075</span>              fmt.<span class="constant">Println</span></div><div class="line"><span class="number">0000000001221070</span> g    <span class="constant">DO</span> .data.rel.ro   <span class="number">000000000000000</span>8  <span class="constant">Base</span>        fmt.<span class="constant">Println</span><span class="variable">$descriptor</span></div><div class="line"><span class="number">0000000000</span>97809<span class="number">0</span> g    <span class="constant">DF</span> .text  <span class="number">0000000000000075</span>  <span class="constant">Base</span>        fmt.<span class="constant">Println</span></div></pre></td></tr></table></figure>

<p>看起来像编译的 C 程序， 你可以使用很多已有的调试器和跟踪器， 包括 bcc/BPF。 而且比那么即时编译的运行时比如 Java 和 Node.js更容易操作。目前唯一一点不爽的就是函数名包含一些非标准的字符， 比如本例中的&quot;.&quot; 。</p>
<p><code>funccount</code> 支持一些参数， 比如<code>-p</code>指定某个进程ID, <code>-i</code>指定输出的时间间隔。它当前只能同时支持最多1000个跟踪对象(probe), 对于<code>fmt.*</code>来说，函数不多还OK, 但是如果跟踪所有的<code>libgo</code>中的函数就有问题了:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># funccount 'go:*'</span></div><div class="line">maximum <span class="keyword">of</span> <span class="number">1000</span> probes allowed, attempted <span class="number">21178</span></div></pre></td></tr></table></figure>

<p>嗯哼， 不工作了。 就像 bcc/BPF 中其它一些问题一样， 如果这个限制在应用中阻碍太多的话我们考虑寻找一个方式来解决它。</p>
<h3 id="函数统计_(Go_gc)">函数统计 (Go gc)</h3>
<p>使用 Go gc编译器来编译:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> build hello.<span class="keyword">go</span></div><div class="line">$ ./hello</div><div class="line">Hello, BPF!</div></pre></td></tr></table></figure>

<p>统计 <code>fmt</code> 的函数调用:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># funccount '/home/bgregg/hello:fmt.*'</span></div><div class="line">Tracing <span class="number">78</span> functions <span class="keyword">for</span> <span class="string">"/home/bgregg/hello:fmt.*"</span><span class="keyword">...</span> Hit Ctrl-C to end.</div><div class="line">^C</div><div class="line">FUNC                                    COUNT</div><div class="line">fmt.init.1                                  <span class="number">1</span></div><div class="line">fmt.(*fmt).padString                        <span class="number">1</span></div><div class="line">fmt.(*fmt).truncate                         <span class="number">1</span></div><div class="line">fmt.(*fmt).fmt_s                            <span class="number">1</span></div><div class="line">fmt.newPrinter                              <span class="number">1</span></div><div class="line">fmt.(*pp).free                              <span class="number">1</span></div><div class="line">fmt.Fprintln                                <span class="number">1</span></div><div class="line">fmt.Println                                 <span class="number">1</span></div><div class="line">fmt.(*pp).fmtString                         <span class="number">1</span></div><div class="line">fmt.(*pp).printArg                          <span class="number">1</span></div><div class="line">fmt.(*pp).doPrint                           <span class="number">1</span></div><div class="line">fmt.glob.func1                              <span class="number">1</span></div><div class="line">fmt.init                                    <span class="number">1</span></div><div class="line">Detaching...</div></pre></td></tr></table></figure>

<p>你仍然可以跟踪<code>fmt.Println()</code>, 但是现在是从二进制程序中找到它， 而不是在<code>libgo</code>中， 这是因为：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="variable">$ </span>file hello</div><div class="line"><span class="symbol">hello:</span> <span class="constant">ELF</span> <span class="number">64</span>-bit <span class="constant">LSB</span> executable, x86-<span class="number">64</span>, version <span class="number">1</span> (<span class="constant">SYSV</span>), statically linked, <span class="keyword">not</span> stripped</div><div class="line"><span class="variable">$ </span>ls -lh hello</div><div class="line">-rwxr-xr-x <span class="number">1</span> bgregg root <span class="number">2.2</span>M <span class="constant">Jan</span> <span class="number">12</span> <span class="number">05</span><span class="symbol">:</span><span class="number">16</span> hello</div><div class="line"><span class="variable">$ </span>ldd hello</div><div class="line">    <span class="keyword">not</span> a dynamic executable</div><div class="line"><span class="variable">$ </span>objdump -t hello | grep fmt.<span class="constant">Println</span></div><div class="line"><span class="number">000000000045</span>a68<span class="number">0</span> g     <span class="constant">F</span> .text  <span class="number">00000000000000</span>e<span class="number">0</span> fmt.<span class="constant">Println</span></div></pre></td></tr></table></figure>

<p>它包含一个 2M的静态库， 这个库中包含<code>fmt</code>的函数。</p>
<p>另外一个不同就是函数名中包含不常见的符号: &quot;*&quot;, &quot;(&quot;等等。</p>
<h3 id="函数跟踪_(gccgo)">函数跟踪 (gccgo)</h3>
<p>这次我将尝试 Sasha Goldshtein 的跟踪工具， 也是 <a href="https://github.com/iovisor/bcc" target="_blank" rel="external">bcc</a>跟踪工具集中一个。我会使用它来观察函数的每次调用。<br>还是先使用<code>gccgo</code>来编译， 这次的简单小程序叫做 <code>functions.go</code>:</p>
<figure class="highlight go"><figcaption><span>functions.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> add(x <span class="typename">int</span>, y <span class="typename">int</span>) <span class="typename">int</span> {</div><div class="line">    <span class="keyword">return</span> x + y</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    fmt.Println(add<span class="number">(42</span>,<span class="number"> 13</span>))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>开始跟踪 <code>add()</code> 函数:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># trace <span class="string">'/home/bgregg/functions:main.add'</span></div><div class="line">PID    TID    COMM         FUNC             </div><div class="line"><span class="number">14424</span>  <span class="number">14424</span>  functions    main.<span class="built_in">add</span></div></pre></td></tr></table></figure>

<p>还可以查看它的传入的参数:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># trace <span class="string">'/home/bgregg/functions:main.add "%d %d" arg1, arg2'</span></div><div class="line">PID    TID    COMM         FUNC             -</div><div class="line"><span class="number">14390</span>  <span class="number">14390</span>  functions    main.<span class="built_in">add</span>         <span class="number">42</span> <span class="number">13</span></div></pre></td></tr></table></figure>

<p>酷，工作正常，参数显示正确。</p>
<p><code>trace</code> 还有其它的参数(使用 -h 查看), b比如时间戳、堆栈信息等。</p>
<h3 id="函数跟踪_(Go_gc)">函数跟踪 (Go gc)</h3>
<p>目前位置一切按照预想的执行。 同样的程序， 使用 <code>go gc</code>编译器来编译:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> build functions.<span class="keyword">go</span></div><div class="line"></div><div class="line"># trace <span class="string">'/home/bgregg/functions:main.add "%d %d" arg1, arg2'</span></div><div class="line">could not determine address of symbol main.<span class="built_in">add</span></div><div class="line"></div><div class="line">$ objdump -<span class="keyword">t</span> functions | <span class="keyword">grep</span> main.<span class="built_in">add</span></div><div class="line">$</div></pre></td></tr></table></figure>

<p>什么？没有<code>main.add()</code>函数？ 难道它被内联了？禁止内联：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">go</span> build -gcflags <span class="string">'-l'</span> functions.<span class="keyword">go</span></div><div class="line">$ objdump -<span class="keyword">t</span> functions | <span class="keyword">grep</span> main.<span class="built_in">add</span></div><div class="line"><span class="number">0000000000401000</span> <span class="keyword">g</span>     F .text  <span class="number">0000000000000020</span> main.<span class="built_in">add</span></div></pre></td></tr></table></figure>

<p>现在好了，虚惊一场。 跟踪这个程序和它的参数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># trace <span class="string">'/home/bgregg/functions:main.add "%d %d" arg1, arg2'</span></div><div class="line">PID    TID    COMM         FUNC             -</div><div class="line"><span class="number">16061</span>  <span class="number">16061</span>  functions    main.<span class="built_in">add</span>         <span class="number">536912504</span> <span class="number">16</span></div></pre></td></tr></table></figure>

<p>有点不对， 参数应该是 <code>42</code> 和 <code>13</code>,并不是<code>536912504</code> 和 <code>16</code>。</p>
<p>超期gdb调试:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">$ gdb ./functions</div><div class="line">[<span class="keyword">...</span>]</div><div class="line"><span class="keyword">warning</span>: File <span class="string">"/usr/share/go-1.6/src/runtime/runtime-gdb.py"</span> auto-loading has been declined</div><div class="line"> by your `auto-load safe-path' set to "$debugdir:$datadir/auto-load".</div><div class="line">[...]</div><div class="line">(gdb) b main.add</div><div class="line">Breakpoint 1 at 0x401000: file /home/bgregg/functions.go, line 6.</div><div class="line">(gdb) r</div><div class="line">Starting program: /home/bgregg/functions </div><div class="line">[New LWP 16082]</div><div class="line">[New LWP 16083]</div><div class="line">[New LWP 16084]</div><div class="line"></div><div class="line">Thread 1 "functions" hit Breakpoint 1, main.add (x=42, y=13, ~r2=4300314240) at</div><div class="line"> /home/bgregg/functions.go:6</div><div class="line">6           return x + y</div><div class="line">(gdb) i r</div><div class="line">rax            0xc820000180 859530330496</div><div class="line">rbx            0x584ea0 5787296</div><div class="line">rcx            0xc820000180 859530330496</div><div class="line">rdx            0xc82005a048 859530698824</div><div class="line">rsi            0x10 16</div><div class="line">rdi            0xc82000a2a0 859530371744</div><div class="line">rbp            0x0  0x0</div><div class="line">rsp            0xc82003fed0 0xc82003fed0</div><div class="line">r8             0x41 65</div><div class="line">r9             0x41 65</div><div class="line">r10            0x4d8ba0 5082016</div><div class="line">r11            0x0  0</div><div class="line">r12            0x10 16</div><div class="line">r13            0x52a3c4 5415876</div><div class="line">r14            0xa  10</div><div class="line">r15            0x8  8</div><div class="line">rip            0x401000 0x401000 </div><div class="line">eflags         0x206    [ PF IF ]</div><div class="line">cs             0xe033   57395</div><div class="line">ss             0xe02b   57387</div><div class="line">ds             0x0  0</div><div class="line">es             0x0  0</div><div class="line">fs             0x0  0</div><div class="line">gs             0x0  0</div></pre></td></tr></table></figure>

<p>我包含了<code>runtime-gdb.py</code>启动时的警告， 这个警告很有用：如果我想更深入到go的上下文， 我会解决这个问题。及时忽略这个问题, gdb也显示了参数的&quot;x=42, y=13&quot;.</p>
<p>我也检查了寄存器的值， bcc的trace程序也是从这些寄存器中得到的值。 从 <code>syscall(2)</code> man帮助中可以知道：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">       arch/ABI      arg1  arg2  arg3  arg4  arg5  arg6  arg7  Notes</div><div class="line">       ──────────────────────────────────────────────────────────────────</div><div class="line">[<span class="keyword">...</span>]</div><div class="line">       x86_64        rdi   rsi   rdx   r10   r8    r9    -</div></pre></td></tr></table></figure>

<p>但是 42 和 13 并没有在寄存器 rdi 或者 rsi 中， 原因在于Go gc编译器并不遵循标准的 AMD ABI 函数调用约定， 这导致这个调试器或者其它的调试器跟踪参数有问题(我以前也听过前同事抱怨过这个问题)。我猜Go需要使用一个不同的ABI来返回值， 因为它需要返回多个值。</p>
<p>我查看了 Go 汇编器的快速手册， 还有Plan 9 的汇编手册，看起来函数在栈上传递，  42 和 13在栈上:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(gdb) x/3dg $<span class="literal">rsp</span></div><div class="line"><span class="number">0xc82003fed0</span>:   <span class="number">4198477</span> <span class="number">42</span></div><div class="line"><span class="number">0xc82003fee0</span>:   <span class="number">13</span></div></pre></td></tr></table></figure>

<p>BPF也可以获取这些值， 作为验证， 我 hacked几个别名， 把这些参数叫做<code>go1</code>,<code>go2</code>：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># trace <span class="string">'/home/bgregg/functions:main.add "%d %d" go1, go2'</span></div><div class="line">PID    TID    COMM         FUNC             -</div><div class="line"><span class="number">17555</span>  <span class="number">17555</span>  functions    main.<span class="built_in">add</span>         <span class="number">42</span> <span class="number">13</span></div></pre></td></tr></table></figure>

<p>完美。希望你读到这篇文章的时候， 我(或者其他人)已经解决了这个问题，并把它加入懂啊 bcc trace工具中。 可能叫&quot;goarg1&quot;, &quot;goarg2&quot;更好。</p>
<h3 id="Interface_参数">Interface 参数</h3>
<p>下面我会演示另一个<code>fmt.Println()</code>打印字符串的例子，但这一次参数是<code>interface</code>类型。从 go 的 <code>src/fmt/print.go</code>源代码中可以看到：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> Println(a ...<span class="keyword">interface</span>{}) (n <span class="typename">int</span>, err error) {</div><div class="line">    <span class="keyword">return</span> Fprintln(os.Stdout, a...)</div></pre></td></tr></table></figure>

<p>使用gccgo编译， 然后使用 gdb 调试 你可以看到这个字符串：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">$ gdb ./hello</div><div class="line">[<span class="keyword">...</span>]</div><div class="line">(gdb) b fmt.Println</div><div class="line">Breakpoint <span class="number">1</span> at <span class="number">0x401c50</span></div><div class="line">(gdb) r</div><div class="line">Starting program: /home/bgregg/hello </div><div class="line">[Thread debugging using libthread_db enabled]</div><div class="line">Using host libthread_db <span class="keyword">library</span> <span class="string">"/lib/x86_64-linux-gnu/libthread_db.so.1"</span>.</div><div class="line">[New Thread <span class="number">0x7ffff449c700</span> (LWP <span class="number">16836</span>)]</div><div class="line">[New Thread <span class="number">0x7ffff3098700</span> (LWP <span class="number">16837</span>)]</div><div class="line">[Switching to Thread <span class="number">0x7ffff3098700</span> (LWP <span class="number">16837</span>)]</div><div class="line"></div><div class="line">Thread <span class="number">3</span> <span class="string">"hello"</span> hit Breakpoint <span class="number">1</span>, fmt.Println (a=<span class="keyword">...</span>) at ../../../src/libgo/go/fmt/print.go:<span class="number">263</span></div><div class="line"><span class="number">263</span> ../../../src/libgo/go/fmt/print.go: No such file or directory.</div><div class="line">(gdb) p a</div><div class="line">$<span class="number">1</span> = {__values = <span class="number">0xc208000240</span>, __count = <span class="number">1</span>, __capacity = <span class="number">1</span>}</div><div class="line">(gdb) p a.__values</div><div class="line">$<span class="number">18</span> = (struct {<span class="keyword">...</span>} *) <span class="number">0xc208000240</span></div><div class="line">(gdb) p a.__values[<span class="number">0</span>]</div><div class="line">$<span class="number">20</span> = {__type_descriptor = <span class="number">0x4037c0</span> &lt;__go_tdn_string&gt;, __object = <span class="number">0xc208000210</span>}</div><div class="line">(gdb) x/s *<span class="number">0xc208000210</span></div><div class="line"><span class="number">0x403483</span>:   <span class="string">"Hello, BPF!"</span></div></pre></td></tr></table></figure>

<p>可以正常查到这个字符串（我不确定是否有更容易的方式检查）。你也可以写一个定制的 bcc/BPF 程序来检查， 我们可以增加更多的别名来命名这些接口参数。</p>
<h3 id="函数耗时">函数耗时</h3>
<p>下面是一个跟踪函数耗时的简单例子：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># funclatency 'go:fmt.Println'</span></div><div class="line"><span class="constant">Tracing </span><span class="number">1</span> functions <span class="keyword">for</span> <span class="string">"go:fmt.Println"</span>... <span class="constant">Hit Ctrl-C </span>to <span class="keyword">end</span>.</div><div class="line">^<span class="constant">C</span></div><div class="line"></div><div class="line"><span class="constant">Function </span>= fmt.<span class="constant">Println </span>[<span class="number">3041</span>]</div><div class="line">     nsecs               <span class="symbol">:</span> count     distribution</div><div class="line">         <span class="number">0</span> -&gt; <span class="number">1</span>          <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">         <span class="number">2</span> -&gt; <span class="number">3</span>          <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">         <span class="number">4</span> -&gt; <span class="number">7</span>          <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">         <span class="number">8</span> -&gt; <span class="number">15</span>         <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">        <span class="number">16</span> -&gt; <span class="number">31</span>         <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">        <span class="number">32</span> -&gt; <span class="number">63</span>         <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">        <span class="number">64</span> -&gt; <span class="number">127</span>        <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">       <span class="number">128</span> -&gt; <span class="number">255</span>        <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">       <span class="number">256</span> -&gt; <span class="number">511</span>        <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">       <span class="number">512</span> -&gt; <span class="number">1023</span>       <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">      <span class="number">1024</span> -&gt; <span class="number">2047</span>       <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">      <span class="number">2048</span> -&gt; <span class="number">4095</span>       <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">      <span class="number">4096</span> -&gt; <span class="number">8191</span>       <span class="symbol">:</span> <span class="number">0</span>        |                                        |</div><div class="line">      <span class="number">8192</span> -&gt; <span class="number">16383</span>      <span class="symbol">:</span> <span class="number">27</span>       |****************************************|</div><div class="line">     <span class="number">16384</span> -&gt; <span class="number">32767</span>      <span class="symbol">:</span> <span class="number">3</span>        |****                                    |</div><div class="line"><span class="constant">Detaching.</span>..</div></pre></td></tr></table></figure>

<p>它显示了<code>fmt.Println()</code>函数耗时的直方图(单位纳秒), 我在一个循环中不停的调用这个函数。</p>
<p><strong>⚠️警告</strong>: 这里有些不幸的问题： 如果在方法调用的时候goroutine从一个操作系统线程切换到另外一个线程，<code>funclatency</code>程序并不会找匹配的返回。 我们需要一个新工具， <code>gofunclatency</code>, 使用 go的内部 <code>GOID</code> 来跟踪耗时， 而不是根据操作系统的<code>TID</code>。同时修改<code>uretprobes</code>修改Go进程可能导致Go进程崩溃， 我们需要调试和制定一个修复计划。可以查看 Suresh 的评论以了解其中的细节。</p>
<h3 id="下一步">下一步</h3>
<p>利用动态跟踪和Linux eBPF技术，使用bcc的<code>funccount</code>和<code>trace</code>工具，我们快速了解了一个新的调试Go程序的技术。有些功能非常成功，有些功能还有一些挑战。 函数调用统计工作很完美，但是跟踪gccgo编译的函数参数的时候美问题，但是跟踪Go gc编译的函数参数有些问题， 因为Go gc编译器没有遵循标准的ABI调用约定，所以这个工具需要加强。 作为概念性的验证，我修改了bcc trace工具来显示Go gc编译的函数参数，但是这个特性需要正确实现和集成。处理接口对象也是一个挑战，因为Go支持多返回值， 这些都是我们需要加强的工作，以便是这些调试和跟踪工作更容易， 就像在c中增加一些宏一样。</p>
<p>希望之后还有一个后续的文章来介绍这些bcc/BPF功能的提升(不一定是我，如果你感兴趣，请拿好接力棒)。</p>
<p>另一个重要的跟踪问题，可以在下一篇文章中介绍，就是堆栈(stack trace)。值得高兴的是， Go已经在 1.7中实现了基于 frame pointer的堆栈。</p>
<p>最后，另一个重要的可以单拉出一篇文章介绍的跟踪问题是和内核上下文一起跟踪Go函数。 BPF和bcc都可以跟踪内核函数， 和用户空间一样。可以想象我们可以创建一个新的工具来同时跟踪这两个。</p>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>BCC 是基于 BPF 的 Linux IO 分析、监控、网络工具集合。BPF Compiler Collection (BCC) 是创建高效内核追踪和处理程序的工具包，包含几个有用的工具和用例。BCC 扩展了 BPF (Berkeley Packet Filters) 的用途，BPF 之前被称为 eBPF，是 Linux 3.15 新增的一个新特性。BCC 大部分的功能都要求 Linux 4.1+。</p>
</blockquote>
<p>本文翻译自性能分析大牛<a href="http://www.brendangregg.com/index.html" target="_blank" rel="external">Brendan Gregg</a>的 2017年中旬的一篇文章: <a href="http://www.brendangregg.com/blog/2017-01-31/golang-bcc-bpf-function-tracing.html" target="_blank" rel="external">Golang bcc/BPF Function Tracing</a>, 介绍如何使用最新的工具更加深入的分析Go程序。</p>
]]>
    
    </summary>
    
      <category term="bbc" scheme="http://colobu.com/tags/bbc/"/>
    
      <category term="trace" scheme="http://colobu.com/tags/trace/"/>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用配置文件格式]]></title>
    <link href="http://colobu.com/2017/08/31/configuration-file-format/"/>
    <id>http://colobu.com/2017/08/31/configuration-file-format/</id>
    <published>2017-08-31T02:24:17.000Z</published>
    <updated>2017-09-01T16:28:31.706Z</updated>
    <content type="html"><![CDATA[<p>配置文件是工程中常用的初始化参数的配置方式，而配置文件的格式有很多种，不同的操作系统、编程语言都会有不同的配置文件的格式，本文罗列了一些常见的配置文件的格式。</p>
<p>不同的配置文件格式有不同的用户友好性， 对于功能的支持也有简单和复杂之分，很难简单说那种配置文件是最好的，有时候需要从多个方面去考虑， 比如Windows较早的开发喜欢使用<code>int</code>、java喜欢使用<code>properties</code>、通用的编程喜欢<code>yaml</code>、<code>json</code>等格式，本文也不会对这些格式进行排名，而是简单介绍一下这些格式，用户可以根据自己的实际情况进行选择。</p>
<a id="more"></a>
<h3 id="ini">ini</h3>
<p>ini文件是一个无固定标准格式的配置文件。它以简单的文字与简单的结构组成，常常使用在Windows操作系统。ini文件的命名来源，是取自英文“初始（Initial）”的首字缩写，正与它的用途——初始化程序相应。</p>
<p>文件格式比较简单， 分为 <code>节</code>、<code>参数</code>、<code>注释</code>。下面是一个简单的ini配置文件：</p>
<figure class="highlight ini"><figcaption><span>https://github.com/Microsoft/Windows-driver-samples/blob/master/print/v4PrintDriverSamples/v4PrintDriver-HostBasedSampleDriver/usb_host_based_sample-manifest.ini</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="title">[DriverConfig]</span></div><div class="line"><span class="setting">DriverCategory=<span class="value">PrintFax.Printer</span></span></div><div class="line"><span class="setting">DataFile=<span class="value">usb_host_based_sample.gpd</span></span></div><div class="line"></div><div class="line"><span class="comment">; Note: Please replace the GUID below when building a production driver.</span></div><div class="line"><span class="setting">PrinterDriverID=<span class="value">{<span class="number">00000000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">000000000000</span>}</span></span></div><div class="line"><span class="setting">Flags=<span class="value">HostBasedDevice</span></span></div><div class="line"><span class="setting">EventFile=<span class="value">usb_host_based_sample_events.xml</span></span></div><div class="line"><span class="setting">RequiredFiles=<span class="value">UNIRES.DLL,STDNAMES.GPD,MSXPSINC.GPD</span></span></div><div class="line"></div><div class="line"><span class="title">[BidiFiles]</span></div><div class="line"><span class="setting">BidiUSBFile=<span class="value">usb_host_based_sample_extension.xml</span></span></div><div class="line"><span class="setting">BidiUSBJSFile=<span class="value">usb_host_based_sample.js</span></span></div></pre></td></tr></table></figure>

<h3 id="properties">properties</h3>
<p>properties是一种主要在Java相关技术中用来存储应用程序的可配置参数的文件的文件扩展名。它们也可以存储用于国际化和本地化的字符串，这种文件被称为属性资源包（Property Resource Bundles）。<br>每个参数被存储为一对字符串：一个存储名称参数（被称为“键”），另一个存储值。</p>
<p>每个properties 文件中的行通常存储单个属性。对于每一行可能有这么几种格式，包括键=值，键 = 值，键:值，以及键 值。<br>.properties文件可以使用井号（#）或叹号（!）作为一行中第一个非空白字符来表示它后面的所有文本都是一个注释。反斜杠（\）用于转义字符。下面是一个properties文件：</p>
<figure class="highlight properties"><figcaption><span>https://github.com/netgloo/spring-boot-samples/blob/master/spring-boot-mysql-springdatajpa-hibernate/src/main/resources/application.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># ===============================</div><div class="line"># = DATA SOURCE</div><div class="line"># ===============================</div><div class="line"></div><div class="line"># <span class="operator"><span class="keyword">Set</span> here configurations <span class="keyword">for</span> the <span class="keyword">database</span> <span class="keyword">connection</span></span></div><div class="line"></div><div class="line"># <span class="keyword">Connection</span> url <span class="keyword">for</span> the <span class="keyword">database</span> <span class="string">"netgloo_blog"</span></div><div class="line">spring.datasource.url = jdbc:mysql://localhost:<span class="number">3306</span>/netgloo_blog?useSSL=<span class="literal">false</span></div><div class="line"></div><div class="line"># Username <span class="keyword">and</span> <span class="keyword">password</span></div><div class="line">spring.datasource.username = root</div><div class="line">spring.datasource.<span class="keyword">password</span> = root</div><div class="line"></div><div class="line"># Keep the <span class="keyword">connection</span> alive <span class="keyword">if</span> idle <span class="keyword">for</span> a long <span class="keyword">time</span> (needed <span class="keyword">in</span> production)</div><div class="line">spring.datasource.testWhileIdle = <span class="literal">true</span></div><div class="line">spring.datasource.validationQuery = <span class="keyword">SELECT</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<h3 id="json">json</h3>
<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。<br>JSON 数据格式与语言无关，脱胎于 JavaScript，但目前很多编程语言都支持 JSON 格式数据的生成和解析, 所以也常常用作配置文件。</p>
<p>JSON用于描述数据结构，有以下形式存在。</p>
<ul>
<li>对象（object）：一个对象以<code>{</code>开始，并以<code>}</code>结束。一个对象包含一系列非排序的名称／值对，每个名称／值对之间使用<code>,</code>分区</li>
<li>名称／值（collection）：名称和值之间使用<code>：</code>隔开，一般的形式是：<code>{name:value}</code></li>
<li>值的有序列表（Array）：一个或者多个值用,分区后，使用<code>[，]</code>括起来就形成了这样的列表</li>
<li>字符串：以&quot;&quot;括起来的一串字符。</li>
<li>数值：一系列0-9的数字组合，可以为负数或者小数。还可以用e或者E表示为指数形式。</li>
<li>布尔值：表示为true或者false。</li>
</ul>
<p>JSON的格式描述可以参考RFC 4627。</p>
<p>下面是一个json配置文件的例子:</p>
<figure class="highlight json"><figcaption><span>https://github.com/hashicorp/vault/blob/master/command/server/test-fixtures/config.hcl.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	"<span class="attribute">listener</span>": <span class="value">[{</span></div><div class="line">		"<span class="attribute">tcp</span>": <span class="value">{</span></div><div class="line">			"<span class="attribute">address</span>": <span class="value"><span class="string">"127.0.0.1:443"</span></span></div><div class="line">		}</div><div class="line">	}],</div><div class="line">	"<span class="attribute">cluster_cipher_suites</span>": <span class="value"><span class="string">"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"</span></span>,</div><div class="line">	"<span class="attribute">storage</span>": <span class="value">{</span></div><div class="line">		"<span class="attribute">consul</span>": <span class="value">{</span></div><div class="line">			"<span class="attribute">foo</span>": <span class="value"><span class="string">"bar"</span></span>,</div><div class="line">			"<span class="attribute">disable_clustering</span>": <span class="value"><span class="string">"true"</span></span></div><div class="line">		}</div><div class="line">	},</div><div class="line">	"<span class="attribute">telemetry</span>": <span class="value">{</span></div><div class="line">		"<span class="attribute">statsite_address</span>": <span class="value"><span class="string">"baz"</span></span></div><div class="line">	},</div><div class="line">	"<span class="attribute">max_lease_ttl</span>": <span class="value"><span class="string">"10h"</span></span>,</div><div class="line">	"<span class="attribute">default_lease_ttl</span>": <span class="value"><span class="string">"10h"</span></span>,</div><div class="line">	"<span class="attribute">cluster_name</span>":<span class="value"><span class="string">"testcluster"</span></span>,</div><div class="line">	"<span class="attribute">ui</span>":<span class="value"><span class="literal">true</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="xml">xml</h3>
<p>xml是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。<br>XML是从1995年开始有其雏形，并向W3C（万维网联盟）提案，而在1998年二月发布为W3C的标准（XML1.0）。</p>
<p>XML设计用来传送及携带数据信息，所以也经常用来做配置文件。</p>
<p>xml实例:</p>
<figure class="highlight xml"><figcaption><span>https://github.com/kpavlov/spring-cloud-config-sample/blob/master/src/main/resources/spring-config.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"</span></span></div><div class="line">    ${config.uri}/company.properties,</div><div class="line">    classpath:product.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/common.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/${config.stage}/stage.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/${config.stage}/${config.node}/node.properties"</div><div class="line">                                  <span class="attribute">system-properties-mode</span>=<span class="value">"FALLBACK"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"spring"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="yaml">yaml</h3>
<p>YAML（/ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达数据序列的格式。Clark Evans在2001年首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。目前已经有数种编程语言或脚本语言支持（或者说解析）这种语言。</p>
<p>YAML是&quot;YAML Ain&#39;t a Markup Language&quot;（YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言，但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重命名。</p>
<p>YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色， 比较适合用来表达层次结构式的数据结构。</p>
<p>YAML 1.2 是 JSON 格式的<a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="external">超集</a>。</p>
<figure class="highlight yaml"><figcaption><span>https://github.com/prometheus/prometheus/blob/master/config/testdata/conf.good.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># my global config</div><div class="line">global:</div><div class="line">  scrape_interval:     15s</div><div class="line">  evaluation_interval: 30s</div><div class="line">  # scrape_timeout is set to the global default (10s).</div><div class="line"></div><div class="line">  external_labels:</div><div class="line">    monitor: codelab</div><div class="line">    foo:     bar</div><div class="line"></div><div class="line">rule_files:</div><div class="line">-<span class="ruby"> <span class="string">"first.rules"</span></span></div><div class="line">-<span class="ruby"> <span class="string">"my/*.rules"</span></span></div><div class="line"></div><div class="line">remote_write:</div><div class="line">  -<span class="ruby"> <span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/remote1/push</span></span></div><div class="line">    write_relabel_configs:</div><div class="line">    -<span class="ruby"> <span class="symbol">source_labels:</span> [__name_<span class="number">_</span>]</span></div><div class="line">      regex:         expensive.*</div><div class="line">      action:        drop</div><div class="line">  -<span class="ruby"> <span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/remote2/push</span></span></div></pre></td></tr></table></figure>

<h3 id="toml_https://zh-wikipedia-org/wiki/TOML">toml <a href="https://zh.wikipedia.org/wiki/TOML" target="_blank" rel="external">https://zh.wikipedia.org/wiki/TOML</a></h3>
<p>TOML是一种旨在成为一个小规模、易于使用的语义化的配置文件格式，它被设计为可以无二义性的转换为一个哈希表。<br>“TOML”这个名字是“Tom&#39;s Obvious, Minimal Language（汤姆的浅显的、极简的语言）”的首字母略写词。“Tom”指它的作者Tom Preston-Werner。<br>TOML已在一些软件工程中使用，并且可在很多程序语言中执行。</p>
<p>TOML的语法广泛地由<code>key = &quot;value&quot;</code>、<code>[节名]</code>与<code>#注释</code>构成。<br>它支持以下数据类型：字符串、整形、浮点型、布尔型、日期时间、数组和图表。</p>
<figure class="highlight toml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a TOML document.</span></div><div class="line"></div><div class="line"><span class="variable">title =</span> <span class="string">"TOML Example"</span></div><div class="line"></div><div class="line">[owner]</div><div class="line"><span class="variable">name =</span> <span class="string">"Tom Preston-Werner"</span></div><div class="line"><span class="variable">dob =</span> <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span> <span class="comment"># First class dates</span></div><div class="line"></div><div class="line">[database]</div><div class="line"><span class="variable">server =</span> <span class="string">"192.168.1.1"</span></div><div class="line"><span class="variable">ports =</span> [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</div><div class="line"><span class="variable">connection_max =</span> <span class="number">5000</span></div><div class="line"><span class="variable">enabled =</span> <span class="constant">true</span></div><div class="line"></div><div class="line">[servers]</div><div class="line"></div><div class="line">  <span class="comment"># Indentation (tabs and/or spaces) is allowed but not required</span></div><div class="line">  [servers.alpha]</div><div class="line">  <span class="variable">ip =</span> <span class="string">"10.0.0.1"</span></div><div class="line">  <span class="variable">dc =</span> <span class="string">"eqdc10"</span></div><div class="line"></div><div class="line">  [servers.beta]</div><div class="line">  <span class="variable">ip =</span> <span class="string">"10.0.0.2"</span></div><div class="line">  <span class="variable">dc =</span> <span class="string">"eqdc10"</span></div><div class="line"></div><div class="line">[clients]</div><div class="line"><span class="variable">data =</span> [ [<span class="string">"gamma"</span>, <span class="string">"delta"</span>], [<span class="number">1</span>, <span class="number">2</span>] ]</div><div class="line"></div><div class="line"><span class="comment"># Line breaks are OK when inside arrays</span></div><div class="line"><span class="variable">hosts =</span> [</div><div class="line">  <span class="string">"alpha"</span>,</div><div class="line">  <span class="string">"omega"</span></div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="HOCON">HOCON</h3>
<p>HOCON，全称Human-Optimized Config Object Notation（人性化配置对象表示法）是一种人类可读的数据格式，并是JSON和properties的一个超集。它由Lightbend(用Scala开发的人都知道)开发，主要与Play框架结合使用。它也在Puppet中作为配置格式使用。</p>
<p>基本上也算是Scala官方开发，所以在Scala的一些项目中得到使用。由于它是JSON和properties格式的超集，所以它的格式比较灵活。</p>
<p>格式定义可以参考官方文档： <a href="https://github.com/typesafehub/config/blob/master/HOCON.md" target="_blank" rel="external">HOCON</a>。</p>
<p>下面是它的一个实例：</p>
<figure class="highlight json"><figcaption><span>https://github.com/marcospereira/play-i18n-hocon/blob/master/samples/scala/conf/application.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">play.http.secret.key = "changeme"</div><div class="line"></div><div class="line">play.modules {</div><div class="line">  # Disable built-in i18n module</div><div class="line">  disabled += play.api.i18n.I18nModule</div><div class="line"></div><div class="line">  # Enable Hocon module</div><div class="line">  enabled += com.marcospereira.play.i18n.HoconI18nModule</div><div class="line">}</div><div class="line"></div><div class="line">play.i18n {</div><div class="line">  langs = [ "en" ]</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="plist">plist</h3>
<p>在OS X的Cocoa，NeXTSTEP和GNUstep编程框架中，属性列表（Property List）文件是一种用来存储序列化后的对象的文件。属性列表文件的文件扩展名为.plist，因此通常被称为plist文件。<br>Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息，该功能在旧式的Mac OS中是由资源分支提供的。</p>
<figure class="highlight plist"><figcaption><span>https://github.com/wahlmanj/com.plex.pms.plist/blob/master/com.plex.pms.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" </span></div><div class="line">    "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="title">plist</span> <span class="attribute">version</span>=<span class="value">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>com.plex.pms<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>/Applications/Plex\ Media\ Server.app/Contents/MacOS/Plex\ Media\ Server<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>UserName<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>__USERNAME__<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>/Applications<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>ServiceDescription<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>PMS<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plist</span>&gt;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>配置文件是工程中常用的初始化参数的配置方式，而配置文件的格式有很多种，不同的操作系统、编程语言都会有不同的配置文件的格式，本文罗列了一些常见的配置文件的格式。</p>
<p>不同的配置文件格式有不同的用户友好性， 对于功能的支持也有简单和复杂之分，很难简单说那种配置文件是最好的，有时候需要从多个方面去考虑， 比如Windows较早的开发喜欢使用<code>int</code>、java喜欢使用<code>properties</code>、通用的编程喜欢<code>yaml</code>、<code>json</code>等格式，本文也不会对这些格式进行排名，而是简单介绍一下这些格式，用户可以根据自己的实际情况进行选择。</p>
]]>
    
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
