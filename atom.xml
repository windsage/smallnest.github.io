<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[鸟窝]]></title>
  <subtitle><![CDATA[大道至简 Simplicity is the ultimate form of sophistication]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://colobu.com/"/>
  <updated>2017-09-01T16:45:40.366Z</updated>
  <id>http://colobu.com/</id>
  
  <author>
    <name><![CDATA[smallnest]]></name>
    
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[常用配置文件格式]]></title>
    <link href="http://colobu.com/2017/08/31/configuration-file-format/"/>
    <id>http://colobu.com/2017/08/31/configuration-file-format/</id>
    <published>2017-08-31T02:24:17.000Z</published>
    <updated>2017-09-01T16:28:31.706Z</updated>
    <content type="html"><![CDATA[<p>配置文件是工程中常用的初始化参数的配置方式，而配置文件的格式有很多种，不同的操作系统、编程语言都会有不同的配置文件的格式，本文罗列了一些常见的配置文件的格式。</p>
<p>不同的配置文件格式有不同的用户友好性， 对于功能的支持也有简单和复杂之分，很难简单说那种配置文件是最好的，有时候需要从多个方面去考虑， 比如Windows较早的开发喜欢使用<code>int</code>、java喜欢使用<code>properties</code>、通用的编程喜欢<code>yaml</code>、<code>json</code>等格式，本文也不会对这些格式进行排名，而是简单介绍一下这些格式，用户可以根据自己的实际情况进行选择。</p>
<a id="more"></a>
<h3 id="ini">ini</h3>
<p>ini文件是一个无固定标准格式的配置文件。它以简单的文字与简单的结构组成，常常使用在Windows操作系统。ini文件的命名来源，是取自英文“初始（Initial）”的首字缩写，正与它的用途——初始化程序相应。</p>
<p>文件格式比较简单， 分为 <code>节</code>、<code>参数</code>、<code>注释</code>。下面是一个简单的ini配置文件：</p>
<figure class="highlight ini"><figcaption><span>https://github.com/Microsoft/Windows-driver-samples/blob/master/print/v4PrintDriverSamples/v4PrintDriver-HostBasedSampleDriver/usb_host_based_sample-manifest.ini</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="title">[DriverConfig]</span></div><div class="line"><span class="setting">DriverCategory=<span class="value">PrintFax.Printer</span></span></div><div class="line"><span class="setting">DataFile=<span class="value">usb_host_based_sample.gpd</span></span></div><div class="line"></div><div class="line"><span class="comment">; Note: Please replace the GUID below when building a production driver.</span></div><div class="line"><span class="setting">PrinterDriverID=<span class="value">{<span class="number">00000000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">0000</span>-<span class="number">000000000000</span>}</span></span></div><div class="line"><span class="setting">Flags=<span class="value">HostBasedDevice</span></span></div><div class="line"><span class="setting">EventFile=<span class="value">usb_host_based_sample_events.xml</span></span></div><div class="line"><span class="setting">RequiredFiles=<span class="value">UNIRES.DLL,STDNAMES.GPD,MSXPSINC.GPD</span></span></div><div class="line"></div><div class="line"><span class="title">[BidiFiles]</span></div><div class="line"><span class="setting">BidiUSBFile=<span class="value">usb_host_based_sample_extension.xml</span></span></div><div class="line"><span class="setting">BidiUSBJSFile=<span class="value">usb_host_based_sample.js</span></span></div></pre></td></tr></table></figure>

<h3 id="properties">properties</h3>
<p>properties是一种主要在Java相关技术中用来存储应用程序的可配置参数的文件的文件扩展名。它们也可以存储用于国际化和本地化的字符串，这种文件被称为属性资源包（Property Resource Bundles）。<br>每个参数被存储为一对字符串：一个存储名称参数（被称为“键”），另一个存储值。</p>
<p>每个properties 文件中的行通常存储单个属性。对于每一行可能有这么几种格式，包括键=值，键 = 值，键:值，以及键 值。<br>.properties文件可以使用井号（#）或叹号（!）作为一行中第一个非空白字符来表示它后面的所有文本都是一个注释。反斜杠（\）用于转义字符。下面是一个properties文件：</p>
<figure class="highlight properties"><figcaption><span>https://github.com/netgloo/spring-boot-samples/blob/master/spring-boot-mysql-springdatajpa-hibernate/src/main/resources/application.properties</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"># ===============================</div><div class="line"># = DATA SOURCE</div><div class="line"># ===============================</div><div class="line"></div><div class="line"># <span class="operator"><span class="keyword">Set</span> here configurations <span class="keyword">for</span> the <span class="keyword">database</span> <span class="keyword">connection</span></span></div><div class="line"></div><div class="line"># <span class="keyword">Connection</span> url <span class="keyword">for</span> the <span class="keyword">database</span> <span class="string">"netgloo_blog"</span></div><div class="line">spring.datasource.url = jdbc:mysql://localhost:<span class="number">3306</span>/netgloo_blog?useSSL=<span class="literal">false</span></div><div class="line"></div><div class="line"># Username <span class="keyword">and</span> <span class="keyword">password</span></div><div class="line">spring.datasource.username = root</div><div class="line">spring.datasource.<span class="keyword">password</span> = root</div><div class="line"></div><div class="line"># Keep the <span class="keyword">connection</span> alive <span class="keyword">if</span> idle <span class="keyword">for</span> a long <span class="keyword">time</span> (needed <span class="keyword">in</span> production)</div><div class="line">spring.datasource.testWhileIdle = <span class="literal">true</span></div><div class="line">spring.datasource.validationQuery = <span class="keyword">SELECT</span> <span class="number">1</span></div></pre></td></tr></table></figure>

<h3 id="json">json</h3>
<p>JSON（JavaScript Object Notation）是一种轻量级的数据交换语言，以文字为基础，且易于让人阅读。尽管JSON是Javascript的一个子集，但JSON是独立于语言的文本格式，并且采用了类似于C语言家族的一些习惯。<br>JSON 数据格式与语言无关，脱胎于 JavaScript，但目前很多编程语言都支持 JSON 格式数据的生成和解析, 所以也常常用作配置文件。</p>
<p>JSON用于描述数据结构，有以下形式存在。</p>
<ul>
<li>对象（object）：一个对象以<code>{</code>开始，并以<code>}</code>结束。一个对象包含一系列非排序的名称／值对，每个名称／值对之间使用<code>,</code>分区</li>
<li>名称／值（collection）：名称和值之间使用<code>：</code>隔开，一般的形式是：<code>{name:value}</code></li>
<li>值的有序列表（Array）：一个或者多个值用,分区后，使用<code>[，]</code>括起来就形成了这样的列表</li>
<li>字符串：以&quot;&quot;括起来的一串字符。</li>
<li>数值：一系列0-9的数字组合，可以为负数或者小数。还可以用e或者E表示为指数形式。</li>
<li>布尔值：表示为true或者false。</li>
</ul>
<p>JSON的格式描述可以参考RFC 4627。</p>
<p>下面是一个json配置文件的例子:</p>
<figure class="highlight json"><figcaption><span>https://github.com/hashicorp/vault/blob/master/command/server/test-fixtures/config.hcl.json</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">{</div><div class="line">	"<span class="attribute">listener</span>": <span class="value">[{</span></div><div class="line">		"<span class="attribute">tcp</span>": <span class="value">{</span></div><div class="line">			"<span class="attribute">address</span>": <span class="value"><span class="string">"127.0.0.1:443"</span></span></div><div class="line">		}</div><div class="line">	}],</div><div class="line">	"<span class="attribute">cluster_cipher_suites</span>": <span class="value"><span class="string">"TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"</span></span>,</div><div class="line">	"<span class="attribute">storage</span>": <span class="value">{</span></div><div class="line">		"<span class="attribute">consul</span>": <span class="value">{</span></div><div class="line">			"<span class="attribute">foo</span>": <span class="value"><span class="string">"bar"</span></span>,</div><div class="line">			"<span class="attribute">disable_clustering</span>": <span class="value"><span class="string">"true"</span></span></div><div class="line">		}</div><div class="line">	},</div><div class="line">	"<span class="attribute">telemetry</span>": <span class="value">{</span></div><div class="line">		"<span class="attribute">statsite_address</span>": <span class="value"><span class="string">"baz"</span></span></div><div class="line">	},</div><div class="line">	"<span class="attribute">max_lease_ttl</span>": <span class="value"><span class="string">"10h"</span></span>,</div><div class="line">	"<span class="attribute">default_lease_ttl</span>": <span class="value"><span class="string">"10h"</span></span>,</div><div class="line">	"<span class="attribute">cluster_name</span>":<span class="value"><span class="string">"testcluster"</span></span>,</div><div class="line">	"<span class="attribute">ui</span>":<span class="value"><span class="literal">true</span></span></div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="xml">xml</h3>
<p>xml是一种标记语言。标记指计算机所能理解的信息符号，通过此种标记，计算机之间可以处理包含各种信息的文章等。<br>XML是从1995年开始有其雏形，并向W3C（万维网联盟）提案，而在1998年二月发布为W3C的标准（XML1.0）。</p>
<p>XML设计用来传送及携带数据信息，所以也经常用来做配置文件。</p>
<p>xml实例:</p>
<figure class="highlight xml"><figcaption><span>https://github.com/kpavlov/spring-cloud-config-sample/blob/master/src/main/resources/spring-config.xml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">beans</span> <span class="attribute">xmlns</span>=<span class="value">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attribute">xmlns:xsi</span>=<span class="value">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attribute">xmlns:context</span>=<span class="value">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attribute">xsi:schemaLocation</span>=<span class="value">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd"</span>&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:property-placeholder</span> <span class="attribute">location</span>=<span class="value">"</span></span></div><div class="line">    ${config.uri}/company.properties,</div><div class="line">    classpath:product.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/common.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/${config.stage}/stage.properties,</div><div class="line">    ${config.uri}/${product.name}/${product.version}/${config.stage}/${config.node}/node.properties"</div><div class="line">                                  <span class="attribute">system-properties-mode</span>=<span class="value">"FALLBACK"</span>/&gt;</div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:annotation-config</span>/&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="title">context:component-scan</span> <span class="attribute">base-package</span>=<span class="value">"spring"</span>/&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="title">beans</span>&gt;</span></div></pre></td></tr></table></figure>

<h3 id="yaml">yaml</h3>
<p>YAML（/ˈjæməl/，尾音类似camel骆驼）是一个可读性高，用来表达数据序列的格式。Clark Evans在2001年首次发表了这种语言，另外Ingy döt Net与Oren Ben-Kiki也是这语言的共同设计者。目前已经有数种编程语言或脚本语言支持（或者说解析）这种语言。</p>
<p>YAML是&quot;YAML Ain&#39;t a Markup Language&quot;（YAML不是一种标记语言）的递归缩写。在开发的这种语言时，YAML 的意思其实是：&quot;Yet Another Markup Language&quot;（仍是一种标记语言，但为了强调这种语言以数据做为中心，而不是以标记语言为重点，而用反向缩略语重命名。</p>
<p>YAML的语法和其他高级语言类似，并且可以简单表达清单、散列表，标量等数据形态。它使用空白符号缩进和大量依赖外观的特色， 比较适合用来表达层次结构式的数据结构。</p>
<p>YAML 1.2 是 JSON 格式的<a href="http://www.yaml.org/spec/1.2/spec.html" target="_blank" rel="external">超集</a>。</p>
<figure class="highlight yaml"><figcaption><span>https://github.com/prometheus/prometheus/blob/master/config/testdata/conf.good.yml</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"># my global config</div><div class="line">global:</div><div class="line">  scrape_interval:     15s</div><div class="line">  evaluation_interval: 30s</div><div class="line">  # scrape_timeout is set to the global default (10s).</div><div class="line"></div><div class="line">  external_labels:</div><div class="line">    monitor: codelab</div><div class="line">    foo:     bar</div><div class="line"></div><div class="line">rule_files:</div><div class="line">-<span class="ruby"> <span class="string">"first.rules"</span></span></div><div class="line">-<span class="ruby"> <span class="string">"my/*.rules"</span></span></div><div class="line"></div><div class="line">remote_write:</div><div class="line">  -<span class="ruby"> <span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/remote1/push</span></span></div><div class="line">    write_relabel_configs:</div><div class="line">    -<span class="ruby"> <span class="symbol">source_labels:</span> [__name_<span class="number">_</span>]</span></div><div class="line">      regex:         expensive.*</div><div class="line">      action:        drop</div><div class="line">  -<span class="ruby"> <span class="symbol">url:</span> <span class="symbol">http:</span>/<span class="regexp">/remote2/push</span></span></div></pre></td></tr></table></figure>

<h3 id="toml_https://zh-wikipedia-org/wiki/TOML">toml <a href="https://zh.wikipedia.org/wiki/TOML" target="_blank" rel="external">https://zh.wikipedia.org/wiki/TOML</a></h3>
<p>TOML是一种旨在成为一个小规模、易于使用的语义化的配置文件格式，它被设计为可以无二义性的转换为一个哈希表。<br>“TOML”这个名字是“Tom&#39;s Obvious, Minimal Language（汤姆的浅显的、极简的语言）”的首字母略写词。“Tom”指它的作者Tom Preston-Werner。<br>TOML已在一些软件工程中使用，并且可在很多程序语言中执行。</p>
<p>TOML的语法广泛地由<code>key = &quot;value&quot;</code>、<code>[节名]</code>与<code>#注释</code>构成。<br>它支持以下数据类型：字符串、整形、浮点型、布尔型、日期时间、数组和图表。</p>
<figure class="highlight toml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># This is a TOML document.</span></div><div class="line"></div><div class="line"><span class="variable">title =</span> <span class="string">"TOML Example"</span></div><div class="line"></div><div class="line">[owner]</div><div class="line"><span class="variable">name =</span> <span class="string">"Tom Preston-Werner"</span></div><div class="line"><span class="variable">dob =</span> <span class="number">1979</span>-<span class="number">05</span>-<span class="number">27</span>T07:<span class="number">32</span>:<span class="number">00</span>-<span class="number">08</span>:<span class="number">00</span> <span class="comment"># First class dates</span></div><div class="line"></div><div class="line">[database]</div><div class="line"><span class="variable">server =</span> <span class="string">"192.168.1.1"</span></div><div class="line"><span class="variable">ports =</span> [ <span class="number">8001</span>, <span class="number">8001</span>, <span class="number">8002</span> ]</div><div class="line"><span class="variable">connection_max =</span> <span class="number">5000</span></div><div class="line"><span class="variable">enabled =</span> <span class="constant">true</span></div><div class="line"></div><div class="line">[servers]</div><div class="line"></div><div class="line">  <span class="comment"># Indentation (tabs and/or spaces) is allowed but not required</span></div><div class="line">  [servers.alpha]</div><div class="line">  <span class="variable">ip =</span> <span class="string">"10.0.0.1"</span></div><div class="line">  <span class="variable">dc =</span> <span class="string">"eqdc10"</span></div><div class="line"></div><div class="line">  [servers.beta]</div><div class="line">  <span class="variable">ip =</span> <span class="string">"10.0.0.2"</span></div><div class="line">  <span class="variable">dc =</span> <span class="string">"eqdc10"</span></div><div class="line"></div><div class="line">[clients]</div><div class="line"><span class="variable">data =</span> [ [<span class="string">"gamma"</span>, <span class="string">"delta"</span>], [<span class="number">1</span>, <span class="number">2</span>] ]</div><div class="line"></div><div class="line"><span class="comment"># Line breaks are OK when inside arrays</span></div><div class="line"><span class="variable">hosts =</span> [</div><div class="line">  <span class="string">"alpha"</span>,</div><div class="line">  <span class="string">"omega"</span></div><div class="line">]</div></pre></td></tr></table></figure>

<h3 id="HOCON">HOCON</h3>
<p>HOCON，全称Human-Optimized Config Object Notation（人性化配置对象表示法）是一种人类可读的数据格式，并是JSON和properties的一个超集。它由Lightbend(用Scala开发的人都知道)开发，主要与Play框架结合使用。它也在Puppet中作为配置格式使用。</p>
<p>基本上也算是Scala官方开发，所以在Scala的一些项目中得到使用。由于它是JSON和properties格式的超集，所以它的格式比较灵活。</p>
<p>格式定义可以参考官方文档： <a href="https://github.com/typesafehub/config/blob/master/HOCON.md" target="_blank" rel="external">HOCON</a>。</p>
<p>下面是它的一个实例：</p>
<figure class="highlight json"><figcaption><span>https://github.com/marcospereira/play-i18n-hocon/blob/master/samples/scala/conf/application.conf</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">play.http.secret.key = "changeme"</div><div class="line"></div><div class="line">play.modules {</div><div class="line">  # Disable built-in i18n module</div><div class="line">  disabled += play.api.i18n.I18nModule</div><div class="line"></div><div class="line">  # Enable Hocon module</div><div class="line">  enabled += com.marcospereira.play.i18n.HoconI18nModule</div><div class="line">}</div><div class="line"></div><div class="line">play.i18n {</div><div class="line">  langs = [ "en" ]</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="plist">plist</h3>
<p>在OS X的Cocoa，NeXTSTEP和GNUstep编程框架中，属性列表（Property List）文件是一种用来存储序列化后的对象的文件。属性列表文件的文件扩展名为.plist，因此通常被称为plist文件。<br>Plist文件通常用于储存用户设置，也可以用于存储捆绑的信息，该功能在旧式的Mac OS中是由资源分支提供的。</p>
<figure class="highlight plist"><figcaption><span>https://github.com/wahlmanj/com.plex.pms.plist/blob/master/com.plex.pms.plist</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="pi">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></div><div class="line"><span class="doctype">&lt;!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" </span></div><div class="line">    "http://www.apple.com/DTDs/PropertyList-1.0.dtd"&gt;</div><div class="line"><span class="tag">&lt;<span class="title">plist</span> <span class="attribute">version</span>=<span class="value">"1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>Label<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>com.plex.pms<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>KeepAlive<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>ProgramArguments<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>/Applications/Plex\ Media\ Server.app/Contents/MacOS/Plex\ Media\ Server<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>RunAtLoad<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">true</span>/&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>UserName<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>__USERNAME__<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>WorkingDirectory<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>/Applications<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">key</span>&gt;</span>ServiceDescription<span class="tag">&lt;/<span class="title">key</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="title">string</span>&gt;</span>PMS<span class="tag">&lt;/<span class="title">string</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">dict</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="title">plist</span>&gt;</span></div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>配置文件是工程中常用的初始化参数的配置方式，而配置文件的格式有很多种，不同的操作系统、编程语言都会有不同的配置文件的格式，本文罗列了一些常见的配置文件的格式。</p>
<p>不同的配置文件格式有不同的用户友好性， 对于功能的支持也有简单和复杂之分，很难简单说那种配置文件是最好的，有时候需要从多个方面去考虑， 比如Windows较早的开发喜欢使用<code>int</code>、java喜欢使用<code>properties</code>、通用的编程喜欢<code>yaml</code>、<code>json</code>等格式，本文也不会对这些格式进行排名，而是简单介绍一下这些格式，用户可以根据自己的实际情况进行选择。</p>
]]>
    
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go Plugin的一个bug]]></title>
    <link href="http://colobu.com/2017/08/26/panic-on-go-plugin-Open-for-different-plugins/"/>
    <id>http://colobu.com/2017/08/26/panic-on-go-plugin-Open-for-different-plugins/</id>
    <published>2017-08-26T15:14:04.000Z</published>
    <updated>2017-08-26T16:27:35.556Z</updated>
    <content type="html"><![CDATA[<p>Go 1.8中增加了 <a href="https://golang.org/pkg/plugin/" target="_blank" rel="external">plugin</a> package,但是仅支持Linux操作系统，并且还有一些已知的bug。可以说，这个插件系统的实现还未达到&quot;产品级&quot;的水平。</p>
<blockquote>
<p>The plugin support is currently incomplete, only supports Linux, and has known bugs.</p>
</blockquote>
<p>一些已知的bug已经推到 Go1.10甚至以后的版本中修复了。</p>
<p>今天在测试Go 1.9中的功能的时候就遇到了plugin的一个bug。</p>
<a id="more"></a>
<p>按照官方的文档, 开发一个插件很简单：</p>
<figure class="highlight go"><figcaption><span>plugin1/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> V <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> F() { fmt.Printf(<span class="string">"Hello, number %d\n"</span>, V) }</div></pre></td></tr></table></figure>

<p>插件中定义了变量<code>V</code>和方法<code>F</code>，可以通过下面的命令生成一个<code>so</code>文件：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build -buildmode=plugin -o ../p1.so main.go</div></pre></td></tr></table></figure>

<p>然后通过<code>plugin</code>包可以加载插件：</p>
<figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">p, err := plugin.Open(<span class="string">"p1.so"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	<span class="built_in">panic</span>(err)</div><div class="line">}</div><div class="line">v, err := p.Lookup(<span class="string">"V"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	<span class="built_in">panic</span>(err)</div><div class="line">}</div><div class="line">f, err := p.Lookup(<span class="string">"F"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	<span class="built_in">panic</span>(err)</div><div class="line">}</div><div class="line">*v.(*<span class="typename">int</span>) =<span class="number"> 7</span></div><div class="line">f.(<span class="keyword">func</span>())() <span class="comment">// prints "Hello, number 7"</span></div></pre></td></tr></table></figure>

<p>当然作为插件系统，我们希望可以加载新的插件，来替换已有的插件， 如果你复制<code>p1.so</code>为<code>p2.so</code>,然后上上面的测试代码中再加载<code>p2.so</code>会报错：</p>
<figure class="highlight go"><figcaption><span>main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">p, err := plugin.Open(<span class="string">"p1.so"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	<span class="built_in">panic</span>(err)</div><div class="line">}</div><div class="line"></div><div class="line">......</div><div class="line"></div><div class="line">p, err = plugin.Open(<span class="string">"p2.so"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	<span class="built_in">panic</span>(err)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>错误信息如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span></div><div class="line">Hello, number<span class="number"> 7</span></div><div class="line">plugin: plugin plugin/unnamed-f0c47a2a99a0d8e8fb40defabb50f238c78f5d58 already loaded</div><div class="line">fatal error: plugin: plugin already loaded</div><div class="line">......</div></pre></td></tr></table></figure>

<p>这一步我们还能理解，相同的plugin即使文件名更改了，加载进去还是一样的，所以会报<code>plugin already loaded</code>错误。</p>
<p>我们将<code>plugin1/main.go</code>中的代码<strong>稍微改一下</strong>：</p>
<figure class="highlight go"><figcaption><span>plugin1/main.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> V <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> F() { fmt.Printf(<span class="string">"Hello world,  %d\n"</span>, V) }</div></pre></td></tr></table></figure>

<p>然后生成插件<code>p2.so</code>：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build -buildmode=plugin -o ../p2.so main.go</div></pre></td></tr></table></figure>

<p>按说这次我们修改了代码，生成了一个新的插件，如果代码同时加载这两个插件，因为没什么问题，但是运行上面的加载两个插件的测试代码，发现还是出错：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">go <span class="command">run</span> main.go</div><div class="line">Hello, <span class="type">number</span> <span class="number">7</span></div><div class="line">plugin: plugin plugin/unnamed-f0c47a2a99a0d8e8fb40defabb50f238c78f5d58 already loaded</div><div class="line">fatal <span class="keyword">error</span>: plugin: plugin already loaded</div><div class="line">......</div></pre></td></tr></table></figure>

<p>怪异吧，两个不同代码的生成插件，居然被认为是同一个插件（plugin/unnamed-f0c47a2a99a0d8e8fb40defabb50f238c78f5d58）。</p>
<p>使用<code>nm</code>查看两个插件的符号表：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">[root@colobu t]<span class="comment"># nm p1.so |grep unname</span></div><div class="line"><span class="number">00000000001</span>acfc0 R go.link.pkghashbytes.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58</div><div class="line"><span class="number">00000000003</span>f9620 D go.link.pkghash.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58</div><div class="line"><span class="number">0000000000199080</span> t local.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.F</div><div class="line"><span class="number">0000000000199130</span> t local.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.init</div><div class="line"><span class="number">0000000000199080</span> T plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.F</div><div class="line"><span class="number">0000000000199130</span> T plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.init</div><div class="line"><span class="number">000000000048</span>e027 B plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.initdone·</div><div class="line"><span class="number">000000000048</span>e088 B plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.V</div><div class="line">[root@colobu t]<span class="comment">#</span></div><div class="line">[root@colobu t]<span class="comment">#</span></div><div class="line">[root@colobu t]<span class="comment"># nm p2.so |grep unname</span></div><div class="line"><span class="number">00000000001</span>acfc0 R go.link.pkghashbytes.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58</div><div class="line"><span class="number">00000000003</span>f9620 D go.link.pkghash.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58</div><div class="line"><span class="number">0000000000199080</span> t local.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.F</div><div class="line"><span class="number">0000000000199130</span> t local.plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.init</div><div class="line"><span class="number">0000000000199080</span> T plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.F</div><div class="line"><span class="number">0000000000199130</span> T plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.init</div><div class="line"><span class="number">000000000048</span>e027 B plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.initdone·</div><div class="line"><span class="number">000000000048</span>e088 B plugin/unnamed<span class="operator">-f</span>0c47a2a99a0d8e8fb40defabb50f238c78f5d58.V</div><div class="line">[root@colobu t]<span class="comment">#</span></div></pre></td></tr></table></figure>

<p>可以看到两个插件中生成的符号表符号表是相同的，所以被误认为了同一个插件。</p>
<p>这种情况是在特殊情况下产生的，如果两个插件的文件名不同，或者引用包不同，或者引用的cgo不同，则会生成不同的插件，同时加载不会有问题。但是如果文件名相同，相关的引用也相同，则可能生成相同的插件，尽管插件内包含的方法和变量不同，实现也不同。</p>
<p>这是Go plugin生成的时候一个bug: <a href="https://github.com/golang/go/issues/19358" target="_blank" rel="external">issue#19358</a>, 期望在Go 1.10中解决，目前的解决办法就是插件的go文件使用不同的名字，或者编译的时候指定<code>pluginpath</code>:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">go build -ldflags <span class="string">"-pluginpath=p1"</span>-buildmode=plugin -o ../p1.so main.go</div><div class="line">go build -ldflags <span class="string">"-pluginpath=p2"</span>-buildmode=plugin -o ../p2.so main.go</div></pre></td></tr></table></figure>

<p>导致问题的原因正如  LionNatsu 在bug中指出的， Go 判断两个插件是否相同是通过比较<a href="https://github.com/golang/go/blob/0efc8b21881ab35fdb45547088b1935fc8ebf263/src/runtime/plugin.go#L23" target="_blank" rel="external">pluginpath</a>实现的，如果你在编译的时候指定了不同的<code>pluginpath</code>，则编译出来的插件是不同的，但是如果没有指定<code>pluginpath</code>，则由内部的算法生成, <a href="https://github.com/golang/go/blob/f8b0231639859de7b8f1bfe7df1be0132aec9ad6/src/cmd/go/internal/work/build.go#L2426" target="_blank" rel="external">生成</a>的格式为<code>plugin/unnamed-&quot; + root.Package.Internal.BuildID</code> 。</p>
<p><a href="https://github.com/golang/go/blob/be04da8f0c5cb57e2736cfac8c76971d7d8cfc6f/src/cmd/go/internal/load/pkg.go#L1621" target="_blank" rel="external">func computeBuildID(p *Package)</a> 生成一个SHA-1的哈希值作为BuildID。</p>
<figure class="highlight go"><figcaption><span>go/src/cmd/go/internal/load/pkg.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> computeBuildID(p *Package) {</div><div class="line">	h := sha1.New()</div><div class="line"></div><div class="line">	<span class="comment">// Include the list of files compiled as part of the package.</span></div><div class="line">	<span class="comment">// This lets us detect removed files. See issue 3895.</span></div><div class="line">	inputFiles := str.StringList(</div><div class="line">		p.GoFiles,</div><div class="line">		p.CgoFiles,</div><div class="line">		p.CFiles,</div><div class="line">		p.CXXFiles,</div><div class="line">		p.MFiles,</div><div class="line">		p.HFiles,</div><div class="line">		p.SFiles,</div><div class="line">		p.SysoFiles,</div><div class="line">		p.SwigFiles,</div><div class="line">		p.SwigCXXFiles,</div><div class="line">	)</div><div class="line">	<span class="keyword">for</span> _, file := <span class="keyword">range</span> inputFiles {</div><div class="line">		fmt.Fprintf(h, <span class="string">"file %s\n"</span>, file)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Include the content of runtime/internal/sys/zversion.go in the hash</span></div><div class="line">	<span class="comment">// for package runtime. This will give package runtime a</span></div><div class="line">	<span class="comment">// different build ID in each Go release.</span></div><div class="line">	<span class="keyword">if</span> p.Standard && p.ImportPath == <span class="string">"runtime/internal/sys"</span> && cfg.BuildContext.Compiler != <span class="string">"gccgo"</span> {</div><div class="line">		data, err := ioutil.ReadFile(filepath.Join(p.Dir, <span class="string">"zversion.go"</span>))</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			base.Fatalf(<span class="string">"go: %s"</span>, err)</div><div class="line">		}</div><div class="line">		fmt.Fprintf(h, <span class="string">"zversion %q\n"</span>, <span class="typename">string</span>(data))</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// Include the build IDs of any dependencies in the hash.</span></div><div class="line">	<span class="comment">// This, combined with the runtime/zversion content,</span></div><div class="line">	<span class="comment">// will cause packages to have different build IDs when</span></div><div class="line">	<span class="comment">// compiled with different Go releases.</span></div><div class="line">	<span class="comment">// This helps the go command know to recompile when</span></div><div class="line">	<span class="comment">// people use the same GOPATH but switch between</span></div><div class="line">	<span class="comment">// different Go releases. See issue 10702.</span></div><div class="line">	<span class="comment">// This is also a better fix for issue 8290.</span></div><div class="line">	<span class="keyword">for</span> _, p1 := <span class="keyword">range</span> p.Internal.Deps {</div><div class="line">		fmt.Fprintf(h, <span class="string">"dep %s %s\n"</span>, p1.ImportPath, p1.Internal.BuildID)</div><div class="line">	}</div><div class="line"></div><div class="line">	p.Internal.BuildID = fmt.Sprintf(<span class="string">"%x"</span>, h.Sum(<span class="constant">nil</span>))</div><div class="line">}</div></pre></td></tr></table></figure>

<p>函数的后半部分为Go不同的版本生成不同的哈希，避免用户使用不同的Go版本生成相同的ID。重点看前半部分，可以发现计算哈希的时候只依赖文件名，并不关心文件的内容，这也是我们前面稍微修改一下插件的代码会生成相同的原因， 如果你在代码中<code>import _ &quot;fmt&quot;</code>也会产生不同的插件。</p>
<p>总之，在Go 1.10之前，为了避免插件冲突， 最好是在编译的时候指定<code>pluginpath</code>, 比如：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">go build -ldflags <span class="string">"-pluginpath=plugin/hot-<span class="variable">$(date +%s)</span>"</span> -buildmode=plugin -o hotload.so hotload.go</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>Go 1.8中增加了 <a href="https://golang.org/pkg/plugin/" target="_blank" rel="external">plugin</a> package,但是仅支持Linux操作系统，并且还有一些已知的bug。可以说，这个插件系统的实现还未达到&quot;产品级&quot;的水平。</p>
<blockquote>
<p>The plugin support is currently incomplete, only supports Linux, and has known bugs.</p>
</blockquote>
<p>一些已知的bug已经推到 Go1.10甚至以后的版本中修复了。</p>
<p>今天在测试Go 1.9中的功能的时候就遇到了plugin的一个bug。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]设计一个容错的微服务架构]]></title>
    <link href="http://colobu.com/2017/08/23/Designing-a-Microservices-Architecture-for-Failure/"/>
    <id>http://colobu.com/2017/08/23/Designing-a-Microservices-Architecture-for-Failure/</id>
    <published>2017-08-23T05:31:10.000Z</published>
    <updated>2017-08-26T15:12:26.227Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://blog.risingstack.com/designing-microservices-architecture-for-failure/" target="_blank" rel="external">Designing a Microservices Architecture for Failure</a><br>翻译: <a href="https://github.com/jasonGeng88/blog" target="_blank" rel="external">设计一个容错的微服务架构</a> by Jason Geng</p>
<p>微服务架构使得可以通过明确定义的服务边界来隔离故障。但是像在每个分布式系统中一样，发生网络、硬件、应用级别的错误都是很常见的。由于服务依赖关系，任何组件可能暂时无法提供服务。为了尽量减少部分中断的影响，我们需要构建容错服务，来优雅地处理这些中断的响应结果。</p>
<p>本文介绍了基于<a href="https://risingstack.com/" target="_blank" rel="external">RisingStack 的 Node.js 咨询和开发经验</a>构建和操作高可用性微服务系统的最常见技术和架构模式。</p>
<p>如果你不熟悉本文中的模式，那并不一定意味着你做错了。建立可靠的系统总是会带来额外的成本。</p>
<a id="more"></a>
<h2 id="微服务架构的风险">微服务架构的风险</h2>
<p>微服务架构将应用程序逻辑移动到服务，并使用网络层在它们之间进行通信。这种通过网络间通信代替单应用程序内调用的做法，会带来额外的延迟，以及需要协调多个物理和逻辑组件的系统复杂度。分布式系统的复杂性增加也将导致更高的网络故障率。</p>
<blockquote>
<p>microservices allow you to achieve graceful service degradation as components can be set up to fail separately.</p>
</blockquote>
<p>微服务体系结构的最大优势之一是，团队可以独立设计，开发和部署他们的服务。他们对服务的生命周期拥有完全的所有权。这也意味着团队无法控制他们依赖的服务，因为它更有可能由不同的团队管理。使用微服务架构，我们需要记住，提供者服务可能会临时不可用，由于其他人员发行的错误版本，配置以及其他更改等。</p>
<h2 id="优雅的服务降级">优雅的服务降级</h2>
<p>微服务架构的最大优点之一是您可以隔离故障，并在当组件单独故障时，进行优雅的服务降级。 例如，在中断期间，照片共享应用程序中的客户可能无法上传新图片，但仍可以浏览，编辑和共享其现有照片。</p>
<p><img src="microservices-fail-separately-in-theory.png" alt="微服务容错隔离"></p>
<p>在大多数情况下，由于分布式系统中的应用程序相互依赖，因此很难实现这种优雅的服务降级，您需要应用几种故障转移的逻辑（其中一些将在本文后面介绍），以为暂时的故障和中断做准备。</p>
<p><img src="Microservices-depend-on-each-other.png" alt="服务间彼此依赖，再没有故障转移逻辑下，服务全部失败。"></p>
<h2 id="变更管理">变更管理</h2>
<p>Google的网站可靠性小组发现，<strong>大约70％的中断是由现有系统的变化引起的</strong>。当您更改服务中的某些内容时，您将部署新版本的代码或更改某些配置 - 这总有可能会造成故障，或者引入新的bug。</p>
<p>在微服务架构中，服务依赖于彼此。这就是为什么你应该尽量减少故障并限制它的负面影响。要处理变更中的问题，您可以实施变更管理策略和<strong>自动回滚</strong>机制。</p>
<p>例如，当您部署新代码或更改某些配置时，您应该先小范围的进行部分的替换，以渐进式的方式替换服务的全部实例。在这期间，需要监视它们，如果您发现它们对您的关键指标有负面影响，应立即进行服务回滚，这称为“金丝雀部署”。</p>
<p><img src="microservices-change-management.png" alt="变更管理 - 回滚部署"></p>
<p>另一个解决方案可能是您运行两个生产环境。您始终只能部署其中一个，并且在验证新版本是否符合预期之后才，将负载均衡器指向新的。这称为蓝绿或红黑部署。</p>
<p><strong>回滚代码不是坏事</strong>。你不应该在生产中遗留错误的代码，然后考虑出了什么问题。如果必要，越早回滚你的代码越好。</p>
<h2 id="健康检查与负载均衡">健康检查与负载均衡</h2>
<p>实例由于出现故障、部署或自动缩放的情况，会进行持续启动、重新启动或停止操作。它可能导致它们暂时或永久不可用。为避免问题，您的负载均衡器应该从路由中<strong>跳过不健康的实例</strong>，因为它们当前无法为客户或子系统提供服务。</p>
<p>应用实例健康状况可以通过外部观察来确定。您可以通过重复调用<strong>GET /health</strong>端点或通过自我报告来实现。现在主流的<strong>服务发现</strong>解决方案，会持续从实例中收集健康信息，并配置负载均衡器，将流量仅路由到健康的组件上。</p>
<h2 id="自我修复">自我修复</h2>
<p>自我修复可以帮助应用程序从错误中恢复过来。当应用程序可以<strong>采取必要步骤</strong>从故障状态恢复时，我们就可以说它是可以实现自我修复的。在大多数情况下，它由外部系统实现，该系统会监视实例运行状况，并在较长时间内处于故障状态时重新启动它们。自我修复在大多数情况下是非常有用的。但是在某些情况下，持续地重启应用程序可能会<strong>导致麻烦</strong>。 当您的应用程序由于超负荷或其数据库连接超时而无法给出健康的运行状况时，这种情况下的频繁的重启就可能就不太合适了。</p>
<p>对于这种特殊的场景（如丢失的数据库连接），要实现满足它的高级自我修复的解决方案可能很棘手。在这种情况下，您需要为应用程序添加额外的逻辑来处理边缘情况，并让外部系统知道实例不需要立即重新启动。</p>
<h2 id="故障转移缓存">故障转移缓存</h2>
<p>由于网络问题和我们系统的变化，服务经常会失败。然而，由于自我修复和负载均衡的保障，它们中的大多数中断是临时的，我们应该找到一个解决方案，使我们的服务在这些故障时服务仍就可以工作。这就是<strong>故障转移缓存</strong> (failover caching)的作用，它可以帮助并为我们的应用程序在服务故障时提供必要的数据。</p>
<p>故障转移缓存通常使用<strong>两个不同的过期日期</strong>; 较短的时间告诉您在正常情况下缓存可以使用的过期时间，而较长的时间可以在服务故障时缓存依旧可用的过期时间。</p>
<p><img src="microservices-failover-caching.png" alt="故障转移缓存"></p>
<p>请务必提及，只有当服务使用过时的数据比没有数据更好时，才能使用故障转移缓存。</p>
<p>要设置缓存和故障转移缓存，可以在 HTTP 中使用标准响应头。</p>
<p>例如，使用 <code>max-age</code> 属性可以指定资源被视为有效的最大时间。使用 <code>stale-if-error</code> 属性，您可以明确在出现故障的情况下，依旧可以从缓存中获取资源的最大时间。</p>
<p>现代的 CDN 和负载均衡器都提供各种缓存和故障转移行为，但您也可以为拥有标准可靠性解决方案的公司创建一个共享库。</p>
<h2 id="重试逻辑">重试逻辑</h2>
<p>在某些情况下，我们无法缓存数据，或者我们想对其进行更改，但是我们的操作最终都失败了。对于此，我们可以重试我们的操作，因为我们可以预期资源将在一段时间后恢复，或者我们的负载均衡器将请求发送到了健康的实例上。</p>
<p>您应该小心地为您的应用程序和客户端添加重试逻辑，因为大量的<strong>重试可能会使事情更糟</strong>，甚至阻止应用程序恢复，如当服务超载时，大量的重试只能使状况更糟。</p>
<p>在分布式系统中，微服务系统重试可以触发多个其他请求或重试，并启动<strong>级联效应</strong>。为了最小化重试的影响，您应该限制它们的数量，并使用指数退避算法来持续增加重试之间的延迟，直到达到最大限制。</p>
<p>当客户端（浏览器，其他微服务等）发起重试，并且客户端不知道在处理请求之前或之后操作失败时，您应该为你的应用程序做好<strong>幂等处理</strong>的准备。例如，当您重试购买操作时，您不应该再次向客户收取费用。为每个交易使用唯一的<strong>幂等值键</strong>可以帮助处理重试。</p>
<h2 id="限流器和负载降级">限流器和负载降级</h2>
<p>流量限制是在一段时间内定义特定客户或应用程序可以接收或处理多少个请求的技术。例如，通过流量限制，您可以过滤掉造成流量峰值的客户和服务，或者您可以确保您的应用程序在自动缩放无法满足时，依然不会超载。</p>
<p>您还可以阻止较低优先级的流量，为关键事务提供足够的资源。</p>
<p><img src="microservices-rate-limiter.png" alt="限流器可以阻止流量峰值产生"></p>
<p>有一个不同类型的限流器，叫做并发请求限制器。当您有重要的端点，您不应该被调用超过指定的次数，而您仍然想要能提供服务时，这将是有用的。</p>
<p>负载降级的一系列使用，可以确保总是有足够的资源来提供关键交易。它为高优先级请求保留一些资源，不允许低优先级的事务使用它们。负载降级开关是根据系统的整体状态做出决定，而不是基于单个用户的请求量大小。负载降级有助于您的系统恢复，因为当你有一个偶发事件时（可能是一个热点事件），您仍能保持核心功能的正常工作。</p>
<p>要了解有关限流器和负载降级的更多信息，我建议查看这篇<a href="https://stripe.com/blog/rate-limiters" target="_blank" rel="external">Stripe的文章</a>。</p>
<h2 id="快速失败原则与独立性">快速失败原则与独立性</h2>
<p>在微服务架构中，我们想要做到让我们的服务具备快速失败与相互独立的能力。为了在服务级别上进行故障隔离，我们可以使用舱壁模式。你可以在本文的后面阅读更多有关舱壁的内容。</p>
<p>我们也希望我们的组件能够快速失败，因为我们不希望对于有故障的服务，在请求超时后才断开。没有什么比挂起的请求和无响应的 UI 更令人失望。这不仅浪费资源，而且还会影响用户体验。我们的服务在调用链中是相互调用的，所以在这些延迟累加之前，我们应该特别注意防止挂起操作。</p>
<p>你想到的第一个想法是对每个服务调用都设置明确的超时等级。这种方法的问题是，您不能知道真正合理的超时值是多少，因为网络故障和其他问题发生的某些情况只会影响一两次操作。在这种情况下，如果只有其中一些超时，您可能不想拒绝这些请求。</p>
<p>我们可以说，在微服务种通过使用超时来达到快速失败的效果是一种反模式的，你应该避免使用它。取而代之，您可以应用断路器模式，依据操作的成功与失败统计数据决定。</p>
<h2 id="舱壁模式">舱壁模式</h2>
<p>工业中使用舱壁将船舶划分为几个部分，以便在船体破坏的情况下，可以将船舶各个部件密封起来。</p>
<p>舱壁的概念在软件开发中可以被应用在隔离资源上。</p>
<p>通过应用舱壁模式，我们可以保护有限的资源不被耗尽。例如，对于一个有连接数限制的数据库实例来说，如果我们有两种连接它的操作，我们采用可以采用两个连接池的方式进行连接，来代替仅采用一个共享连接池的方式。由于这种客户端与资源进行了隔离，超时或过度使用池的操作页不会使其他操作失败。</p>
<p>泰坦尼克号沉没的主要原因之一是其舱壁设计失败，水可以通过上面的甲板倒在舱壁的顶部，导致整个船体淹没。</p>
<p><img src="titanic-bulkhead-microservices.png" alt="泰坦尼克号舱壁设计（无效的设计）"></p>
<h2 id="断路器">断路器</h2>
<p>为了限制操作的持续时间，我们可以使用超时。超时可以防止挂起操作并保持系统响应。然而，在微服务中使用静态、精细的超时是一种反模式，因为我们处于高度动态的环境中，几乎不可能提出在每种情况下都能正常工作的正确的时间限制。</p>
<p>替代这种静态超时的手段是，我们可以使用断路器来处理错误。断路器以现实世界的电子元件命名，因为它们的作用是相同的。您可以保护资源，并帮助他们使用断路器进行恢复。它们在分布式系统中非常有用，因为在分布式系统中，重复故障可能导致雪球效应并使整个系统瘫痪。</p>
<p>当特定类型的错误在短时间内多次发生时，断路器会被断开。开路的断路器可以防止进一步的请求 - 就像我们平时所说的电路跳闸一样。断路器通常在一定时间后关闭，在这期间可以为底层服务提供足够的空间来恢复。</p>
<p>请记住，并不是所有的错误都应该触发断路器。例如，您可能希望跳过客户端问题，例如具有4xx响应代码的请求，但不包括5xx服务器端故障。一些断路器也具有半开状态。在这种状态下，服务发送第一个请求以检查系统可用性，同时让其他请求失败。如果这个第一个请求成功，它将使断路器恢复到关闭状态并使流量流动。否则，它保持打开。</p>
<p><img src="microservices-circuit-breakers.png" alt="断路器"></p>
<h2 id="测试故障">测试故障</h2>
<p>您应该不断测试您系统的常见问题，以确保您的服务可以抵抗各种故障。您应经常测试故障，让您的团队具备故障处理的能力。</p>
<p>对于测试，您可以使用外部服务来标识实例组，并随机终止此组中的一个实例。这样，您可以准备单个实例故障，但您甚至可以关闭整个区域来模拟云提供商的故障。</p>
<p>最流行的测试解决方案之一是 Netflix 的 <a href="https://github.com/Netflix/chaosmonkey" target="_blank" rel="external">ChaosMonkey 弹性工具</a>。</p>
<h2 id="结尾">结尾</h2>
<p>实施和运行可靠的服务并不容易。 您需要付出很多努力，同时公司也要有相应的财力投入。</p>
<p>可靠性有很多层次和方面，因此找到最适合您团队的解决方案很重要。您应该使可靠性成为您的业务决策流程中的一个因素，并为其分配足够的预算和时间。</p>
<h2 id="关键点">关键点</h2>
<ul>
<li>动态环境和分布式系统（如微服务）会导致更高的故障机率；</li>
<li>服务应该做到故障隔离，到达优雅降级，来提升用户体验；</li>
<li>70％的中断是由变化引起的，代码回滚不是一件坏事；</li>
<li>做到服务快速失败与独立性。团队是无法控制他们所依赖的服务情况；</li>
<li>缓存、舱壁、断路器和限流器等架构模式与技术有助于构建可靠的微服务架构。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://blog.risingstack.com/designing-microservices-architecture-for-failure/" target="_blank" rel="external">Designing a Microservices Architecture for Failure</a><br>翻译: <a href="https://github.com/jasonGeng88/blog" target="_blank" rel="external">设计一个容错的微服务架构</a> by Jason Geng</p>
<p>微服务架构使得可以通过明确定义的服务边界来隔离故障。但是像在每个分布式系统中一样，发生网络、硬件、应用级别的错误都是很常见的。由于服务依赖关系，任何组件可能暂时无法提供服务。为了尽量减少部分中断的影响，我们需要构建容错服务，来优雅地处理这些中断的响应结果。</p>
<p>本文介绍了基于<a href="https://risingstack.com/" target="_blank" rel="external">RisingStack 的 Node.js 咨询和开发经验</a>构建和操作高可用性微服务系统的最常见技术和架构模式。</p>
<p>如果你不熟悉本文中的模式，那并不一定意味着你做错了。建立可靠的系统总是会带来额外的成本。</p>
]]>
    
    </summary>
    
      <category term="架构" scheme="http://colobu.com/categories/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[再谈谈获取 goroutine id 的方法]]></title>
    <link href="http://colobu.com/2017/08/04/talk-about-getting-goroutine-id-again/"/>
    <id>http://colobu.com/2017/08/04/talk-about-getting-goroutine-id-again/</id>
    <published>2017-08-04T03:38:05.000Z</published>
    <updated>2017-08-04T12:45:37.604Z</updated>
    <content type="html"><![CDATA[<p>去年年初的时候曾经写过一篇关于如何获取goroutine id的方法： <a href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/" target="_blank" rel="external">如何得到goroutine 的 id?</a>, 当时调研了一些一些获取goid的方法。基本的方法有三种：</p>
<ol>
<li>通过Stack信息解析出ID</li>
<li>通过汇编获取<code>runtime·getg</code>方法的调用结果</li>
<li>直接修改运行时的代码，export一个可以外部调用的GoID()方法</li>
</ol>
<p>每个方式都有些问题， #1比较慢， #2因为是hack的方式(Go team并不想暴露go id的信息), 针对不同的Go版本中需要特殊的hack手段， #3需要定制Go运行时，不通用。当时的<a href="https://github.com/petermattis/goid" target="_blank" rel="external">petermattis/goid</a>提供了 #2 的方法， 但是只能在 go 1.3中才起作用，所以只能选择#1的方式获取go id。</p>
<p>最近一年来， petermattis更新了他的代码，逐步增加了对 Go 1.4、1.5、1.6、1.7、1.8、1.9的支持，同时也提供了#1的方法，在#2方法不起作用的时候作为备选，所以我们可以在当前的所有的版本中可以使用stable的获取go id的方法了。</p>
<a id="more"></a>
<p>你或许会遇到一些需要使用Go ID的场景， 比如在多goroutine长时间运行任务的时候，我们通过日志来跟踪任务的执行情况，可以通过go id来大致地跟踪程序并发执行的时候的状况。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"log"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/petermattis/goid"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 10</span>; i++ {</div><div class="line">		<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">			<span class="keyword">for</span> j :=<span class="number"> 0</span>; j &lt;<span class="number"> 1000000</span>; j++ {</div><div class="line">				log.Printf(<span class="string">"[#%d] %d"</span>, goid.Get(), j)</div><div class="line">				time.Sleep<span class="number">(10e9</span>)</div><div class="line">			}</div><div class="line">		}()</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">select</span> {}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>依照Go代码中的文档<a href="https://golang.org/src/runtime/HACKING.md" target="_blank" rel="external">HACKING</a>, go运行时中实现了一个<code>getg()</code>方法，可以获取当前的goroutine：</p>
<blockquote>
<p><code>getg()</code> alone returns the current <code>g</code></p>
</blockquote>
<p>当然这个方法是内部方法，不是exported,不能被外部的调用，而且返回的数据结构也是未exported的。如果有办法暴露出这个方法，问题就解决了。</p>
<p><a href="https://github.com/petermattis/goid" target="_blank" rel="external">petermattis/goid</a> 模仿<code>runtime.getg</code>暴露出一个<code>getg</code>的方法</p>
<figure class="highlight asm"><figcaption><span>https://github.com/petermattis/goid/blob/master/goid_go1.5plus.s</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// +build amd64 amd64p32</div><div class="line">// +build go1<span class="string">.5</span></div><div class="line"></div><div class="line">#include <span class="string">"textflag.h"</span></div><div class="line"></div><div class="line">// func getg() uintptr</div><div class="line">TEXT ·getg(SB),<span class="preprocessor">NOSPLIT</span>,<span class="number">$0</span>-<span class="number">8</span></div><div class="line">	<span class="keyword">MOVQ</span> (TLS), <span class="number">BX</span></div><div class="line">	<span class="keyword">MOVQ</span> <span class="number">BX</span>, <span class="keyword">ret</span>+<span class="number">0</span>(FP)</div><div class="line">	<span class="keyword">RET</span></div></pre></td></tr></table></figure>

<p>上面的代码实际是将当前的goroutine的结构体的指针(TLS)返回。</p>
<blockquote>
<p>参考： <a href="https://blog.altoros.com/golang-internals-part-3-the-linker-and-object-files.html" target="_blank" rel="external">Golang Internals</a> 以及中文翻译 <a href="http://blog.jobbole.com/92371/" target="_blank" rel="external">Go语言内幕</a><br>TLS 其实是线程本地存储 （Thread Local Storage ）的缩写。这个技术在很多编程语言中都有用到（请参考这里）。简单地说，它为每个线程提供了一个这样的变量，不同变量用于指向不同的内存区域。</p>
<p>在 Go 语言中，TLS 存储了一个 G 结构体的指针。这个指针所指向的结构体包括 Go 例程的内部细节（后面会详细谈到这些内容）。因此，当在不同的例程中访问该变量时，实际访问的是该例程相应的变量所指向的结构体。链接器知道这个变量所在的位置，前面的指令中移动到 CX 寄存器的就是这个变量。对于 AMD64，TLS 是用 FS 寄存器来实现的， 所在我们前面看到的命令实际上可以翻译为 MOVQ FS, CX。</p>
</blockquote>
<p>不同的Go版本获取的数据结构可能是不同的，所以<code>petermattis/goid</code>针对1.5、1.6、1.9有变动的版本定制了不同的数据结构，因为我们只需要得到goroutine的ID,所以只需实现：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> Get() <span class="typename">int64</span> {</div><div class="line">	gg := (*g)(unsafe.Pointer(getg()))</div><div class="line">	<span class="keyword">return</span> gg.goid</div><div class="line">}</div></pre></td></tr></table></figure>

<p>我比较了一下#1和#2这两种实现方式的性能，差距还是非常大的:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> pkg</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"runtime"</span></div><div class="line">	<span class="string">"testing"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/petermattis/goid"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> BenchmarkASM(b *testing.B) {</div><div class="line">	b.ReportAllocs()</div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; b.N; i++ {</div><div class="line">		goid.Get()</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> BenchmarkSlow(b *testing.B) {</div><div class="line">	b.ReportAllocs()</div><div class="line">	<span class="keyword">var</span> buf <span class="number">[64</span>]<span class="typename">byte</span></div><div class="line">	b.ResetTimer()</div><div class="line">	<span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt; b.N; i++ {</div><div class="line">		goid.ExtractGID(buf[:runtime.Stack(buf[:], <span class="constant">false</span>)])</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>性能比较结果:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">BenchmarkASM-4    	300000000	         3.70 ns/op	       0 B/op	       0 allocs/op</div><div class="line">BenchmarkSlow-4   	  300000	      4071 ns/op	       1 B/op	       1 allocs/op</div></pre></td></tr></table></figure>

<p>一千多倍的差距。</p>
<p><code>petermattis/goid</code>这种hack的方式可以暴露更多的运行时的细节，比如我们可以扩展一下，得到当前哪个<code>m</code>正在运行，甚至可以得到当前的线程的信息：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> m <span class="keyword">struct</span> {</div><div class="line">	g0        *g</div><div class="line">	morebuf   gobuf</div><div class="line">	divmod    <span class="typename">uint32</span></div><div class="line">	procid    <span class="typename">uint64</span></div><div class="line">	gsignal   *g</div><div class="line">	sigmask   sigset</div><div class="line">	tls       <span class="number">[6</span>]<span class="typename">uintptr</span></div><div class="line">	mstartfn  <span class="keyword">func</span>()</div><div class="line">	curg      *g</div><div class="line">	caughtsig <span class="typename">uintptr</span></div><div class="line">	p         <span class="typename">uintptr</span></div><div class="line">	nextp     <span class="typename">uintptr</span></div><div class="line">	id        <span class="typename">int32</span></div><div class="line">}</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">func</span> GetM() <span class="typename">int32</span> {</div><div class="line">	gg := (*g)(unsafe.Pointer(getg()))</div><div class="line">	m := (*m)(unsafe.Pointer(gg.m))</div><div class="line">	<span class="keyword">return</span> m.id</div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>sigset</code>在不同的平台的大小是不一样的，可以参考<a href="https://github.com/golang/go/tree/master/src/runtime" target="_blank" rel="external">os_*.go</a>中各平台的定义。上面是得到<code>m</code>的ID, 更全的<code>m</code>的结构定义海包括<code>thread</code>等信息。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>去年年初的时候曾经写过一篇关于如何获取goroutine id的方法： <a href="http://colobu.com/2016/04/01/how-to-get-goroutine-id/" target="_blank" rel="external">如何得到goroutine 的 id?</a>, 当时调研了一些一些获取goid的方法。基本的方法有三种：</p>
<ol>
<li>通过Stack信息解析出ID</li>
<li>通过汇编获取<code>runtime·getg</code>方法的调用结果</li>
<li>直接修改运行时的代码，export一个可以外部调用的GoID()方法</li>
</ol>
<p>每个方式都有些问题， #1比较慢， #2因为是hack的方式(Go team并不想暴露go id的信息), 针对不同的Go版本中需要特殊的hack手段， #3需要定制Go运行时，不通用。当时的<a href="https://github.com/petermattis/goid" target="_blank" rel="external">petermattis/goid</a>提供了 #2 的方法， 但是只能在 go 1.3中才起作用，所以只能选择#1的方式获取go id。</p>
<p>最近一年来， petermattis更新了他的代码，逐步增加了对 Go 1.4、1.5、1.6、1.7、1.8、1.9的支持，同时也提供了#1的方法，在#2方法不起作用的时候作为备选，所以我们可以在当前的所有的版本中可以使用stable的获取go id的方法了。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/tags/Go/"/>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 1.9 sync.Map揭秘]]></title>
    <link href="http://colobu.com/2017/07/11/dive-into-sync-Map/"/>
    <id>http://colobu.com/2017/07/11/dive-into-sync-Map/</id>
    <published>2017-07-11T10:09:48.000Z</published>
    <updated>2017-07-28T15:12:23.268Z</updated>
    <content type="html"><![CDATA[<p>在Go 1.6之前， 内置的map类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。</p>
<p>本文带你深入到<code>sync.Map</code>的具体实现中，看看为了增加一个功能，代码是如何变的复杂的,以及作者在实现<code>sync.Map</code>的一些思想。</p>
<a id="more"></a>
<h3 id="有并发问题的map">有并发问题的map</h3>
<p>官方的<a href="https://golang.org/doc/faq#atomic_maps" target="_blank" rel="external">faq</a>已经提到内建的<code>map</code>不是线程(goroutine)安全的。</p>
<p>首先，让我们看一段并发读写的代码,下列程序中一个goroutine一直读，一个goroutine一只写同一个键值，即即使读写的键不相同，而且map也没有&quot;扩容&quot;等操作，代码还是会报错。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">int</span>]<span class="typename">int</span>)</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		<span class="keyword">for</span> {</div><div class="line">			_ = m<span class="number">[1</span>]</div><div class="line">		}</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		<span class="keyword">for</span> {</div><div class="line">			m<span class="number">[2</span>] =<span class="number"> 2</span></div><div class="line">		}</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">select</span> {}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>错误信息是: <code>fatal error: concurrent map read and map write</code>。</p>
<p>如果你查看Go的源代码: <a href="https://github.com/golang/go/blob/master/src/runtime/hashmap_fast.go#L118" target="_blank" rel="external">hashmap_fast.go#L118</a>,会看到读的时候会检查<code>hashWriting</code>标志， 如果有这个标志，就会报并发错误。</p>
<p>写的时候会设置这个标志: <a href="https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L542" target="_blank" rel="external">hashmap.go#L542</a></p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">h.flags |= hashWriting</div></pre></td></tr></table></figure>

<p><a href="https://github.com/golang/go/blob/master/src/runtime/hashmap.go#L628" target="_blank" rel="external">hashmap.go#L628</a>设置完之后会取消这个标记。</p>
<p>当然，代码中还有好几处并发读写的检查， 比如写的时候也会检查是不是有并发的写，删除键的时候类似写，遍历的时候并发读写问题等。</p>
<p>有时候，map的并发问题不是那么容易被发现, 你可以利用<code>-race</code>参数来检查。</p>
<h3 id="Go_1-9之前的解决方案">Go 1.9之前的解决方案</h3>
<p>但是，很多时候，我们会并发地使用map对象，尤其是在一定规模的项目中，map总会保存goroutine共享的数据。在Go官方blog的<a href="https://blog.golang.org/go-maps-in-action" target="_blank" rel="external">Go maps in action</a>一文中，提供了一种简便的解决方案。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> counter = <span class="keyword">struct</span>{</div><div class="line">    sync.RWMutex</div><div class="line">    m <span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span></div><div class="line">}{m: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="typename">string</span>]<span class="typename">int</span>)}</div></pre></td></tr></table></figure>

<p>它使用嵌入struct为map增加一个读写锁。</p>
<p>读数据的时候很方便的加锁：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">counter.RLock()</div><div class="line">n := counter.m[<span class="string">"some_key"</span>]</div><div class="line">counter.RUnlock()</div><div class="line">fmt.Println(<span class="string">"some_key:"</span>, n)</div></pre></td></tr></table></figure>

<p>写数据的时候:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">counter.Lock()</div><div class="line">counter.m[<span class="string">"some_key"</span>]++</div><div class="line">counter.Unlock()</div></pre></td></tr></table></figure>

<h3 id="sync-Map">sync.Map</h3>
<p>可以说，上面的解决方案相当简洁，并且利用读写锁而不是Mutex可以进一步减少读写的时候因为锁带来的性能。</p>
<p>但是，它在一些场景下也有问题，如果熟悉Java的同学，可以对比一下java的<code>ConcurrentHashMap</code>的实现，在map的数据非常大的情况下，一把锁会导致大并发的客户端共争一把锁，Java的解决方案是<code>shard</code>, 内部使用多个锁，每个区间共享一把锁，这样减少了数据共享一把锁带来的性能影响，<a href="https://github.com/orcaman" target="_blank" rel="external">orcaman</a>提供了这个思路的一个实现： <a href="https://github.com/orcaman/concurrent-map" target="_blank" rel="external">concurrent-map</a>，他也询问了Go相关的开发人员是否在Go中也实现这种<a href="https://github.com/golang/go/issues/20360" target="_blank" rel="external">方案</a>，由于实现的复杂性，答案是<code>Yes, we considered it.</code>,但是除非有特别的性能提升和应用场景，否则没有进一步的开发消息。</p>
<p>那么，在Go 1.9中<code>sync.Map</code>是怎么实现的呢？它是如何解决并发提升性能的呢？</p>
<p><code>sync.Map</code>的实现有几个优化点，这里先列出来，我们后面慢慢分析。</p>
<ol>
<li>空间换时间。 通过冗余的两个数据结构(read、dirty),实现加锁对性能的影响。</li>
<li>使用只读数据(read)，避免读写冲突。</li>
<li>动态调整，miss次数多了之后，将dirty数据提升为read。</li>
<li>double-checking。</li>
<li>延迟删除。 删除一个键值只是打标记，只有在提升dirty的时候才清理删除的数据。</li>
<li>优先从read读取、更新、删除，因为对read的读取不需要锁。</li>
</ol>
<p>下面我们介绍<code>sync.Map</code>的重点代码，以便理解它的实现思想。</p>
<p>首先，我们看一下<code>sync.Map</code>的数据结构：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Map <span class="keyword">struct</span> {</div><div class="line">	<span class="comment">// 当涉及到dirty数据的操作的时候，需要使用这个锁</span></div><div class="line">	mu Mutex</div><div class="line"></div><div class="line">	<span class="comment">// 一个只读的数据结构，因为只读，所以不会有读写冲突。</span></div><div class="line">	<span class="comment">// 所以从这个数据中读取总是安全的。</span></div><div class="line">	<span class="comment">// 实际上，实际也会更新这个数据的entries,如果entry是未删除的(unexpunged), 并不需要加锁。如果entry已经被删除了，需要加锁，以便更新dirty数据。</span></div><div class="line">	read atomic.Value <span class="comment">// readOnly</span></div><div class="line"></div><div class="line">	<span class="comment">// dirty数据包含当前的map包含的entries,它包含最新的entries(包括read中未删除的数据,虽有冗余，但是提升dirty字段为read的时候非常快，不用一个一个的复制，而是直接将这个数据结构作为read字段的一部分),有些数据还可能没有移动到read字段中。</span></div><div class="line">	<span class="comment">// 对于dirty的操作需要加锁，因为对它的操作可能会有读写竞争。</span></div><div class="line">	<span class="comment">// 当dirty为空的时候， 比如初始化或者刚提升完，下一次的写操作会复制read字段中未删除的数据到这个数据中。</span></div><div class="line">	dirty <span class="keyword">map</span>[<span class="keyword">interface</span>{}]*entry</div><div class="line"></div><div class="line">	<span class="comment">// 当从Map中读取entry的时候，如果read中不包含这个entry,会尝试从dirty中读取，这个时候会将misses加一，</span></div><div class="line">	<span class="comment">// 当misses累积到 dirty的长度的时候， 就会将dirty提升为read,避免从dirty中miss太多次。因为操作dirty需要加锁。</span></div><div class="line">	misses <span class="typename">int</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>它的数据结构很简单，值包含四个字段：<code>read</code>、<code>mu</code>、<code>dirty</code>、<code>misses</code>。</p>
<p>它使用了冗余的数据结构<code>read</code>、<code>dirty</code>。<code>dirty</code>中会包含<code>read</code>中为删除的entries，新增加的entries会加入到<code>dirty</code>中。</p>
<p><code>read</code>的数据结构是：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> readOnly <span class="keyword">struct</span> {</div><div class="line">	m       <span class="keyword">map</span>[<span class="keyword">interface</span>{}]*entry</div><div class="line">	amended <span class="typename">bool</span> <span class="comment">// 如果Map.dirty有些数据不在中的时候，这个值为true</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p><code>amended</code>指明<code>Map.dirty</code>中有<code>readOnly.m</code>未包含的数据，所以如果从<code>Map.read</code>找不到数据的话，还要进一步到<code>Map.dirty</code>中查找。</p>
<p>对Map.read的修改是通过原子操作进行的。</p>
<p>虽然<code>read</code>和<code>dirty</code>有冗余数据，但这些数据是通过指针指向同一个数据，所以尽管Map的value会很大，但是冗余的空间占用还是有限的。</p>
<p><code>readOnly.m</code>和<code>Map.dirty</code>存储的值类型是<code>*entry</code>,它包含一个指针p, 指向用户存储的value值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> entry <span class="keyword">struct</span> {</div><div class="line">	p unsafe.Pointer <span class="comment">// *interface{}</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>p有三种值：</p>
<ul>
<li>nil: entry已被删除了，并且m.dirty为nil</li>
<li>expunged: entry已被删除了，并且m.dirty不为nil，而且这个entry不存在于m.dirty中</li>
<li>其它： entry是一个正常的值</li>
</ul>
<p>以上是<code>sync.Map</code>的数据结构，下面我们重点看看<code>Load</code>、<code>Store</code>、<code>Delete</code>、<code>Range</code>这四个方法，其它辅助方法可以参考这四个方法来理解。</p>
<h4 id="Load">Load</h4>
<p>加载方法，也就是提供一个键<code>key</code>,查找对应的值<code>value</code>,如果不存在，通过<code>ok</code>反映：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (m *Map) Load(key <span class="keyword">interface</span>{}) (value <span class="keyword">interface</span>{}, ok <span class="typename">bool</span>) {</div><div class="line">	<span class="comment">// 1.首先从m.read中得到只读readOnly,从它的map中查找，不需要加锁</span></div><div class="line">	read, _ := m.read.Load().(readOnly)</div><div class="line">	e, ok := read.m[key]</div><div class="line"></div><div class="line">	<span class="comment">// 2. 如果没找到，并且m.dirty中有新数据，需要从m.dirty查找，这个时候需要加锁</span></div><div class="line">	<span class="keyword">if</span> !ok && read.amended {</div><div class="line">		m.mu.Lock()</div><div class="line">		<span class="comment">// 双检查，避免加锁的时候m.dirty提升为m.read,这个时候m.read可能被替换了。</span></div><div class="line">		read, _ = m.read.Load().(readOnly)</div><div class="line">		e, ok = read.m[key]</div><div class="line"></div><div class="line">		<span class="comment">// 如果m.read中还是不存在，并且m.dirty中有新数据</span></div><div class="line">		<span class="keyword">if</span> !ok && read.amended {</div><div class="line">			<span class="comment">// 从m.dirty查找</span></div><div class="line">			e, ok = m.dirty[key]</div><div class="line">			<span class="comment">// 不管m.dirty中存不存在，都将misses计数加一</span></div><div class="line">			<span class="comment">// missLocked()中满足条件后就会提升m.dirty</span></div><div class="line">			m.missLocked()</div><div class="line">		}</div><div class="line">		m.mu.Unlock()</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> !ok {</div><div class="line">		<span class="keyword">return</span> <span class="constant">nil</span>, <span class="constant">false</span></div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> e.load()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>这里有两个值的关注的地方。一个是首先从<code>m.read</code>中加载，不存在的情况下，并且<code>m.dirty</code>中有新数据，加锁，然后从<code>m.dirty</code>中加载。</p>
<p>二是这里使用了双检查的处理，因为在下面的两个语句中，这两行语句并不是一个原子操作。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> !ok && read.amended {</div><div class="line">		m.mu.Lock()</div></pre></td></tr></table></figure>

<p>虽然第一句执行的时候条件满足，但是在加锁之前，<code>m.dirty</code>可能被提升为<code>m.read</code>,所以加锁后还得再检查<code>m.read</code>，后续的方法中都使用了这个方法。</p>
<p>双检查的技术Java程序员非常熟悉了，单例模式的实现之一就是利用双检查的技术。</p>
<p>可以看到，如果我们查询的键值正好存在于<code>m.read</code>中，无须加锁，直接返回，理论上性能优异。即使不存在于<code>m.read</code>中，经过<code>miss</code>几次之后，<code>m.dirty</code>会被提升为<code>m.read</code>，又会从<code>m.read</code>中查找。所以对于更新／增加较少，加载存在的key很多的case,性能基本和无锁的map类似。</p>
<p>下面看看<code>m.dirty</code>是如何被提升的。 <code>missLocked</code>方法中可能会将<code>m.dirty</code>提升。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (m *Map) missLocked() {</div><div class="line">	m.misses++</div><div class="line">	<span class="keyword">if</span> m.misses &lt; <span class="built_in">len</span>(m.dirty) {</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line">	m.read.Store(readOnly{m: m.dirty})</div><div class="line">	m.dirty = <span class="constant">nil</span></div><div class="line">	m.misses =<span class="number"> 0</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>上面的最后三行代码就是提升<code>m.dirty</code>的，很简单的将<code>m.dirty</code>作为<code>readOnly</code>的<code>m</code>字段，原子更新<code>m.read</code>。提升后<code>m.dirty</code>、<code>m.misses</code>重置， 并且<code>m.read.amended</code>为false。</p>
<h4 id="Store">Store</h4>
<p>这个方法是更新或者新增一个entry。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (m *Map) Store(key, value <span class="keyword">interface</span>{}) {</div><div class="line">	<span class="comment">// 如果m.read存在这个键，并且这个entry没有被标记删除，尝试直接存储。</span></div><div class="line">	<span class="comment">// 因为m.dirty也指向这个entry,所以m.dirty也保持最新的entry。</span></div><div class="line">	read, _ := m.read.Load().(readOnly)</div><div class="line">	<span class="keyword">if</span> e, ok := read.m[key]; ok && e.tryStore(&value) {</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// 如果`m.read`不存在或者已经被标记删除</span></div><div class="line">	m.mu.Lock()</div><div class="line">	read, _ = m.read.Load().(readOnly)</div><div class="line"></div><div class="line">	<span class="keyword">if</span> e, ok := read.m[key]; ok {</div><div class="line">		<span class="keyword">if</span> e.unexpungeLocked() { <span class="comment">//标记成未被删除</span></div><div class="line">			m.dirty[key] = e <span class="comment">//m.dirty中不存在这个键，所以加入m.dirty</span></div><div class="line">		}</div><div class="line">		e.storeLocked(&value) <span class="comment">//更新</span></div><div class="line">	} <span class="keyword">else</span> <span class="keyword">if</span> e, ok := m.dirty[key]; ok { <span class="comment">// m.dirty存在这个键，更新</span></div><div class="line">		e.storeLocked(&value)</div><div class="line">	} <span class="keyword">else</span> { <span class="comment">//新键值</span></div><div class="line">		<span class="keyword">if</span> !read.amended { <span class="comment">//m.dirty中没有新的数据，往m.dirty中增加第一个新键</span></div><div class="line">			m.dirtyLocked() <span class="comment">//从m.read中复制未删除的数据</span></div><div class="line">			m.read.Store(readOnly{m: read.m, amended: <span class="constant">true</span>})</div><div class="line">		}</div><div class="line">		m.dirty[key] = newEntry(value) <span class="comment">//将这个entry加入到m.dirty中</span></div><div class="line">	}</div><div class="line">	m.mu.Unlock()</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (m *Map) dirtyLocked() {</div><div class="line">	<span class="keyword">if</span> m.dirty != <span class="constant">nil</span> {</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line"></div><div class="line">	read, _ := m.read.Load().(readOnly)</div><div class="line">	m.dirty = <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">interface</span>{}]*entry, <span class="built_in">len</span>(read.m))</div><div class="line">	<span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m {</div><div class="line">		<span class="keyword">if</span> !e.tryExpungeLocked() {</div><div class="line">			m.dirty[k] = e</div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div><div class="line"><span class="keyword">func</span> (e *entry) tryExpungeLocked() (isExpunged <span class="typename">bool</span>) {</div><div class="line">	p := atomic.LoadPointer(&e.p)</div><div class="line">	<span class="keyword">for</span> p == <span class="constant">nil</span> {</div><div class="line">		<span class="comment">// 将已经删除标记为nil的数据标记为expunged</span></div><div class="line">		<span class="keyword">if</span> atomic.CompareAndSwapPointer(&e.p, <span class="constant">nil</span>, expunged) {</div><div class="line">			<span class="keyword">return</span> <span class="constant">true</span></div><div class="line">		}</div><div class="line">		p = atomic.LoadPointer(&e.p)</div><div class="line">	}</div><div class="line">	<span class="keyword">return</span> p == expunged</div><div class="line">}</div></pre></td></tr></table></figure>

<p>你可以看到，以上操作都是先从操作<code>m.read</code>开始的，不满足条件再加锁，然后操作<code>m.dirty</code>。</p>
<p><code>Store</code>可能会在某种情况下(初始化或者m.dirty刚被提升后)从<code>m.read</code>中复制数据，如果这个时候<code>m.read</code>中数据量非常大，可能会影响性能。</p>
<h4 id="Delete">Delete</h4>
<p>删除一个键值。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (m *Map) Delete(key <span class="keyword">interface</span>{}) {</div><div class="line">	read, _ := m.read.Load().(readOnly)</div><div class="line">	e, ok := read.m[key]</div><div class="line">	<span class="keyword">if</span> !ok && read.amended {</div><div class="line">		m.mu.Lock()</div><div class="line">		read, _ = m.read.Load().(readOnly)</div><div class="line">		e, ok = read.m[key]</div><div class="line">		<span class="keyword">if</span> !ok && read.amended {</div><div class="line">			<span class="built_in">delete</span>(m.dirty, key)</div><div class="line">		}</div><div class="line">		m.mu.Unlock()</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> ok {</div><div class="line">		e.<span class="built_in">delete</span>()</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>同样，删除操作还是从<code>m.read</code>中开始， 如果这个entry不存在于<code>m.read</code>中，并且<code>m.dirty</code>中有新数据，则加锁尝试从<code>m.dirty</code>中删除。</p>
<p>注意，还是要双检查的。 从<code>m.dirty</code>中直接删除即可，就当它没存在过，但是如果是从<code>m.read</code>中删除，并不会直接删除，而是打标记：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (e *entry) <span class="built_in">delete</span>() (hadValue <span class="typename">bool</span>) {</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		p := atomic.LoadPointer(&e.p)</div><div class="line">		<span class="comment">// 已标记为删除</span></div><div class="line">		<span class="keyword">if</span> p == <span class="constant">nil</span> || p == expunged {</div><div class="line">			<span class="keyword">return</span> <span class="constant">false</span></div><div class="line">		}</div><div class="line">		<span class="comment">// 原子操作，e.p标记为nil</span></div><div class="line">		<span class="keyword">if</span> atomic.CompareAndSwapPointer(&e.p, p, <span class="constant">nil</span>) {</div><div class="line">			<span class="keyword">return</span> <span class="constant">true</span></div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h4 id="Range">Range</h4>
<p>因为<code>for ... range map</code>是内建的语言特性，所以没有办法使用<code>for range</code>遍历<code>sync.Map</code>, 但是可以使用它的<code>Range</code>方法，通过回调的方式遍历。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> (m *Map) Range(f <span class="keyword">func</span>(key, value <span class="keyword">interface</span>{}) <span class="typename">bool</span>) {</div><div class="line">	read, _ := m.read.Load().(readOnly)</div><div class="line"></div><div class="line">	<span class="comment">// 如果m.dirty中有新数据，则提升m.dirty,然后在遍历</span></div><div class="line">	<span class="keyword">if</span> read.amended {</div><div class="line">		<span class="comment">//提升m.dirty</span></div><div class="line">		m.mu.Lock()</div><div class="line">		read, _ = m.read.Load().(readOnly) <span class="comment">//双检查</span></div><div class="line">		<span class="keyword">if</span> read.amended {</div><div class="line">			read = readOnly{m: m.dirty}</div><div class="line">			m.read.Store(read)</div><div class="line">			m.dirty = <span class="constant">nil</span></div><div class="line">			m.misses =<span class="number"> 0</span></div><div class="line">		}</div><div class="line">		m.mu.Unlock()</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="comment">// 遍历, for range是安全的</span></div><div class="line">	<span class="keyword">for</span> k, e := <span class="keyword">range</span> read.m {</div><div class="line">		v, ok := e.load()</div><div class="line">		<span class="keyword">if</span> !ok {</div><div class="line">			<span class="keyword">continue</span></div><div class="line">		}</div><div class="line">		<span class="keyword">if</span> !f(k, v) {</div><div class="line">			<span class="keyword">break</span></div><div class="line">		}</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>Range方法调用前可能会做一个<code>m.dirty</code>的提升，不过提升<code>m.dirty</code>不是一个耗时的操作。</p>
<h3 id="sync-Map的性能">sync.Map的性能</h3>
<p>Go 1.9源代码中提供了性能的测试： <a href="https://github.com/golang/go/blob/master/src/sync/map_bench_test.go" target="_blank" rel="external">map_bench_test.go</a>、<a href="https://github.com/golang/go/blob/master/src/sync/map_reference_test.go" target="_blank" rel="external">map_reference_test.go</a></p>
<p>我也基于这些代码修改了一下，得到下面的测试数据，相比较以前的解决方案，性能多少回有些提升，如果你特别关注性能，可以考虑<code>sync.Map</code>。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">BenchmarkHitAll/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>   	<span class="number">20000000</span>	        <span class="number">83.8</span> ns/op</div><div class="line">BenchmarkHitAll/*<span class="keyword">sync</span>.Map-<span class="number">4</span>          	<span class="number">30000000</span>	        <span class="number">59.9</span> ns/op</div><div class="line">BenchmarkHitAll_WithoutPrompting/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>         	<span class="number">20000000</span>	        <span class="number">96.9</span> ns/op</div><div class="line">BenchmarkHitAll_WithoutPrompting/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                	<span class="number">20000000</span>	        <span class="number">64.1</span> ns/op</div><div class="line">BenchmarkHitNone/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>                         	<span class="number">20000000</span>	        <span class="number">79.1</span> ns/op</div><div class="line">BenchmarkHitNone/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                                	<span class="number">30000000</span>	        <span class="number">43.3</span> ns/op</div><div class="line">BenchmarkHit_WithoutPrompting/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>            	<span class="number">20000000</span>	        <span class="number">81.5</span> ns/op</div><div class="line">BenchmarkHit_WithoutPrompting/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                   	<span class="number">30000000</span>	        <span class="number">44.0</span> ns/op</div><div class="line">BenchmarkUpdate/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>                          	 <span class="number">5000000</span>	       <span class="number">328</span> ns/op</div><div class="line">BenchmarkUpdate/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                                 	<span class="number">10000000</span>	       <span class="number">146</span> ns/op</div><div class="line">BenchmarkUpdate_WithoutPrompting/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>         	 <span class="number">5000000</span>	       <span class="number">336</span> ns/op</div><div class="line">BenchmarkUpdate_WithoutPrompting/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                	 <span class="number">5000000</span>	       <span class="number">324</span> ns/op</div><div class="line">BenchmarkDelete/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>                          	<span class="number">10000000</span>	       <span class="number">155</span> ns/op</div><div class="line">BenchmarkDelete/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                                 	<span class="number">30000000</span>	        <span class="number">55.0</span> ns/op</div><div class="line">BenchmarkDelete_WithoutPrompting/*<span class="keyword">sync</span>.RWMutexMap-<span class="number">4</span>         	<span class="number">10000000</span>	       <span class="number">173</span> ns/op</div><div class="line">BenchmarkDelete_WithoutPrompting/*<span class="keyword">sync</span>.Map-<span class="number">4</span>                	<span class="number">10000000</span>	       <span class="number">147</span> ns/op</div></pre></td></tr></table></figure>

<h3 id="其它">其它</h3>
<p><code>sync.Map</code>没有<code>Len</code>方法，并且目前没有迹象要加上 (<a href="https://github.com/golang/go/issues/20680" target="_blank" rel="external">issue#20680</a>),所以如果想得到当前Map中有效的entries的数量，需要使用<code>Range</code>方法遍历一次， 比较X疼。</p>
<p><code>LoadOrStore</code>方法如果提供的key存在，则返回已存在的值(Load)，否则保存提供的键值(Store)。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>在Go 1.6之前， 内置的map类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。</p>
<p>本文带你深入到<code>sync.Map</code>的具体实现中，看看为了增加一个功能，代码是如何变的复杂的,以及作者在实现<code>sync.Map</code>的一些思想。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Mac OS X显示连接]]></title>
    <link href="http://colobu.com/2017/07/11/show-connections-in-MACOS/"/>
    <id>http://colobu.com/2017/07/11/show-connections-in-MACOS/</id>
    <published>2017-07-11T07:23:34.000Z</published>
    <updated>2017-07-28T15:12:23.275Z</updated>
    <content type="html"><![CDATA[<p>Mac OSX中虽然带了 <code>netstat</code>工具，可是用起来不像Linux下那么爽， 一个是慢 (<code>netstat -p tcp | grep $PORT</code>)，二是不能pid，所以<a href="https://stackoverflow.com/questions/4421633/who-is-listening-on-a-given-tcp-port-on-mac-os-x" target="_blank" rel="external">stackoverflow</a>上建议使用<code>lsof</code>工具。</p>
<p>所以你可以使用下面的命令：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lsof -n -i4TCP:<span class="variable">$PORT</span> | grep LISTEN <span class="comment"># Verified on macOS Sierra</span></div><div class="line">lsof -n -iTCP:<span class="variable">$PORT</span> | grep LISTEN</div><div class="line">lsof -n -i:<span class="variable">$PORT</span> | grep LISTEN</div></pre></td></tr></table></figure>

<p>为了不显示端口的俗称，你可以加<code>P</code>参数：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lsof -nP -i4TCP:<span class="variable">$PORT</span> | <span class="keyword">grep</span> LISTEN <span class="comment"># Verified on macOS Sierra</span></div><div class="line">lsof -nP -iTCP:<span class="variable">$PORT</span> | <span class="keyword">grep</span> LISTEN</div><div class="line">lsof -nP -i:<span class="variable">$PORT</span> | <span class="keyword">grep</span> LISTEN</div></pre></td></tr></table></figure>

<p>如果不想<code>grep Listen</code>,可以加<code>-sTCP:LISTEN</code>。</p>
<p>没有更多要说的了，谨记一下备用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Mac OSX中虽然带了 <code>netstat</code>工具，可是用起来不像Linux下那么爽， 一个是慢 (<code>netstat -p tcp | grep $PORT</code>)，二是不能pid，所以<a href="https://stackove]]>
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go语言中 select 和 switch 的比较]]></title>
    <link href="http://colobu.com/2017/07/07/select-vs-switch-in-golang/"/>
    <id>http://colobu.com/2017/07/07/select-vs-switch-in-golang/</id>
    <published>2017-07-07T11:31:10.000Z</published>
    <updated>2017-07-28T15:12:23.274Z</updated>
    <content type="html"><![CDATA[<p><code>select</code> 和 <code>switch</code> 是 Go语言中进行分支操作的两个方式，各有各的应用场景。</p>
<a id="more"></a>
<h3 id="select">select</h3>
<p><code>select</code>只能应用于channel的操作，既可以用于channel的数据接收，也可以用于channel的数据发送。</p>
<p>如果<code>select</code>的多个分支都满足条件，则会随机的选取其中一个满足条件的分支， 如语言规范中所说：</p>
<blockquote>
<p>If multiple cases can proceed, a uniform pseudo-random choice is made to decide which single communication will execute.</p>
</blockquote>
<p>｀case｀语句的表达式可以为一个变量或者两个变量赋值。</p>
<p>有<code>default</code>语句。</p>
<p>下面的代码是 <a href="https://gobyexample.com/select" target="_blank" rel="external">go by example 上的例子</a>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">    c1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">string</span>)</div><div class="line">    c2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="typename">string</span>)</div><div class="line"></div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        time.Sleep(time.Second *<span class="number"> 1</span>)</div><div class="line">        c1 &lt;- <span class="string">"one"</span></div><div class="line">    }()</div><div class="line">    <span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">        time.Sleep(time.Second *<span class="number"> 2</span>)</div><div class="line">        c2 &lt;- <span class="string">"two"</span></div><div class="line">    }()</div><div class="line"></div><div class="line">    <span class="keyword">for</span> i :=<span class="number"> 0</span>; i &lt;<span class="number"> 2</span>; i++ {</div><div class="line">        <span class="keyword">select</span> {</div><div class="line">        <span class="keyword">case</span> msg1 := &lt;-c1:</div><div class="line">            fmt.Println(<span class="string">"received"</span>, msg1)</div><div class="line">        <span class="keyword">case</span> msg2 := &lt;-c2:</div><div class="line">            fmt.Println(<span class="string">"received"</span>, msg2)</div><div class="line">        }</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="switch">switch</h3>
<p><code>switch</code>可以为各种类型进行分支操作， 设置可以为接口类型进行分支判断(通过i.(type))。</p>
<p><code>switch</code> 分支是顺序执行的，这和<code>select</code>不同。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"><span class="keyword">import</span> <span class="string">"time"</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line"></div><div class="line">    i :=<span class="number"> 2</span></div><div class="line">    fmt.Print(<span class="string">"Write "</span>, i, <span class="string">" as "</span>)</div><div class="line">    <span class="keyword">switch</span> i {</div><div class="line">    <span class="keyword">case</span><span class="number"> 1</span>:</div><div class="line">        fmt.Println(<span class="string">"one"</span>)</div><div class="line">    <span class="keyword">case</span><span class="number"> 2</span>:</div><div class="line">        fmt.Println(<span class="string">"two"</span>)</div><div class="line">    <span class="keyword">case</span><span class="number"> 3</span>:</div><div class="line">        fmt.Println(<span class="string">"three"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    <span class="keyword">switch</span> time.Now().Weekday() {</div><div class="line">    <span class="keyword">case</span> time.Saturday, time.Sunday:</div><div class="line">        fmt.Println(<span class="string">"It's the weekend"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Println(<span class="string">"It's a weekday"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    t := time.Now()</div><div class="line">    <span class="keyword">switch</span> {</div><div class="line">    <span class="keyword">case</span> t.Hour() &lt;<span class="number"> 12</span>:</div><div class="line">        fmt.Println(<span class="string">"It's before noon"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        fmt.Println(<span class="string">"It's after noon"</span>)</div><div class="line">    }</div><div class="line"></div><div class="line">    whatAmI := <span class="keyword">func</span>(i <span class="keyword">interface</span>{}) {</div><div class="line">        <span class="keyword">switch</span> t := i.(<span class="keyword">type</span>) {</div><div class="line">        <span class="keyword">case</span> <span class="typename">bool</span>:</div><div class="line">            fmt.Println(<span class="string">"I'm a bool"</span>)</div><div class="line">        <span class="keyword">case</span> <span class="typename">int</span>:</div><div class="line">            fmt.Println(<span class="string">"I'm an int"</span>)</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">            fmt.Printf(<span class="string">"Don't know type %T\n"</span>, t)</div><div class="line">        }</div><div class="line">    }</div><div class="line">    whatAmI(<span class="constant">true</span>)</div><div class="line">    whatAmI<span class="number">(1</span>)</div><div class="line">    whatAmI(<span class="string">"hey"</span>)</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><code>select</code> 和 <code>switch</code> 是 Go语言中进行分支操作的两个方式，各有各的应用场景。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]golang concurrency tricks]]></title>
    <link href="http://colobu.com/2017/07/07/golang-concurrency-tricks/"/>
    <id>http://colobu.com/2017/07/07/golang-concurrency-tricks/</id>
    <published>2017-07-07T10:58:21.000Z</published>
    <updated>2017-07-28T15:12:23.269Z</updated>
    <content type="html"><![CDATA[<p>原文地址: <a href="https://udhos.github.io/golang-concurrency-tricks/" target="_blank" rel="external">Golang Concurrency Tricks</a></p>
<p>Golang concurrency model based on goroutines and channels is not free from sharp edges.</p>
<p>This page intends both (1) to collect helpful guidelines for writing concurrent code in Go and (2) to bring up well known potential issues to attention.</p>
<a id="more"></a>
<h2 id="Channel_Hints">Channel Hints</h2>
<ul>
<li><p>C1. Some channel operations cause runtime panic:</p>
<ul>
<li>P1. Closing the nil channel.</li>
<li>P2. Closing a closed channel.</li>
<li>P3. Sending on a closed channel.</li>
</ul>
</li>
<li><p>C2. Do not close a channel from a receiver goroutine. Closing the channel from a receiver could make future sender goroutines to panic.</p>
</li>
<li><p>C3. If a channel has multiple senders, do not close the channel from a sender goroutine. Closing the channel from a sender could make future sender goroutine to panic.</p>
</li>
</ul>
<p>Alternatively, coordinate senders so that only the last sender to leave closes the channel (for instance by using either atomic int or sync.WaitGroup)</p>
<p>Last one sender to leave, turns off the lights, which can be controlled by a atomic int.<br><a href="https://groups.google.com/d/msg/golang-nuts/LM648yrPpck/oZFSD-oMAwAJ" target="_blank" rel="external">https://groups.google.com/d/msg/golang-nuts/LM648yrPpck/oZFSD-oMAwAJ</a></p>
<ul>
<li>C4. It is not required to close an unused channel. If no goroutine is left referencing the channel, it will be garbage collected.</li>
</ul>
<p>Note that it is only necessary to close a channel if the receiver is looking for a close. Closing the channel is a control signal on the channel indicating that no more data follows.<br><a href="https://groups.google.com/forum/#!msg/golang-nuts/pZwdYRGxCIk/qpbHxRRPJdUJ" target="_blank" rel="external">https://groups.google.com/forum/#!msg/golang-nuts/pZwdYRGxCIk/qpbHxRRPJdUJ</a></p>
<ul>
<li>C5. Channels work well when enclosed in a &#39;select&#39;.</li>
</ul>
<p>If you are ever using a channel outside of a select in production code, you are probably doing it wrong.<br><a href="https://groups.google.com/d/msg/golang-nuts/LM648yrPpck/j5eHsPc2AwAJ" target="_blank" rel="external">https://groups.google.com/d/msg/golang-nuts/LM648yrPpck/j5eHsPc2AwAJ</a></p>
<ul>
<li><p>C6. If you need bidirectional communication between two goroutines, consider using two unidirectional channels. Thus both channel sides will be able to use the close idiom to signal termination.</p>
</li>
<li><p>C7. Beware: one sender goroutine risks blocking indefinitely when writing on a channel if there is no goroutine left receiving from it.</p>
</li>
<li><p>C8. When designing a goroutine which provides service through channels, and at some point a running goroutine is no longer needed, consider exactly how it will finish. Otherwise, unused goroutines may leak idly servicing an unattended channel.</p>
</li>
<li><p>C9. Keep Dave Cheney&#39;s Four Channel Axioms in mind:</p>
<ul>
<li>A1. A send to a nil channel blocks forever.</li>
<li>A2. A receive from a nil channel blocks forever. (Why? Here is why. Example.)</li>
<li>A3. A send to a closed channel panics.</li>
<li>A4. A receive from a closed channel returns the zero value immediately.</li>
</ul>
</li>
<li><p>C10. &#39;select&#39; never selects a blocking case.</p>
</li>
</ul>
<h2 id="Goroutine_Hints">Goroutine Hints</h2>
<ul>
<li>G1. Only one goroutine accessing a piece of data is good practice.</li>
</ul>
<p>In particular, consider structuring your program so that only one goroutine at a time is ever responsible for a particular piece of data.<br><a href="https://golang.org/doc/faq#What_operations_are_atomic_What_about_mutexes" target="_blank" rel="external">https://golang.org/doc/faq#What_operations_are_atomic_What_about_mutexes</a></p>
<ul>
<li>G2. runtime.Goexit() terminates the goroutine that calls it.</li>
</ul>
<h2 id="See_also:">See also:</h2>
<p><a href="http://www.slideshare.net/cloudflare/a-channel-compendium" target="_blank" rel="external">http://www.slideshare.net/cloudflare/a-channel-compendium</a><br><a href="https://github.com/golang/go/wiki/LearnConcurrency" target="_blank" rel="external">https://github.com/golang/go/wiki/LearnConcurrency</a><br><a href="http://dave.cheney.net/2014/03/19/channel-axioms" target="_blank" rel="external">http://dave.cheney.net/2014/03/19/channel-axioms</a></p>
<hr>
<p>Repository: git clone <a href="https://github.com/udhos/golang-concurrency-tricks.git" target="_blank" rel="external">https://github.com/udhos/golang-concurrency-tricks.git</a><br>Web URL: <a href="http://udhos.github.io/golang-concurrency-tricks" target="_blank" rel="external">http://udhos.github.io/golang-concurrency-tricks</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文地址: <a href="https://udhos.github.io/golang-concurrency-tricks/" target="_blank" rel="external">Golang Concurrency Tricks</a></p>
<p>Golang concurrency model based on goroutines and channels is not free from sharp edges.</p>
<p>This page intends both (1) to collect helpful guidelines for writing concurrent code in Go and (2) to bring up well known potential issues to attention.</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]参考资料: 地道的GO代码]]></title>
    <link href="http://colobu.com/2017/06/30/idiomatic-go-references/"/>
    <id>http://colobu.com/2017/06/30/idiomatic-go-references/</id>
    <published>2017-06-30T02:41:52.000Z</published>
    <updated>2017-07-28T15:12:23.271Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://pocketgophers.com/idiomatic-go/" target="_blank" rel="external">Idiomatic Go</a></p>
<p>什么样的代码才算最地道的Go代码？ 这个问题经常被人问起，但是确不太好回答。部分原因在于我们还在摸索之中，抑或Go还是一个年轻的语言。随着语言和社区的逐渐成熟，老司机们才会对地道的Go代码达成共识。</p>
<p>请注意，地道的代码不是限制你的规则，而是代码指导。工作正常的代码比地道的代码更重要。因为所谓的地道,只是大家达成的一种共识，所以&quot;不地道&quot;的的代码不一定代表着错误。</p>
<p>既然没有确定的答案，我在本文中收集了相关的参考资料, 以飨读者。</p>
<a id="more"></a>
<h3 id="Accept_interfaces,_return_concrete_types"><a href="http://idiomaticgo.com/post/best-practice/accept-interfaces-return-structs/" target="_blank" rel="external">Accept interfaces, return concrete types</a></h3>
<p><strong>Craig Brookes 2016-11-02</strong></p>
<p>解释什么是地道的代码， 为什么你要遵循它。</p>
<h3 id="Code_Review_Comments"><a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="external">Code Review Comments</a></h3>
<p>在Code review的时候一套通用的指导， 简短几句话介绍编写代码的地道的方式。 Go官方出品。</p>
<h3 id="Effective_Go"><a href="https://golang.org/doc/effective_go.html" target="_blank" rel="external">Effective Go</a></h3>
<p>Go开发组提供了编写清晰、地道的Go代码的小窍门。这是Go程序员必读的参考文档， 不止有地道的代码指导，而且还有Go各种特性的背后的考量。</p>
<h3 id="Go_Patterns"><a href="http://tmrts.com/go-patterns/" target="_blank" rel="external">Go Patterns</a></h3>
<p><strong>Tamer Tas</strong></p>
<p>关于Go语言的设计模式和应用程序模式的集合。</p>
<h3 id="Go_Proverbs"><a href="https://go-proverbs.github.io/" target="_blank" rel="external">Go Proverbs</a></h3>
<p>Rob Pike收集的简单、富有诗意的精辟语录， 解释Go语言深层次的哲学、以更容易理解方式。真正理解并应用它们会让你成为Go大牛。</p>
<h3 id="Go_and_the_Zen_of_Python"><a href="https://talks.golang.org/2012/zen.slide" target="_blank" rel="external">Go and the Zen of Python</a></h3>
<p><strong>Andrew Gerrand</strong></p>
<p>比较 Python 和 Go 之禅意。</p>
<h3 id="Go_by_Example"><a href="https://gobyexample.com/" target="_blank" rel="external">Go by Example</a></h3>
<p>使用带注解的例子教授Go， 会讨论什么样的代码才是地道的代码。</p>
<h3 id="Idiomatic_Doc_Comments:_Document_Your_Function,_Not_Your_Function_Signature"><a href="http://whipperstacker.com/2015/10/14/idiomatic-doc-comments-document-your-function-not-your-function-signature/" target="_blank" rel="external">Idiomatic Doc Comments: Document Your Function, Not Your Function Signature</a></h3>
<p><strong>Katrina Owen 2015-10-14</strong></p>
<p>通过示例解释如何为Go函数编写有帮助的注释。</p>
<h3 id="Idiomatic_Go"><a href="https://dmitri.shuralyov.com/idiomatic-go" target="_blank" rel="external">Idiomatic Go</a></h3>
<p><strong>Dmitri Shuralyov</strong></p>
<p>对<a href="https://github.com/golang/go/wiki/CodeReviewComments" target="_blank" rel="external">Code Review Comments</a>的补充，通过令人信服理由和参考文献， 列举了地道的Go代码指导。</p>
<h3 id="Idiomatic_Go_Readability"><a href="https://medium.com/@haya14busa/idiomatic-go-readability-f0b42ef381dc" target="_blank" rel="external">Idiomatic Go Readability</a></h3>
<p>haya14busa</p>
<p>地道的可读性的Go代码的实践经验和窍门， 包括自动和手动方式。</p>
<h3 id="Idiomatic_Go_Tests"><a href="http://idiomaticgo.com/post/testing/idiomatic-go-tests/" target="_blank" rel="external">Idiomatic Go Tests</a></h3>
<p><strong>Craig Brookes</strong></p>
<p>作者通过例子解释地道的Go测试应该怎么做。</p>
<h3 id="Idiomatic_Go_Trickshttps://medium-com/@matryer/idiomatic-go-tricks-62abea5c50fb"><a href="">Idiomatic Go Tricks</a><a href="https://medium.com/@matryer/idiomatic-go-tricks-62abea5c50fb" target="_blank" rel="external">https://medium.com/@matryer/idiomatic-go-tricks-62abea5c50fb</a></h3>
<p><strong>Mat Ryer video slides 2016-08-18</strong></p>
<p>一些技巧和窍门让你像个老司机一样谈论Go。</p>
<h3 id="Itty_Bitty_Go_Idiom:_If_Without_Else"><a href="http://whipperstacker.com/2015/10/16/itty-bitty-go-idiom-if-without-else/" target="_blank" rel="external">Itty Bitty Go Idiom: If Without Else</a></h3>
<p><strong>Katrina Owen 2015-10-16</strong></p>
<p>为什么你通常看到的Go代码中<code>if</code>语句没有<code>else</code>分支， 这篇文章解释了这个问题。</p>
<h3 id="Things_I_learned_teaching_Go"><a href="https://youtu.be/B-r3Wf_I2Lk" target="_blank" rel="external">Things I learned teaching Go</a></h3>
<p><strong>Francesc Campoy Flores 2014-10-10</strong></p>
<blockquote>
<p>It&#39;s better because it&#39;s what other people in the community expect.</p>
</blockquote>
<p>通过教学总结的经验。</p>
<h3 id="What_is_idiomatic_Go?"><a href="https://www.reddit.com/r/golang/comments/5b2j38/what_is_idiomatic_go/" target="_blank" rel="external">What is idiomatic Go?</a></h3>
<p>这是reddit是的一篇讨论，对一个代码库的中的非地道Go代码的抨击。评论显示这些地道代码指导对社区的帮助和伤害。</p>
<h3 id="When_in_Go,_do_as_Gophers_do"><a href="https://talks.golang.org/2014/readability.slide" target="_blank" rel="external">When in Go, do as Gophers do</a></h3>
<p><strong>Fumitoshi Ukai 2014-11-30</strong></p>
<p>通过Review对Go项目代码的提交学到的一些地道的编写Go代码的方式。作者作为 Go Readability Approver,一年中review大约200左右的 CL， 在本文中总结了他所学到的。</p>
<p>一旦我发现了更多的参考资料，我会更新这篇文章， 所以记得收藏本文。</p>
<p><em>当然作为译者，我也会补充更多的参考资料，如果你发现了一些关于这方面的参考资料，记得在评论中贴出来哦。</em></p>
<h3 id="50_Shades_of_Go:_Traps,_Gotchas,_and_Common_Mistakes_for_New_Golang_Devs"><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="external">50 Shades of Go: Traps, Gotchas, and Common Mistakes for New Golang Devs</a></h3>
<p><strong>Kyle Quest</strong></p>
<p><a href="http://colobu.com/2015/09/07/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="external">Go的50度灰：Golang新开发者要注意的陷阱和常见错误</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://pocketgophers.com/idiomatic-go/" target="_blank" rel="external">Idiomatic Go</a></p>
<p>什么样的代码才算最地道的Go代码？ 这个问题经常被人问起，但是确不太好回答。部分原因在于我们还在摸索之中，抑或Go还是一个年轻的语言。随着语言和社区的逐渐成熟，老司机们才会对地道的Go代码达成共识。</p>
<p>请注意，地道的代码不是限制你的规则，而是代码指导。工作正常的代码比地道的代码更重要。因为所谓的地道,只是大家达成的一种共识，所以&quot;不地道&quot;的的代码不一定代表着错误。</p>
<p>既然没有确定的答案，我在本文中收集了相关的参考资料, 以飨读者。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[在Nginx内部自动处理3XX跳转]]></title>
    <link href="http://colobu.com/2017/06/29/How-to-follow-HTTP-redirects-inside-nginx/"/>
    <id>http://colobu.com/2017/06/29/How-to-follow-HTTP-redirects-inside-nginx/</id>
    <published>2017-06-29T05:57:51.000Z</published>
    <updated>2017-07-28T15:12:23.253Z</updated>
    <content type="html"><![CDATA[<p>利用Nginx很容易的配置反向代理和负载均衡的服务, 比如下面的配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">upstream backends {</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.10</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.11</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.12</span>:<span class="number">8080</span>;</div><div class="line">}</div><div class="line"></div><div class="line">server{ </div><div class="line">    listen <span class="number">8080</span>; </div><div class="line">    location / { </div><div class="line">        proxy_pass         http://backends; </div><div class="line">        proxy_<span class="keyword">set</span>_header   Host             <span class="variable">$host</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Real-IP        <span class="variable">$remote_addr</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>; </div><div class="line">    } </div><div class="line">}</div></pre></td></tr></table></figure>

<p>它将客户端的请求转发给后台的三个服务器。 负载均衡的算法又多种， 比如轮询、least_conn、ip_hash、weight等算法，本文重点不介绍这方面的内容，而是下面的需求。</p>
<p>后端服务器可能返回 3XX的redirect的response, Nginx会把这个请求直接返回给客户端。现在我们的需求是让Nginx自己处理这个跳转，而客户端无感知。</p>
<a id="more"></a>
<p>经过查找，找到一种解决方案， 如 <a href="https://serverfault.com/questions/423265/how-to-follow-http-redirects-inside-nginx" target="_blank" rel="external">serverfault</a>提到的，我们可以利用<code>error_page</code>指令将3xx转发给另外的location, 利用<code>$upstream_http_location</code>获得转发的地址：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">upstream backends {</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.10</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.11</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.12</span>:<span class="number">8080</span>;</div><div class="line">}</div><div class="line"></div><div class="line">server{ </div><div class="line">    listen <span class="number">8080</span>; </div><div class="line">    location / { </div><div class="line">        proxy_pass         http://backends; </div><div class="line">        proxy_<span class="keyword">set</span>_header   Host             <span class="variable">$host</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Real-IP        <span class="variable">$remote_addr</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>; </div><div class="line"></div><div class="line">        proxy_intercept_errors on;</div><div class="line">        error_page <span class="number">301</span> <span class="number">302</span> <span class="number">307</span> = @handle_redirect;</div><div class="line">    } </div><div class="line"></div><div class="line">    location @handle_redirect {</div><div class="line">            <span class="keyword">set</span> <span class="variable">$saved_redirect_location</span> <span class="string">'$upstream_http_location'</span>;</div><div class="line">            proxy_pass <span class="variable">$saved_redirect_location</span>;</div><div class="line">    }</div><div class="line">}</div></pre></td></tr></table></figure>

<p>挺巧妙的一个解决方案。</p>
<p>另一个解决方案是 <a href="https://stackoverflow.com/questions/20254456/intercepting-backend-301-302-redirects-proxy-pass-and-rewriting-to-another-loc" target="_blank" rel="external">stackoverflow</a>提到的, 返回给客户端的时候， 利用<code>proxy_redirect</code>指令修改Location的头，让client端重定向到Nginx特定的地址，Nginx再将请求转发给后端服务器。， 不过这个方案要求客户端支持重定向的能力。</p>
<h5 id="参考文档">参考文档</h5>
<ol>
<li><a href="https://serverfault.com/questions/423265/how-to-follow-http-redirects-inside-nginx" target="_blank" rel="external">https://serverfault.com/questions/423265/how-to-follow-http-redirects-inside-nginx</a></li>
<li><a href="https://stackoverflow.com/questions/20254456/intercepting-backend-301-302-redirects-proxy-pass-and-rewriting-to-another-loc" target="_blank" rel="external">https://stackoverflow.com/questions/20254456/intercepting-backend-301-302-redirects-proxy-pass-and-rewriting-to-another-loc</a></li>
<li><a href="https://stackoverflow.com/questions/42134258/follow-redirect-301-and-proxy-pass-last-location-found-with-nginx" target="_blank" rel="external">https://stackoverflow.com/questions/42134258/follow-redirect-301-and-proxy-pass-last-location-found-with-nginx</a></li>
<li><a href="https://gist.github.com/sirsquidness/710bc76d7bbc734c7a3ff69c6b8ff591" target="_blank" rel="external">https://gist.github.com/sirsquidness/710bc76d7bbc734c7a3ff69c6b8ff591</a></li>
<li><a href="http://www.jianshu.com/p/ac8956f79206" target="_blank" rel="external">http://www.jianshu.com/p/ac8956f79206</a></li>
<li><a href="https://github.com/moonbingbing/openresty-best-practices/blob/master/ngx/reverse_proxy.md" target="_blank" rel="external">https://github.com/moonbingbing/openresty-best-practices/blob/master/ngx/reverse_proxy.md</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>利用Nginx很容易的配置反向代理和负载均衡的服务, 比如下面的配置：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">upstream backends {</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.10</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.11</span>:<span class="number">8080</span>;</div><div class="line">      server <span class="number">10.0</span>.<span class="number">0.12</span>:<span class="number">8080</span>;</div><div class="line">}</div><div class="line"></div><div class="line">server{ </div><div class="line">    listen <span class="number">8080</span>; </div><div class="line">    location / { </div><div class="line">        proxy_pass         http://backends; </div><div class="line">        proxy_<span class="keyword">set</span>_header   Host             <span class="variable">$host</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Real-IP        <span class="variable">$remote_addr</span>; </div><div class="line">        proxy_<span class="keyword">set</span>_header   X-Forwarded-For  <span class="variable">$proxy_add_x_forwarded_for</span>; </div><div class="line">    } </div><div class="line">}</div></pre></td></tr></table></figure>

<p>它将客户端的请求转发给后台的三个服务器。 负载均衡的算法又多种， 比如轮询、least_conn、ip_hash、weight等算法，本文重点不介绍这方面的内容，而是下面的需求。</p>
<p>后端服务器可能返回 3XX的redirect的response, Nginx会把这个请求直接返回给客户端。现在我们的需求是让Nginx自己处理这个跳转，而客户端无感知。</p>
]]>
    
    </summary>
    
      <category term="Nginx" scheme="http://colobu.com/tags/Nginx/"/>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]像牛人一样改进你的Go代码]]></title>
    <link href="http://colobu.com/2017/06/27/Lint-your-golang-code-like-a-mad-man/"/>
    <id>http://colobu.com/2017/06/27/Lint-your-golang-code-like-a-mad-man/</id>
    <published>2017-06-27T11:04:33.000Z</published>
    <updated>2017-07-28T15:12:23.260Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://medium.com/@arshamshirvani/lint-your-golang-code-like-a-pro-668dc6637b39" target="_blank" rel="external">Lint your #golang code like a mad man!</a>, 作者: <a href="https://medium.com/@arshamshirvani?source=post_header_lockup" target="_blank" rel="external">Arsham Shirvani</a></p>
<p>我使用下面的工具来改进我的代码，除了<code>vendor</code>文件夹。我的操作系统是<code>GNU/Linux</code>,但是稍微修改一下脚本应该也能运行在你的操作系统上。我使用<a href="https://github.com/Masterminds/glide" target="_blank" rel="external">glide</a>来处理依赖(vendor),但你也可以使用你的包依赖管理工具来替换<code>glide nv</code>， 这个命令列出了所有的文件夹，除了vender (译者按： Go 1.9中可以直接使用<code>./...</code>，它会排除vendor文件夹)。有些情况下<code>glide nv</code>不适合，所以我使用了它的老式风格。</p>
<p>注意我使用<code>$</code>作为shell的提示符。</p>
<a id="more"></a>
<h3 id="gofmt">gofmt</h3>
<p>Go安装程序中自带了<code>gofmt</code>工具，可以使用它来格式化代码，保持一致的代码风格：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find . -name <span class="string">"*.go"</span> -not -path <span class="string">"./vendor/*"</span> -not -path <span class="string">".git/*"</span> | xargs gofmt <span class="operator">-s</span> <span class="operator">-d</span></div></pre></td></tr></table></figure>

<h3 id="gocyclo">gocyclo</h3>
<p>gocyclo 用来检查函数的复杂度。</p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u github.com/fzipp/gocyclo</div></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gocyclo -over <span class="number">12</span> $(ls <span class="operator">-d</span> */ | grep -v vendor)</div></pre></td></tr></table></figure>

<p>上面的命令列出了所有复杂度大于12的函数。你还可以提出最复杂的几个：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gocyclo -top <span class="number">10</span> $(ls <span class="operator">-d</span> */ | grep -v vendor)</div></pre></td></tr></table></figure>

<h3 id="interfacer">interfacer</h3>
<p>interfacer 是一个有趣的工具，依照作者所说：</p>
<blockquote>
<p>这个工具提供接口类型的建议，换句话说，它会对可以本没有必要定义成具体的类型的代码提出警告</p>
</blockquote>
<p>安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u github.com/mvdan/interfacer/cmd/interfacer</div></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ interfacer $(glide nv)</div></pre></td></tr></table></figure>

<p>译者按：看官方的例子就明白这个工具的作用了：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> ProcessInput(f *os.File) error {</div><div class="line">        b, err := ioutil.ReadAll(f)</div><div class="line">        <span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">                <span class="keyword">return</span> err</div><div class="line">        }</div><div class="line">        <span class="keyword">return</span> processBytes(b)</div><div class="line">}</div></pre></td></tr></table></figure>



<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ interfacer $(go list ./... | grep -v /vendor/)</div><div class="line">foo.go:<span class="number">10</span>:<span class="number">19</span>: f can be io.Reader</div></pre></td></tr></table></figure>

<h3 id="deadcode">deadcode</h3>
<p>deadcode会告诉你哪些代码片段根本没用。</p>
<p>安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u github.com/tsenart/deadcode</div></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="keyword">find</span> . -<span class="built_in">type</span> <span class="keyword">d</span> -not -path <span class="string">"./vendor/*"</span> | xargs deadcode</div></pre></td></tr></table></figure>

<h3 id="gotype">gotype</h3>
<p>gotype会对go文件和包进行语义(semantic)和句法(syntactic)的分析,这是google提供的一个工具。</p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u golang.org/x/tools/cmd/gotype</div></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find . -name <span class="string">"*.go"</span> -not -path <span class="string">"./vendor/*"</span> -not -path <span class="string">".git/*"</span> -print0 | xargs -<span class="number">0</span> gotype <span class="operator">-a</span></div></pre></td></tr></table></figure>

<h3 id="misspell">misspell</h3>
<p>misspell用来拼写检查，对国内英语不太熟练的同学很有帮助。</p>
<p>安装:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u github.com/client9/misspell</div></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ find . -type f -not -path <span class="string">"./vendor/*"</span> -print0 | xargs -<span class="number">0</span> misspell</div></pre></td></tr></table></figure>

<h3 id="staticcheck">staticcheck</h3>
<p>staticcheck是一个超牛的工具，提供了巨多的静态检查，就像 C#生态圈的 ReSharper 一样。</p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u honnef.co/go/staticcheck/cmd/staticcheck</div></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ staticcheck $(glide nv)</div></pre></td></tr></table></figure>

<h3 id="gosimple">gosimple</h3>
<p>gosimple 提供信息，帮助你了解哪些代码可以简化。</p>
<p>安装：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u honnef.co/go/simple/cmd/gosimple</div></pre></td></tr></table></figure>

<p>使用：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ gosimple $(glide nv)</div></pre></td></tr></table></figure>

<p>译者按： 事实上这个工具和上面的staticcheck工具已经合并为同一个项目了：<a href="https://github.com/dominikh/go-tools" target="_blank" rel="external">go-tools</a>，这个项目提供了非常好的工具， 还包括 <code>structlayout-optimize</code>、<code>unused</code>、<code>rdeps</code>、<code>keyify</code>等，值的你去探索。</p>
<h3 id="goconst">goconst</h3>
<p>goconst 会查找重复的字符串，这些字符串可以抽取成常量。</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ go get -u github.com/jgautheron/goconst/cmd/goconst</div></pre></td></tr></table></figure>

<p>使用:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ goconst ./… | grep -v vendor</div></pre></td></tr></table></figure>

<p>以上是作者列出的一些工具， 和我以前的一篇文章中列出的工具有很多重合的： <a href="http://colobu.com/2017/02/07/write-idiomatic-golang-codes/#使用工具检查你的代码" target="_blank" rel="external">使用工具检查你的代码</a>， 事实上我在项目中已经使用了文中很多的代码，非常非常的有帮助，希望你在阅读后能有所收获，快将这些工具加入到你的Makefile文件中吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://medium.com/@arshamshirvani/lint-your-golang-code-like-a-pro-668dc6637b39" target="_blank" rel="external">Lint your #golang code like a mad man!</a>, 作者: <a href="https://medium.com/@arshamshirvani?source=post_header_lockup" target="_blank" rel="external">Arsham Shirvani</a></p>
<p>我使用下面的工具来改进我的代码，除了<code>vendor</code>文件夹。我的操作系统是<code>GNU/Linux</code>,但是稍微修改一下脚本应该也能运行在你的操作系统上。我使用<a href="https://github.com/Masterminds/glide" target="_blank" rel="external">glide</a>来处理依赖(vendor),但你也可以使用你的包依赖管理工具来替换<code>glide nv</code>， 这个命令列出了所有的文件夹，除了vender (译者按： Go 1.9中可以直接使用<code>./...</code>，它会排除vendor文件夹)。有些情况下<code>glide nv</code>不适合，所以我使用了它的老式风格。</p>
<p>注意我使用<code>$</code>作为shell的提示符。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[了解 Go 1.9 的类型别名]]></title>
    <link href="http://colobu.com/2017/06/26/learn-go-type-aliases/"/>
    <id>http://colobu.com/2017/06/26/learn-go-type-aliases/</id>
    <published>2017-06-26T09:20:19.000Z</published>
    <updated>2017-07-28T15:12:23.273Z</updated>
    <content type="html"><![CDATA[<p>如你所知， 类型别名(type aliases) 最终还是加入到Go 1.9中， Go 1.9 beta2今天已经发布了, 正式版预计8月初发布， 是时候深入了解一下它的新特性了，本文介绍的就是它的重要的新特性之一： 类型别名。 </p>
<p>当然，如果你想尝试这些新特性，需要安装Go 1.9的版本，目前是beta2版，可以在官方网站下载。<br><a id="more"></a></p>
<p>类型别名主要解决什么问题，为什么需要这个特性？ Russ Cox 的论文<a href="https://talks.golang.org/2016/refactor.article" target="_blank" rel="external">Codebase Refactoring (with help from Go)</a>介绍了它的背景。类型别名主要用在：</p>
<ol>
<li>在大规模的重构项目代码的时候，尤其是将一个类型从一个包移动到另一个包中的时候，有些代码使用新包中的类型，有些代码使用旧包中的类型， 比如<code>context</code></li>
<li>允许一个庞大的包分解成内部的几个小包，但是小包中的类型需要集中暴漏在上层的大包中</li>
</ol>
<h3 id="类型别名">类型别名</h3>
<p>类型别名的语法如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> identifier = Type</div></pre></td></tr></table></figure>

<p>它和类型定义(type definition)类似，仅仅是在<code>identifier</code>和<code>Type</code>之间加了一个等号<code>=</code>，但是和类型定义区别很大，这一点会在后面专门比较。</p>
<p>下面这个例子就是为字符串<code>string</code>类型定义了一个别名<code>S</code>,你可以声明变量、常量为<code>S</code>类型，将字符串赋值给它，它和字符串类型几乎一模一样。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> S = <span class="typename">string</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> s S = <span class="string">"hello world"</span></div><div class="line">	fmt.Println(s)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>当然， 你可以为任意的类型定义类型别名，语言规范中没有限制，可以为数组、结构体、指针、函数、接口、Slice、Map、Channel定义别名，甚至你还可以为通过类型定义(type definition)的类型定义别名，更甚者是你可以为别名定义别名。</p>
<p>比如下面这个例子， 为函数类型<code>func()</code>定义了一个别名<code>F</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> F = <span class="keyword">func</span>()</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> foo F = <span class="keyword">func</span>() {</div><div class="line">		fmt.Println(<span class="string">"hello type aliases"</span>)</div><div class="line">	}</div><div class="line"></div><div class="line">	foo()	</div><div class="line">}</div></pre></td></tr></table></figure>

<p>又如下面的代码，为<code>interface{}</code>定义了别名<code>G</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> G = <span class="keyword">interface</span>{}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> g G = <span class="string">"hello world"</span></div><div class="line">	fmt.Println(g)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>类型别名还可以为其它包中的类型定义别名，只要这个类型在其它包中是<code>exported</code>的：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"time"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">type</span> MyTime = time.Time</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> t MyTime = time.Now()</div><div class="line">	fmt.Println(t)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="类型命名和类型声明的区别">类型命名和类型声明的区别</h3>
<p>记住下面一句话：</p>
<blockquote>
<p>类型别名和原类型完全一样，只不过是另一种叫法而已</p>
</blockquote>
<p>这句话隐藏着很多的智慧，你可以慢慢体会。</p>
<p>完全一样(<a href="https://golang.org/ref/spec#Type_identity" target="_blank" rel="external">identical types</a>)意味着这两种类型的数据可以互相赋值，而类型定义要和原始类型赋值的时候需要类型转换(Conversion <code>T(x)</code>)。</p>
<p>下面这个例子中，<code>v</code>是整数类型，可以直接赋值给<code>d</code>,因为d的类型是<code>D</code>,是是整数的别名。而<code>var i I = v</code>这一句会出错，因为<code>I</code>和整数是两个类型。 </p>
<p>所以类型别名和类型定义最大的区别在于：类型别名和原类型是相同的，而类型定义和原类型是不同的两个类型。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">type</span> D = <span class="typename">int</span></div><div class="line"><span class="keyword">type</span> I <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	v :=<span class="number"> 100</span></div><div class="line">	<span class="keyword">var</span> d D = v</div><div class="line">	<span class="keyword">var</span> i I = v</div><div class="line">}</div></pre></td></tr></table></figure>

<p>比如类型定义<code>type Tnamed Tunderlying</code>,系列类型和组合类型是不同的:</p>
<ul>
<li><code>Tnamed</code> 和 <code>Tunderlying</code></li>
<li><code>*Tnamed</code> 和 <code>*Tunderlying</code></li>
<li><code>chan Tnamed</code> 和 <code>chan Tunderlying</code></li>
<li><code>func(Tnamed)</code> 和 <code>func(Tunderlying)</code></li>
<li><code>interface{ M() Tnamed }</code> 和 <code>interface{ M() Tunderlying }</code></li>
</ul>
<p>但是对于别名<code>type T1 = T2</code>,下列类型和组合类型是相同的:</p>
<ul>
<li><code>T1</code> 和 <code>T2</code></li>
<li><code>*T1</code> 和 <code>*T2</code></li>
<li><code>chan T1</code> 和 <code>chan T2</code></li>
<li><code>func(T1)</code> 和 <code>func(T2)</code></li>
<li><code>interface{ M() T1 }</code> 和 <code>interface{ M() T2 }</code></li>
</ul>
<p>还有一个重要的区别在于类型定义的类型的方法集和原始类型的方法集没有任何关系，而类型别名和原始类型的方法集是一样的，下面再介绍。</p>
<p>既然类型别名和原类型是相同的，那么在`switch - type中，你不能将原类型和类型别名作为两个分支，因为这是重复的case:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> <span class="string">"fmt"</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> D = <span class="typename">int</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> v <span class="keyword">interface</span>{} </div><div class="line">	<span class="keyword">var</span> d D =<span class="number"> 100</span></div><div class="line">	v = d</div><div class="line">	</div><div class="line">	<span class="keyword">switch</span> i := v.(<span class="keyword">type</span>) {</div><div class="line">		<span class="keyword">case</span> <span class="typename">int</span>:</div><div class="line">			fmt.Println(<span class="string">"it is an int:"</span>, i)</div><div class="line">		<span class="comment">// case D:</span></div><div class="line">		<span class="comment">// 	fmt.Println("it is D type:", i)</span></div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="类型循环">类型循环</h3>
<p>类型别名在定义的时候不允许出现循环定义别名的情况，如下面所示：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T1 = T2</div><div class="line"><span class="keyword">type</span> T2 = T1</div></pre></td></tr></table></figure>

<p>上面的例子太明显，下面这个例子比较隐蔽，也是循环定义类型别名的情况，当然这些在编译代码的时候编译器会帮你检查，如果出现循环定义的情况会出错。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T1 = <span class="keyword">struct</span> {</div><div class="line">	next *T2</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">type</span> T2 = T1</div></pre></td></tr></table></figure>

<h3 id="可导出性">可导出性</h3>
<p>如果定义的类型别名是<code>exported</code> (首字母大写)的，那么别的包中就可以使用，它和原始类型是否可<code>exported</code>没关系。也就是说，你可以为<code>unexported</code>类型定义一个<code>exported</code>的类型别名，如下面的例子：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> t1 <span class="keyword">struct</span> {</div><div class="line">	S <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">type</span> T2 = t1</div></pre></td></tr></table></figure>

<h3 id="方法集">方法集</h3>
<p>既然类型别名和原始类型是相同的，那么它们的方法集也是相同的。</p>
<p>下面的例子中<code>T1</code>和<code>T3</code>都有<code>say</code>和<code>greeting</code>方法。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T1 <span class="keyword">struct</span>{}</div><div class="line"><span class="keyword">type</span> T3 = T1</div><div class="line"></div><div class="line"><span class="keyword">func</span> (t1 T1) say(){}</div><div class="line"><span class="keyword">func</span> (t3 *T3) greeting(){}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> t1 T1</div><div class="line">	<span class="comment">// var t2 T2</span></div><div class="line">	<span class="keyword">var</span> t3 T3</div><div class="line"></div><div class="line">	t1.say()</div><div class="line">	t1.greeting()</div><div class="line"></div><div class="line">	t3.say()</div><div class="line">	t3.greeting()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果类型别名和原始类型定义了相同的方法，代码编译的时候会报错，因为有重复的方法定义。</p>
<p>另一个有趣的现象是 <code>embedded type</code>, 比如下面的例子， <code>T3</code>是<code>T1</code>的别名。在定义结构体<code>S</code>的时候，我们使用了匿名嵌入类型，那么这个时候调用<code>s.say</code>会怎么样呢？ 实际是你会编译出错，因为<code>s.say｀不知道该调用</code>s.T1.say<code>还是</code>s.T3.say`，所以这个时候你需要明确的调用。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> T1 <span class="keyword">struct</span>{}</div><div class="line"><span class="keyword">type</span> T3 = T1</div><div class="line"><span class="keyword">func</span> (t T1) say(){}</div><div class="line"></div><div class="line"><span class="keyword">type</span> S <span class="keyword">struct</span> {</div><div class="line">	T1</div><div class="line">	T3</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> s S</div><div class="line">	s.say()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>进一步想，这样是不是我们可以为其它库中的类型增加新的方法了， 比如为标准库的<code>time.Time</code>增加一个滴答方法:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> NTime = time.Time</div><div class="line"><span class="keyword">func</span> (t NTime) Dida() {</div><div class="line">	fmt.Println(<span class="string">"嘀嗒嘀嗒嘀嗒嘀嗒搜索"</span>)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	t := time.Now()	</div><div class="line">	t.Dida()</div><div class="line">}</div></pre></td></tr></table></figure>

<p>答案是: <strong>NO</strong>, 编译的时候会报错: <code>cannot define new methods on non-local type time.Time</code>。</p>
<h3 id="byte_和_rune_类型">byte 和 rune 类型</h3>
<p>在Go 1.9中， 内部其实使用了类型别名的特性。 比如内建的<code>byte</code>类型，其实是<code>uint8</code>的类型别名，而<code>rune</code>其实是<code>int32</code>的类型别名。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// byte is an alias for uint8 and is equivalent to uint8 in all ways. It is</span></div><div class="line"><span class="comment">// used, by convention, to distinguish byte values from 8-bit unsigned</span></div><div class="line"><span class="comment">// integer values.</span></div><div class="line"><span class="keyword">type</span> <span class="typename">byte</span> = <span class="typename">uint8</span></div><div class="line"></div><div class="line"><span class="comment">// rune is an alias for int32 and is equivalent to int32 in all ways. It is</span></div><div class="line"><span class="comment">// used, by convention, to distinguish character values from integer values.</span></div><div class="line"><span class="keyword">type</span> <span class="typename">rune</span> = <span class="typename">int32</span></div></pre></td></tr></table></figure>

<h3 id="参考资料">参考资料</h3>
<ol>
<li><a href="https://github.com/golang/proposal/blob/master/design/18130-type-alias.md" target="_blank" rel="external">https://github.com/golang/proposal/blob/master/design/18130-type-alias.md</a></li>
<li><a href="https://github.com/golang/go/issues/18130" target="_blank" rel="external">https://github.com/golang/go/issues/18130</a></li>
<li><a href="https://talks.golang.org/2016/refactor.article" target="_blank" rel="external">https://talks.golang.org/2016/refactor.article</a></li>
<li><a href="https://github.com/golang/go/issues/16339" target="_blank" rel="external">https://github.com/golang/go/issues/16339</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>如你所知， 类型别名(type aliases) 最终还是加入到Go 1.9中， Go 1.9 beta2今天已经发布了, 正式版预计8月初发布， 是时候深入了解一下它的新特性了，本文介绍的就是它的重要的新特性之一： 类型别名。 </p>
<p>当然，如果你想尝试这些新特性，需要安装Go 1.9的版本，目前是beta2版，可以在官方网站下载。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]Golang 中使用 JSON 的小技巧]]></title>
    <link href="http://colobu.com/2017/06/21/json-tricks-in-Go/"/>
    <id>http://colobu.com/2017/06/21/json-tricks-in-Go/</id>
    <published>2017-06-21T09:59:14.000Z</published>
    <updated>2017-07-28T15:12:23.272Z</updated>
    <content type="html"><![CDATA[<p><a href="https://github.com/taowen" target="_blank" rel="external">taowen</a>是<a href="https://github.com/json-iterator/go" target="_blank" rel="external">json-iterator</a>的作者。 序列化和反序列化需要处理JSON和struct的关系，其中会用到一些技巧。 原文 <a href="http://jsoniter.com/go-tips.cn.html" target="_blank" rel="external">Golang 中使用 JSON 的小技巧</a>是他的经验之谈，介绍了一些struct解析成json的技巧，以及 json-iterator 库的一些便利的处理。</p>
<p>有的时候上游传过来的字段是string类型的，但是我们却想用变成数字来使用。 本来用一个json:&quot;,string&quot; 就可以支持了，如果不知道golang的这些小技巧，就要大费周章了。</p>
<p>参考文章：<a href="http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/" target="_blank" rel="external">http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/</a></p>
<a id="more"></a>
<h3 id="临时忽略struct空字段">临时忽略struct空字段</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</div><div class="line">    Email    <span class="typename">string</span> <span class="string">`json:"email"`</span></div><div class="line">    Password <span class="typename">string</span> <span class="string">`json:"password"`</span></div><div class="line">    <span class="comment">// many more fields…</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果想临时忽略掉空<code>Password</code>字段,可以用<code>omitempty</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">json.Marshal(<span class="keyword">struct</span> {</div><div class="line">    *User</div><div class="line">    Password <span class="typename">bool</span> <span class="string">`json:"password,omitempty"`</span></div><div class="line">}{</div><div class="line">    User: user,</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="临时添加额外的字段">临时添加额外的字段</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</div><div class="line">    Email    <span class="typename">string</span> <span class="string">`json:"email"`</span></div><div class="line">    Password <span class="typename">string</span> <span class="string">`json:"password"`</span></div><div class="line">    <span class="comment">// many more fields…</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>临时忽略掉空<code>Password</code>字段，并且添加<code>token</code>字段</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">json.Marshal(<span class="keyword">struct</span> {</div><div class="line">    *User</div><div class="line">    Token    <span class="typename">string</span> <span class="string">`json:"token"`</span></div><div class="line">    Password <span class="typename">bool</span> <span class="string">`json:"password,omitempty"`</span></div><div class="line">}{</div><div class="line">    User: user,</div><div class="line">    Token: token,</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="临时粘合两个struct">临时粘合两个struct</h3>
<p>通过嵌入struct的方式:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> BlogPost <span class="keyword">struct</span> {</div><div class="line">    URL   <span class="typename">string</span> <span class="string">`json:"url"`</span></div><div class="line">    Title <span class="typename">string</span> <span class="string">`json:"title"`</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">type</span> Analytics <span class="keyword">struct</span> {</div><div class="line">    Visitors  <span class="typename">int</span> <span class="string">`json:"visitors"`</span></div><div class="line">    PageViews <span class="typename">int</span> <span class="string">`json:"page_views"`</span></div><div class="line">}</div><div class="line"></div><div class="line">json.Marshal(<span class="keyword">struct</span>{</div><div class="line">    *BlogPost</div><div class="line">    *Analytics</div><div class="line">}{post, analytics})</div></pre></td></tr></table></figure>

<h3 id="一个json切分成两个struct">一个json切分成两个struct</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">json.Unmarshal([]<span class="typename">byte</span>(<span class="string">`{</span></div><div class="line">  "url": "attila@attilaolah.eu",</div><div class="line">  "title": "Attila's Blog",</div><div class="line">  "visitors": 6,</div><div class="line">  "page_views": 14</div><div class="line">}`), &<span class="keyword">struct</span> {</div><div class="line">  *BlogPost</div><div class="line">  *Analytics</div><div class="line">}{&post, &analytics})</div></pre></td></tr></table></figure>

<h3 id="临时改名struct的字段">临时改名struct的字段</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> CacheItem <span class="keyword">struct</span> {</div><div class="line">    Key    <span class="typename">string</span> <span class="string">`json:"key"`</span></div><div class="line">    MaxAge <span class="typename">int</span>    <span class="string">`json:"cacheAge"`</span></div><div class="line">    Value  Value  <span class="string">`json:"cacheValue"`</span></div><div class="line">}</div><div class="line"></div><div class="line">json.Marshal(<span class="keyword">struct</span>{</div><div class="line">    *CacheItem</div><div class="line"></div><div class="line">    <span class="comment">// Omit bad keys</span></div><div class="line">    OmitMaxAge omit <span class="string">`json:"cacheAge,omitempty"`</span></div><div class="line">    OmitValue  omit <span class="string">`json:"cacheValue,omitempty"`</span></div><div class="line"></div><div class="line">    <span class="comment">// Add nice keys</span></div><div class="line">    MaxAge <span class="typename">int</span>    <span class="string">`json:"max_age"`</span></div><div class="line">    Value  *Value <span class="string">`json:"value"`</span></div><div class="line">}{</div><div class="line">    CacheItem: item,</div><div class="line"></div><div class="line">    <span class="comment">// Set the int by value:</span></div><div class="line">    MaxAge: item.MaxAge,</div><div class="line"></div><div class="line">    <span class="comment">// Set the nested struct by reference, avoid making a copy:</span></div><div class="line">    Value: &item.Value,</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="用字符串传递数字">用字符串传递数字</h3>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> TestObject <span class="keyword">struct</span> {</div><div class="line">    Field1 <span class="typename">int</span>    <span class="string">`json:",string"`</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>这个对应的json是 <code>{&quot;Field1&quot;: &quot;100&quot;}</code></p>
<p>如果json是 <code>{&quot;Field1&quot;: 100}</code> 则会报错</p>
<h3 id="容忍字符串和数字互转">容忍字符串和数字互转</h3>
<p>如果你使用的是jsoniter，可以启动<strong>模糊模式</strong>来支持 PHP 传递过来的 JSON。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/json-iterator/go/extra"</span></div><div class="line"></div><div class="line">extra.RegisterFuzzyDecoders()</div></pre></td></tr></table></figure>

<p>这样就可以处理字符串和数字类型不对的问题了。比如</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val <span class="typename">string</span></div><div class="line">jsoniter.UnmarshalFromString(<span class="string">`100`</span>, &val)</div></pre></td></tr></table></figure>

<p>又比如</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val <span class="typename">float32</span></div><div class="line">jsoniter.UnmarshalFromString(<span class="string">`"1.23"`</span>, &val)</div></pre></td></tr></table></figure>

<h3 id="容忍空数组作为对象">容忍空数组作为对象</h3>
<p>PHP另外一个令人崩溃的地方是，如果 PHP array是空的时候，序列化出来是<code>[]</code>。但是不为空的时候，序列化出来的是<code>{&quot;key&quot;:&quot;value&quot;}</code>。 我们需要把 <code>[]</code> 当成 <code>{}</code> 处理。</p>
<p>如果你使用的是jsoniter，可以启动模糊模式来支持 PHP 传递过来的 JSON。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/json-iterator/go/extra"</span></div><div class="line"></div><div class="line">extra.RegisterFuzzyDecoders()</div></pre></td></tr></table></figure>

<p>这样就可以支持了</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> val <span class="keyword">map</span>[<span class="typename">string</span>]<span class="keyword">interface</span>{}</div><div class="line">jsoniter.UnmarshalFromString(<span class="string">`[]`</span>, &val)</div></pre></td></tr></table></figure>

<h3 id="使用_MarshalJSON支持time-Time">使用 MarshalJSON支持time.Time</h3>
<p>golang 默认会把 <code>time.Time</code> 用字符串方式序列化。如果我们想用其他方式表示 <code>time.Time</code>，需要自定义类型并定义 <code>MarshalJSON</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> timeImplementedMarshaler time.Time</div><div class="line"></div><div class="line"><span class="keyword">func</span> (obj timeImplementedMarshaler) MarshalJSON() ([]<span class="typename">byte</span>, error) {</div><div class="line">    seconds := time.Time(obj).Unix()</div><div class="line">    <span class="keyword">return</span> []<span class="typename">byte</span>(strconv.FormatInt(seconds,<span class="number"> 10</span>)), <span class="constant">nil</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>序列化的时候会调用 MarshalJSON</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> TestObject <span class="keyword">struct</span> {</div><div class="line">    Field timeImplementedMarshaler</div><div class="line">}</div><div class="line">should := require.New(t)</div><div class="line">val := timeImplementedMarshaler(time.Unix<span class="number">(123</span>,<span class="number"> 0</span>))</div><div class="line">obj := TestObject{val}</div><div class="line">bytes, err := jsoniter.Marshal(obj)</div><div class="line">should.Nil(err)</div><div class="line">should.Equal(<span class="string">`{"Field":123}`</span>, <span class="typename">string</span>(bytes))</div></pre></td></tr></table></figure>

<h3 id="使用_RegisterTypeEncoder支持time-Time">使用 RegisterTypeEncoder支持time.Time</h3>
<p>jsoniter 能够对不是你定义的type自定义JSON编解码方式。比如对于 <code>time.Time</code> 可以用 epoch int64 来序列化</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/json-iterator/go/extra"</span></div><div class="line"></div><div class="line">extra.RegisterTimeAsInt64Codec(time.Microsecond)</div><div class="line">output, err := jsoniter.Marshal(time.Unix<span class="number">(1</span>,<span class="number"> 1002</span>))</div><div class="line">should.Equal(<span class="string">"1000001"</span>, <span class="typename">string</span>(output))</div></pre></td></tr></table></figure>

<p>如果要自定义的话，参见 <code>RegisterTimeAsInt64Codec</code> 的实现代码</p>
<h3 id="使用_MarshalText支持非字符串作为key的map">使用 MarshalText支持非字符串作为key的map</h3>
<p>虽然 JSON 标准里只支持 <code>string</code> 作为 <code>key</code> 的 <code>map</code>。但是 golang 通过 <code>MarshalText()</code> 接口，使得其他类型也可以作为 <code>map</code> 的 <code>key</code>。例如</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">f, _, _ := big.ParseFloat(<span class="string">"1"</span>,<span class="number"> 10</span>,<span class="number"> 64</span>, big.ToZero)</div><div class="line">val := <span class="keyword">map</span>[*big.Float]<span class="typename">string</span>{f: <span class="string">"2"</span>}</div><div class="line">str, err := MarshalToString(val)</div><div class="line">should.Equal(<span class="string">`{"1":"2"}`</span>, str)</div></pre></td></tr></table></figure>

<p>其中 <code>big.Float</code> 就实现了 <code>MarshalText()</code></p>
<h3 id="使用_json-RawMessage">使用 json.RawMessage</h3>
<p>如果部分json文档没有标准格式，我们可以把原始的信息用<code>[]byte</code>保存下来。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> TestObject <span class="keyword">struct</span> {</div><div class="line">    Field1 <span class="typename">string</span></div><div class="line">    Field2 json.RawMessage</div><div class="line">}</div><div class="line"><span class="keyword">var</span> data TestObject</div><div class="line">json.Unmarshal([]<span class="typename">byte</span>(<span class="string">`{"field1": "hello", "field2": [1,2,3]}`</span>), &data)</div><div class="line">should.Equal(<span class="string">` [1,2,3]`</span>, <span class="typename">string</span>(data.Field2))</div></pre></td></tr></table></figure>

<h3 id="使用_json-Number">使用 json.Number</h3>
<p>默认情况下，如果是 <code>interface{}</code> 对应数字的情况会是 <code>float64</code> 类型的。如果输入的数字比较大，这个表示会有损精度。所以可以 <code>UseNumber()</code> 启用 <code>json.Number</code> 来用字符串表示数字。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">decoder1 := json.NewDecoder(bytes.NewBufferString(<span class="string">`123`</span>))</div><div class="line">decoder1.UseNumber()</div><div class="line"><span class="keyword">var</span> obj1 <span class="keyword">interface</span>{}</div><div class="line">decoder1.Decode(&obj1)</div><div class="line">should.Equal(json.Number(<span class="string">"123"</span>), obj1)</div></pre></td></tr></table></figure>

<p>jsoniter 支持标准库的这个用法。同时，扩展了行为使得 <code>Unmarshal</code> 也可以支持 <code>UseNumber</code> 了。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">json := Config{UseNumber:<span class="constant">true</span>}.Froze()</div><div class="line"><span class="keyword">var</span> obj <span class="keyword">interface</span>{}</div><div class="line">json.UnmarshalFromString(<span class="string">"123"</span>, &obj)</div><div class="line">should.Equal(json.Number(<span class="string">"123"</span>), obj)</div></pre></td></tr></table></figure>

<h3 id="统一更改字段的命名风格">统一更改字段的命名风格</h3>
<p>经常 JSON 里的字段名 Go 里的字段名是不一样的。我们可以用 field tag 来修改。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">output, err := jsoniter.Marshal(<span class="keyword">struct</span> {</div><div class="line">    UserName      <span class="typename">string</span> <span class="string">`json:"user_name"`</span></div><div class="line">    FirstLanguage <span class="typename">string</span> <span class="string">`json:"first_language"`</span></div><div class="line">}{</div><div class="line">    UserName:      <span class="string">"taowen"</span>,</div><div class="line">    FirstLanguage: <span class="string">"Chinese"</span>,</div><div class="line">})</div><div class="line">should.Equal(<span class="string">`{"user_name":"taowen","first_language":"Chinese"}`</span>, <span class="typename">string</span>(output))</div></pre></td></tr></table></figure>

<p>但是一个个字段来设置，太麻烦了。如果使用 jsoniter，我们可以统一设置命名风格。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/json-iterator/go/extra"</span></div><div class="line"></div><div class="line">extra.SetNamingStrategy(LowerCaseWithUnderscores)</div><div class="line">output, err := jsoniter.Marshal(<span class="keyword">struct</span> {</div><div class="line">    UserName      <span class="typename">string</span></div><div class="line">    FirstLanguage <span class="typename">string</span></div><div class="line">}{</div><div class="line">    UserName:      <span class="string">"taowen"</span>,</div><div class="line">    FirstLanguage: <span class="string">"Chinese"</span>,</div><div class="line">})</div><div class="line">should.Nil(err)</div><div class="line">should.Equal(<span class="string">`{"user_name":"taowen","first_language":"Chinese"}`</span>, <span class="typename">string</span>(output))</div></pre></td></tr></table></figure>

<h3 id="使用私有的字段">使用私有的字段</h3>
<p>Go 的标准库只支持 public 的 field。jsoniter 额外支持了 private 的 field。需要使用 <code>SupportPrivateFields()</code> 来开启开关。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">"github.com/json-iterator/go/extra"</span></div><div class="line"></div><div class="line">extra.SupportPrivateFields()</div><div class="line"><span class="keyword">type</span> TestObject <span class="keyword">struct</span> {</div><div class="line">    field1 <span class="typename">string</span></div><div class="line">}</div><div class="line">obj := TestObject{}</div><div class="line">jsoniter.UnmarshalFromString(<span class="string">`{"field1":"Hello"}`</span>, &obj)</div><div class="line">should.Equal(<span class="string">"Hello"</span>, obj.field1)</div></pre></td></tr></table></figure>

<p>下面是我补充的内容</p>
<h3 id="忽略掉一些字段">忽略掉一些字段</h3>
<p>原文中第一节有个错误，我更正过来了。<code>omitempty</code>不会忽略某个字段，而是忽略空的字段，当字段的值为空值的时候，它不会出现在JSON数据中。</p>
<p>如果想忽略某个字段，需要使用 <code>json:&quot;-&quot;</code>格式。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</div><div class="line">    Email    <span class="typename">string</span> <span class="string">`json:"email"`</span></div><div class="line">    Password <span class="typename">string</span> <span class="string">`json:"password"`</span></div><div class="line">    <span class="comment">// many more fields…</span></div><div class="line">}</div></pre></td></tr></table></figure>

<p>如果想临时忽略掉空<code>Password</code>字段,可以用<code>-</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">json.Marshal(<span class="keyword">struct</span> {</div><div class="line">    *User</div><div class="line">    Password <span class="typename">bool</span> <span class="string">`json:"-"`</span></div><div class="line">}{</div><div class="line">    User: user,</div><div class="line">})</div></pre></td></tr></table></figure>

<h3 id="忽略掉一些字段2">忽略掉一些字段2</h3>
<p>如果不想更改原struct,还可以使用下面的方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> {</div><div class="line">    Email    <span class="typename">string</span> <span class="string">`json:"email"`</span></div><div class="line">    Password <span class="typename">string</span> <span class="string">`json:"password"`</span></div><div class="line">    <span class="comment">// many more fields…</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">type</span> omit *<span class="keyword">struct</span>{}</div><div class="line"></div><div class="line"><span class="keyword">type</span> PublicUser <span class="keyword">struct</span> {</div><div class="line">    *User</div><div class="line">    Password omit <span class="string">`json:"-"`</span></div><div class="line">}</div><div class="line"></div><div class="line">json.Marshal(PublicUser{</div><div class="line">    User: user,</div><div class="line">})</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p><a href="https://github.com/taowen" target="_blank" rel="external">taowen</a>是<a href="https://github.com/json-iterator/go" target="_blank" rel="external">json-iterator</a>的作者。 序列化和反序列化需要处理JSON和struct的关系，其中会用到一些技巧。 原文 <a href="http://jsoniter.com/go-tips.cn.html" target="_blank" rel="external">Golang 中使用 JSON 的小技巧</a>是他的经验之谈，介绍了一些struct解析成json的技巧，以及 json-iterator 库的一些便利的处理。</p>
<p>有的时候上游传过来的字段是string类型的，但是我们却想用变成数字来使用。 本来用一个json:&quot;,string&quot; 就可以支持了，如果不知道golang的这些小技巧，就要大费周章了。</p>
<p>参考文章：<a href="http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/" target="_blank" rel="external">http://attilaolah.eu/2014/09/10/json-and-struct-composition-in-go/</a></p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Go 1.9 的新特性]]></title>
    <link href="http://colobu.com/2017/06/20/what-s-new-in-Go-1-9/"/>
    <id>http://colobu.com/2017/06/20/what-s-new-in-Go-1-9/</id>
    <published>2017-06-20T05:17:18.000Z</published>
    <updated>2017-07-28T15:12:23.284Z</updated>
    <content type="html"><![CDATA[<p>现在 Go 1.9 beta版已发布， 正式版预期在8月初发布，让我们先来看看你Go 1.9带来了那些新特性。</p>
<a id="more"></a>
<h3 id="type_alias">type alias</h3>
<p>类型别名原本在1.8中加入的，但是临时发现有些问题，为了能全面的设计 <code>type alias</code> 被移到了 Go 1.9中了。</p>
<p>这个特性主要用在类型从一个package移动到另外一个package中的时候，导致的项目中对引入的路径不一致导致的问题， 比如原先 <code>context</code>是在<code>golang.org／x/net/context</code>包下，在Go 1.7中菜正式移到标准库<code>context</code>。</p>
<p>相关的issue: <a href="https://github.com/golang/go/issues/16339" target="_blank" rel="external">go#16339</a> <a href="https://github.com/golang/go/issues/18130" target="_blank" rel="external">go#18130</a><br>提案: <a href="https://github.com/golang/proposal/blob/master/design/18130-type-alias.md" target="_blank" rel="external">type alias</a></p>
<h3 id="并发map">并发map</h3>
<p>在Go 1.6之前， 内置的<code>map</code>类型是部分goroutine安全的，并发的读没有问题，并发的写可能有问题。自go 1.6之后， 并发地读写map会报错，这在一些知名的开源库中都存在这个问题，所以go 1.9之前的解决方案是额外绑定一个锁，封装成一个新的struct或者单独使用锁都可以。</p>
<p>群众的呼声是响亮的，并发map在项目中大量使用，所以Go 1.9中在包<code>sync</code>加入了新的map， 查询、存储和删除都是平均常数时间，可以并发访问。</p>
<h3 id="Monotonic_Time">Monotonic Time</h3>
<p>先前的<code>time</code>包的实现都是基于<code>wall time</code>的，但是当机器的时钟调整后会有问题。 比如在计算duration的时候，如果时钟往回拨，可能导致end时间比start时间还早。</p>
<p>所以Go 1.9使用<code>monotonic Time</code>来实现大部分的<code>time</code>中的函数，在计算duration的时候不会出现因为时钟调整出现的误差了。</p>
<p>设计文档: <a href="https://github.com/golang/proposal/blob/master/design/12914-monotonic.md" target="_blank" rel="external">monotonic time</a></p>
<h3 id="位处理操作">位处理操作</h3>
<p>新增加了<code>math/bits</code>包， 提供了很多位运算的函数。</p>
<h3 id="Test_Helper函数">Test Helper函数</h3>
<p>新加｀(<em>T).Helper<code>和</code>(</em>B).Helper m｀， 用来标记调用的函数是一个测试辅助函数，当输出文件名和行数的时候，这个函数回呗忽略。</p>
<h3 id="标准库的微小改动">标准库的微小改动</h3>
<p>标准库也有一些小的功能的加入和提升， 比如<code>image</code>、<code>net</code>、<code>runtime</code>、<code>sync</code>等。</p>
<h3 id="并行编译">并行编译</h3>
<p>支持并行地编译函数，并且在Go 1.9中势默认设置。如果不想并行编译，设置GO19CONCURRENTCOMPILATION为0。</p>
<h3 id="-/-_会忽略vendor下的包">./... 会忽略vendor下的包</h3>
<p>这一条很有用，以后你在Makefile中可以直接使用<code>./...</code>,而不是曲折地将vendor文件夹排除。</p>
<p>如果你想使用vendor下的包， 可以使用<code>./vendor/...</code>通配符。</p>
<h3 id="性能提升">性能提升</h3>
<p>性能提升多少势很难精确描述的，对于大部分的程序，应该运行更快一点。</p>
<p>主要在于垃圾回收器的优化、更好的生成的代码以及核心库的优化。</p>
<p>完整的信息可以参考 <a href="https://golang.org/doc/go1.9" target="_blank" rel="external">Tip Go 1.9 Release Notes</a>, Go 1.9发布后可以访问<a href="https://golang.org/doc/go1.9" target="_blank" rel="external">Go 1.9 Release Notes</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>现在 Go 1.9 beta版已发布， 正式版预期在8月初发布，让我们先来看看你Go 1.9带来了那些新特性。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]使用os/exec执行命令]]></title>
    <link href="http://colobu.com/2017/06/19/advanced-command-execution-in-Go-with-os-exec/"/>
    <id>http://colobu.com/2017/06/19/advanced-command-execution-in-Go-with-os-exec/</id>
    <published>2017-06-19T07:28:52.000Z</published>
    <updated>2017-07-28T15:12:23.261Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="https://blog.kowalczyk.info/article/wOYk/advanced-command-execution-in-go-with-osexec.html" target="_blank" rel="external">Advanced command execution in Go with os/exec</a> by Krzysztof Kowalczyk.<br>完整代码在作者的github上： <a href="https://github.com/kjk/go-cookbook/blob/master/advanced-exec" target="_blank" rel="external">advanced-exec</a></p>
<p>Go可以非常方便地执行外部程序，让我们开始探索之旅吧。</p>
<a id="more"></a>
<h3 id="执行命令并获得输出结果">执行命令并获得输出结果</h3>
<p>最简单的例子就是运行<code>ls -lah</code>并获得组合在一起的stdout/stderr输出。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	cmd := exec.Command(<span class="string">"ls"</span>, <span class="string">"-lah"</span>)</div><div class="line">	out, err := cmd.CombinedOutput()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">	}</div><div class="line">	fmt.Printf(<span class="string">"combined out:\n%s\n"</span>, <span class="typename">string</span>(out))</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="将stdout和stderr分别处理">将stdout和stderr分别处理</h3>
<p>和上面的例子类似，只不过将stdout和stderr分别处理。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">func main() {</div><div class="line">	cmd := exec.<span class="type">Command</span>(<span class="string">"ls"</span>, <span class="string">"-lah"</span>)</div><div class="line">	<span class="keyword">var</span> <span class="literal">stdout</span>, <span class="literal">stderr</span> bytes.<span class="type">Buffer</span></div><div class="line">	cmd.<span class="type">Stdout</span> = &<span class="literal">stdout</span></div><div class="line">	cmd.<span class="type">Stderr</span> = &<span class="literal">stderr</span></div><div class="line">	err := cmd.<span class="type">Run</span>()</div><div class="line">	<span class="keyword">if</span> err != <span class="keyword">nil</span> {</div><div class="line">		log.<span class="type">Fatalf</span>(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">	}</div><div class="line">	outStr, errStr := <span class="type">string</span>(<span class="literal">stdout</span>.<span class="type">Bytes</span>()), <span class="type">string</span>(<span class="literal">stderr</span>.<span class="type">Bytes</span>())</div><div class="line">	fmt.<span class="type">Printf</span>(<span class="string">"out:\n%s\nerr:\n%s\n"</span>, outStr, errStr)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="命令执行过程中获得输出">命令执行过程中获得输出</h3>
<p>如果一个命令需要花费很长时间才能执行完呢？</p>
<p>除了能获得它的stdout/stderr，我们还希望在控制台显示命令执行的进度。</p>
<p>有点小复杂。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> copyAndCapture(w io.Writer, r io.Reader) ([]<span class="typename">byte</span>, error) {</div><div class="line">	<span class="keyword">var</span> out []<span class="typename">byte</span></div><div class="line">	buf := <span class="built_in">make</span>([]<span class="typename">byte</span>,<span class="number"> 1024</span>,<span class="number"> 1024</span>)</div><div class="line">	<span class="keyword">for</span> {</div><div class="line">		n, err := r.Read(buf[:])</div><div class="line">		<span class="keyword">if</span> n &gt;<span class="number"> 0</span> {</div><div class="line">			d := buf[:n]</div><div class="line">			out = <span class="built_in">append</span>(out, d...)</div><div class="line">			os.Stdout.Write(d)</div><div class="line">		}</div><div class="line">		<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">			<span class="comment">// Read returns io.EOF at the end of file, which is not an error for us</span></div><div class="line">			<span class="keyword">if</span> err == io.EOF {</div><div class="line">				err = <span class="constant">nil</span></div><div class="line">			}</div><div class="line">			<span class="keyword">return</span> out, err</div><div class="line">		}</div><div class="line">	}</div><div class="line">	<span class="comment">// never reached</span></div><div class="line">	<span class="built_in">panic</span>(<span class="constant">true</span>)</div><div class="line">	<span class="keyword">return</span> <span class="constant">nil</span>, <span class="constant">nil</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	cmd := exec.Command(<span class="string">"ls"</span>, <span class="string">"-lah"</span>)</div><div class="line">	<span class="keyword">var</span> stdout, stderr []<span class="typename">byte</span></div><div class="line">	<span class="keyword">var</span> errStdout, errStderr error</div><div class="line">	stdoutIn, _ := cmd.StdoutPipe()</div><div class="line">	stderrIn, _ := cmd.StderrPipe()</div><div class="line">	cmd.Start()</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		stdout, errStdout = copyAndCapture(os.Stdout, stdoutIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		stderr, errStderr = copyAndCapture(os.Stderr, stderrIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	err := cmd.Wait()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> errStdout != <span class="constant">nil</span> || errStderr != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"failed to capture stdout or stderr\n"</span>)</div><div class="line">	}</div><div class="line">	outStr, errStr := <span class="typename">string</span>(stdout), <span class="typename">string</span>(stderr)</div><div class="line">	fmt.Printf(<span class="string">"\nout:\n%s\nerr:\n%s\n"</span>, outStr, errStr)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="命令执行过程中获得输出2">命令执行过程中获得输出2</h3>
<p>上一个方案虽然工作，但是看起来<code>copyAndCapture</code>好像重新实现了<code>io.Copy</code>。由于Go的接口的功能，我们可以重用<code>io.Copy</code>。</p>
<p>我们写一个<code>CapturingPassThroughWriter</code>struct，它实现了<code>io.Writer</code>接口。它会捕获所有的数据并写入到底层的<code>io.Writer</code>。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// CapturingPassThroughWriter is a writer that remembers</span></div><div class="line"><span class="comment">// data written to it and passes it to w</span></div><div class="line"><span class="keyword">type</span> CapturingPassThroughWriter <span class="keyword">struct</span> {</div><div class="line">	buf bytes.Buffer</div><div class="line">	w io.Writer</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// NewCapturingPassThroughWriter creates new CapturingPassThroughWriter</span></div><div class="line"><span class="keyword">func</span> NewCapturingPassThroughWriter(w io.Writer) *CapturingPassThroughWriter {</div><div class="line">	<span class="keyword">return</span> &CapturingPassThroughWriter{</div><div class="line">		w: w,</div><div class="line">	}</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (w *CapturingPassThroughWriter) Write(d []<span class="typename">byte</span>) (<span class="typename">int</span>, error) {</div><div class="line">	w.buf.Write(d)</div><div class="line">	<span class="keyword">return</span> w.w.Write(d)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">// Bytes returns bytes written to the writer</span></div><div class="line"><span class="keyword">func</span> (w *CapturingPassThroughWriter) Bytes() []<span class="typename">byte</span> {</div><div class="line">	<span class="keyword">return</span> w.buf.Bytes()</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> errStdout, errStderr error</div><div class="line">	cmd := exec.Command(<span class="string">"ls"</span>, <span class="string">"-lah"</span>)</div><div class="line">	stdoutIn, _ := cmd.StdoutPipe()</div><div class="line">	stderrIn, _ := cmd.StderrPipe()</div><div class="line">	stdout := NewCapturingPassThroughWriter(os.Stdout)</div><div class="line">	stderr := NewCapturingPassThroughWriter(os.Stderr)</div><div class="line">	err := cmd.Start()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Start() failed with '%s'\n"</span>, err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		_, errStdout = io.Copy(stdout, stdoutIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		_, errStderr = io.Copy(stderr, stderrIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	err = cmd.Wait()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> errStdout != <span class="constant">nil</span> || errStderr != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"failed to capture stdout or stderr\n"</span>)</div><div class="line">	}</div><div class="line">	outStr, errStr := <span class="typename">string</span>(stdout.Bytes()), <span class="typename">string</span>(stderr.Bytes())</div><div class="line">	fmt.Printf(<span class="string">"\nout:\n%s\nerr:\n%s\n"</span>, outStr, errStr)</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="命令执行过程中获得输出3">命令执行过程中获得输出3</h3>
<p>事实上Go标准库包含一个更通用的<code>io.MultiWriter</code>,我们可以直接使用它。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	<span class="keyword">var</span> stdoutBuf, stderrBuf bytes.Buffer</div><div class="line">	cmd := exec.Command(<span class="string">"ls"</span>, <span class="string">"-lah"</span>)</div><div class="line"></div><div class="line">	stdoutIn, _ := cmd.StdoutPipe()</div><div class="line">	stderrIn, _ := cmd.StderrPipe()</div><div class="line"></div><div class="line">	<span class="keyword">var</span> errStdout, errStderr error</div><div class="line">	stdout := io.MultiWriter(os.Stdout, &stdoutBuf)</div><div class="line">	stderr := io.MultiWriter(os.Stderr, &stderrBuf)</div><div class="line">	err := cmd.Start()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Start() failed with '%s'\n"</span>, err)</div><div class="line">	}</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		_, errStdout = io.Copy(stdout, stdoutIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	<span class="keyword">go</span> <span class="keyword">func</span>() {</div><div class="line">		_, errStderr = io.Copy(stderr, stderrIn)</div><div class="line">	}()</div><div class="line"></div><div class="line">	err = cmd.Wait()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		log.Fatalf(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">	}</div><div class="line">	<span class="keyword">if</span> errStdout != <span class="constant">nil</span> || errStderr != <span class="constant">nil</span> {</div><div class="line">		log.Fatal(<span class="string">"failed to capture stdout or stderr\n"</span>)</div><div class="line">	}</div><div class="line">	outStr, errStr := <span class="typename">string</span>(stdoutBuf.Bytes()), <span class="typename">string</span>(stderrBuf.Bytes())</div><div class="line">	fmt.Printf(<span class="string">"\nout:\n%s\nerr:\n%s\n"</span>, outStr, errStr)</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>自己实现是很好滴，但是熟悉标准库并使用它更好。</p>
<h3 id="改变执行程序的环境(environment)">改变执行程序的环境(environment)</h3>
<p>你已经知道了怎么在程序中获得环境变量，对吧： ｀os.Environ()｀返回所有的环境变量<code>[]string</code>,每个字符串以<code>FOO=bar</code>格式存在。<code>FOO</code>是环境变量的名称，<code>bar</code>是环境变量的值， 也就是<code>os.Getenv(&quot;FOO&quot;)</code>的返回值。</p>
<p>有时候你可能想修改执行程序的环境。</p>
<p>你可设置<code>exec.Cmd</code>的<code>Env</code>的值，和<code>os.Environ()</code>格式相同。通常你不会构造一个全新的环境，而是添加自己需要的环境变量：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">   cmd := exec.Command(<span class="string">"programToExecute"</span>)</div><div class="line">additionalEnv := <span class="string">"FOO=bar"</span></div><div class="line">newEnv := <span class="built_in">append</span>(os.Environ(), additionalEnv))</div><div class="line">cmd.Env = newEnv</div><div class="line">out, err := cmd.CombinedOutput()</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">	log.Fatalf(<span class="string">"cmd.Run() failed with %s\n"</span>, err)</div><div class="line">}</div><div class="line">fmt.Printf(<span class="string">"%s"</span>, out)</div></pre></td></tr></table></figure>

<p>包 <a href="https://godoc.org/github.com/shurcooL/go/osutil#Environ" target="_blank" rel="external">shurcooL/go/osutil</a>提供了便利的方法设置环境变量。</p>
<h3 id="预先检查程序是否存在">预先检查程序是否存在</h3>
<p>想象一下你写了一个程序需要花费很长时间执行，再最后你调用<code>foo</code>做一些基本的任务。</p>
<p>如果<code>foo</code>程序不存在，程序会执行失败。</p>
<p>当然如果我们预先能检查程序是否存在就完美了，如果不存在就打印错误信息。</p>
<p>你可以调用<code>exec.LookPath</code>方法来检查：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> checkLsExists() {</div><div class="line">	path, err := exec.LookPath(<span class="string">"ls"</span>)</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		fmt.Printf(<span class="string">"didn't find 'ls' executable\n"</span>)</div><div class="line">	} <span class="keyword">else</span> {</div><div class="line">		fmt.Printf(<span class="string">"'ls' executable is in '%s'\n"</span>, path)</div><div class="line">	}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>另一个检查的办法就是让程序执行一个空操作， 比如传递参数&quot;--help&quot;显示帮助信息。</p>
<p>下面的章节是<a href="http://colobu.com" target="_blank" rel="external">译者</a>补充的内容</p>
<h3 id="管道">管道</h3>
<p>我们可以使用管道将多个命令串联起来， 上一个命令的输出是下一个命令的输入。</p>
<p>使用<code>os.Exec</code>有点麻烦，你可以使用下面的方法：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"bytes"</span></div><div class="line">    <span class="string">"io"</span></div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"os/exec"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    c1 := exec.Command(<span class="string">"ls"</span>)</div><div class="line">    c2 := exec.Command(<span class="string">"wc"</span>, <span class="string">"-l"</span>)</div><div class="line"></div><div class="line">    r, w := io.Pipe() </div><div class="line">    c1.Stdout = w</div><div class="line">    c2.Stdin = r</div><div class="line"></div><div class="line">    <span class="keyword">var</span> b2 bytes.Buffer</div><div class="line">    c2.Stdout = &b2</div><div class="line"></div><div class="line">    c1.Start()</div><div class="line">    c2.Start()</div><div class="line">    c1.Wait()</div><div class="line">    w.Close()</div><div class="line">    c2.Wait()</div><div class="line">    io.Copy(os.Stdout, &b2)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>或者直接使用<code>Cmd</code>的<code>StdoutPipe</code>方法，而不是自己创建一个io.Pipe`。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">    <span class="string">"os"</span></div><div class="line">    <span class="string">"os/exec"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">    c1 := exec.Command(<span class="string">"ls"</span>)</div><div class="line">    c2 := exec.Command(<span class="string">"wc"</span>, <span class="string">"-l"</span>)</div><div class="line">    c2.Stdin, _ = c1.StdoutPipe()</div><div class="line">    c2.Stdout = os.Stdout</div><div class="line">    _ = c2.Start()</div><div class="line">    _ = c1.Run()</div><div class="line">    _ = c2.Wait()</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="管道2">管道2</h3>
<p>上面的解决方案是Go风格的解决方案，事实上你还可以用一个&quot;Trick&quot;来实现。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"os/exec"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	cmd := <span class="string">"cat /proc/cpuinfo | egrep '^model name' | uniq | awk '{print substr($0, index($0,$4))}'"</span></div><div class="line">	out, err := exec.Command(<span class="string">"bash"</span>, <span class="string">"-c"</span>, cmd).Output()</div><div class="line">	<span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">		fmt.Printf(<span class="string">"Failed to execute command: %s"</span>, cmd)</div><div class="line">	}</div><div class="line"></div><div class="line">	fmt.Println(<span class="typename">string</span>(out))</div><div class="line">}</div></pre></td></tr></table></figure>

]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="https://blog.kowalczyk.info/article/wOYk/advanced-command-execution-in-go-with-osexec.html" target="_blank" rel="external">Advanced command execution in Go with os/exec</a> by Krzysztof Kowalczyk.<br>完整代码在作者的github上： <a href="https://github.com/kjk/go-cookbook/blob/master/advanced-exec" target="_blank" rel="external">advanced-exec</a></p>
<p>Go可以非常方便地执行外部程序，让我们开始探索之旅吧。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[突破限制,访问其它Go package中的私有函数]]></title>
    <link href="http://colobu.com/2017/05/12/call-private-functions-in-other-packages/"/>
    <id>http://colobu.com/2017/05/12/call-private-functions-in-other-packages/</id>
    <published>2017-05-12T07:09:50.000Z</published>
    <updated>2017-07-28T15:12:23.267Z</updated>
    <content type="html"><![CDATA[<p>熟悉C++、Java、C#等面向对象的编程语言的同学，在学习Go语言的过程中，经常会被访问权限所困扰，逐渐才能了解这样一个事实：</p>
<p><strong> Go语言通过<code>identifier</code>的首字母是否大写来决定它是否可以被其它package所访问。</strong></p>
<p>正式的Go语言规范是这么规定的：</p>
<blockquote>
<p>An identifier may be exported to permit access to it from another package. An identifier is exported if both:</p>
<p>the first character of the identifier&#39;s name is a Unicode upper case letter (Unicode class &quot;Lu&quot;); and<br>the identifier is declared in the package block or it is a field name or method name.</p>
<p>All other identifiers are not exported.</p>
</blockquote>
<p>这个Go语言规范定义的访问权限控制方法。</p>
<a id="more"></a>
<p>但是有没有办法突破这个限制呢？</p>
<p>突破可以从两个方向来讨论： 将<code>exported</code>类型变为其它package不可访问；将<code>unexported</code>的类型变为其它package可访问。</p>
<h3 id="将exported类型变为其它package不可访问">将<code>exported</code>类型变为其它package不可访问</h3>
<p>至少有一个办法可以将package中 exported的函数、类型变为其它package不可访问， 那就是定义一个<code>internal</code> package,将这些package放在<code>internal</code> package之下。</p>
<p>Go语言本身没有这个限制，这是通过<code>go</code>命令实现的。最早这个特性是在 <a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="external">go 1.4</a>版本中引入的，相关的细节可以查看文档： <a href="https://docs.google.com/document/d/1e8kOo3r51b2BWtTs_1uADIA5djfXhPT36s6eHVRIvaU/edit" target="_blank" rel="external">design document</a></p>
<p>这个规则是这样的：</p>
<blockquote>
<p>An import of a path containing the element “internal” is disallowed if the importing code is outside the tree rooted at the parent of the “internal” directory.</p>
</blockquote>
<p>也就是<code>internal</code>包下的 exported 类型只能由internal所在的package (internal的parent)为root的package所访问。</p>
<p>举例来说：</p>
<ul>
<li><code>/a/b/c/internal/d/e/f</code> 可以被<code>/a/b/c</code> import， 不能被 <code>/a/b/g</code> import.</li>
<li><code>$GOROOT/src/pkg/internal/xxx</code>只可以被标准库import ($GOROOT/src/).</li>
<li><code>$GOROOT/src/pkg/net/http/internal</code> 只可以被 <code>net/http</code> 和 <code>net/http/*</code> import.</li>
<li><code>$GOPATH/src/mypkg/internal/foo</code> 只能被<code>$GOPATH/src/mypkg</code> import.</li>
</ul>
<h3 id="访问其它package中的私有方法">访问其它package中的私有方法</h3>
<p>如果你查看 Go 标准库的的代码， 比如 <a href="https://github.com/golang/go/blob/master/src/time/sleep.go" target="_blank" rel="external">time/sleep.go</a> 文件， 你会发现一些奇怪的函数， 如 <code>Sleep</code>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">func</span> Sleep(d Duration)</div></pre></td></tr></table></figure>

<p>这个函数我们经常会用到， 也就是<code>time.Sleep</code>函数，但是这个函数并没有函数体，而且同样的目录下也没有汇编语言的代码实现，那么，这个函数在哪里定义的？</p>
<p>依照<a href="https://golang.org/ref/spec#Function_declarations" target="_blank" rel="external">规范</a>，一个只有函数声明的函数是在Go的外部实现的，我们称之为<code>external function</code>。</p>
<p>实际上，这个&quot;外部函数&quot;也是在Go标准库中实现的，它是 runtime中的一个 unexported的函数:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//go:linkname timeSleep time.Sleep</span></div><div class="line"><span class="keyword">func</span> timeSleep(ns <span class="typename">int64</span>) {</div><div class="line">	<span class="keyword">if</span> ns &lt;=<span class="number"> 0</span> {</div><div class="line">		<span class="keyword">return</span></div><div class="line">	}</div><div class="line"></div><div class="line">	t := getg().timer</div><div class="line">	<span class="keyword">if</span> t == <span class="constant">nil</span> {</div><div class="line">		t = <span class="built_in">new</span>(timer)</div><div class="line">		getg().timer = t</div><div class="line">	}</div><div class="line"></div><div class="line">    ......</div><div class="line"></div><div class="line">}</div></pre></td></tr></table></figure>

<p>事实上，runtime为其它 package中定义了很多的函数，比如<code>sync</code>、<code>net</code>中的一些函数，你可以通过命令<code>grep linkname /usr/local/go/src/runtime/*.go</code>查找这些函数。</p>
<p>我们会有两个疑问：一是为什么这些函数要定义在 runtime package中，而是这个机制到底是怎么实现的？</p>
<p>将相关的函数定义在<code>runtime</code>中的好处是， 它们可以访问 runtime package中 unexported的类型， 比如<code>getp</code>函数等，相当于往 runtime package打入一个&quot;叛徒&quot;,通过&quot;叛徒&quot;可以访问 runtime package 的私有对象。同时，这些&quot;叛徒&quot;函数尽管被声明为unexported,还是可以在其它package中访问。</p>
<p>第二个问题，其实是Go的<code>go:linkname</code>这个指令发挥的作用,它的格式如下：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//go:linkname localname importpath.name</span></div></pre></td></tr></table></figure>

<p><a href="https://golang.org/cmd/compile/" target="_blank" rel="external">Go文档</a>说明了这个指令的作用：</p>
<blockquote>
<p>The //go:linkname directive instructs the compiler to use “importpath.name” as the object file symbol name for the variable or function declared as “localname” in the source code. Because this directive can subvert the type system and package modularity, it is only enabled in files that have imported &quot;unsafe&quot;.</p>
</blockquote>
<p>这个指令告诉编译器为函数或者变量<code>localname</code>使用<code>importpath.name</code>作为目标文件的符号名。因为这个指令破坏了类型系统和包的模块化，所以它只能在 import &quot;unsafe&quot; 的情况下才能使用。</p>
<p><code>importpath.name</code>可以是这种格式:<code>a/b/c/d/apkg.foo</code>，这样在package <code>a/b/c/d/apkg</code>中就可以使用这个函数<code>foo</code>了。</p>
<p>举个例子,假设我们的package布局如下:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">├── <span class="keyword">a</span></div><div class="line">│   └── <span class="keyword">a</span>.<span class="keyword">go</span></div><div class="line">├── <span class="keyword">b</span></div><div class="line">│   ├── <span class="keyword">b</span>.<span class="keyword">go</span></div><div class="line">│   └── internal.<span class="keyword">s</span></div><div class="line">└── main</div><div class="line">    └── main.<span class="keyword">go</span></div></pre></td></tr></table></figure>

<p>package <strong>a</strong> 定义了私有的方法,并加上 <code>go:linkname</code>指令， package <strong>b</strong> 可以调用 package <strong>a</strong>的私有方法。 <strong>main.go</strong> 测试访问 <strong>b</strong>中的函数。</p>
<p>首先看看<code>a.go</code>中的实现：</p>
<figure class="highlight go"><figcaption><span>a.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> a</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	_ <span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//go:linkname say a.say</span></div><div class="line"><span class="comment">//go:nosplit</span></div><div class="line"><span class="keyword">func</span> say(name <span class="typename">string</span>) <span class="typename">string</span> {</div><div class="line">	<span class="keyword">return</span> <span class="string">"hello, "</span> + name</div><div class="line">}</div><div class="line"></div><div class="line"><span class="comment">//go:linkname say2 github.com/smallnest/private/b.Hi</span></div><div class="line"><span class="comment">//go:nosplit</span></div><div class="line"><span class="keyword">func</span> say2(name <span class="typename">string</span>) <span class="typename">string</span> {</div><div class="line">	<span class="keyword">return</span> <span class="string">"hi, "</span> + name</div><div class="line">}</div></pre></td></tr></table></figure>

<p>它定义了两个方法，符号名分别为<code>a.say</code>和<code>github.com/smallnest/private/b.Hi</code>。</p>
<p>这个不同的符号名的方式会影响<strong>b</strong>中的使用。</p>
<figure class="highlight go"><figcaption><span>b.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> b</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	_ <span class="string">"unsafe"</span></div><div class="line"></div><div class="line">	_ <span class="string">"github.com/smallnest/private/a"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">//go:linkname say a.say</span></div><div class="line"><span class="keyword">func</span> say(name <span class="typename">string</span>) <span class="typename">string</span></div><div class="line"></div><div class="line"><span class="keyword">func</span> Greet(name <span class="typename">string</span>) <span class="typename">string</span> {</div><div class="line">	<span class="keyword">return</span> say(name)</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> Hi(name <span class="typename">string</span>) <span class="typename">string</span></div></pre></td></tr></table></figure>

<p>在<strong>b</strong> 中，如果想使用符号<code>a.say</code>，你还是需要<code>go:linkname</code>,告诉编译器这个函数的符号为<code>a.say</code>。对于<code>Hi</code>函数， 我们不需要<code>go:linkname</code>指令，因为在<code>a.go</code>中我们定义的符号名称<strong>恰巧</strong>就是这个<code>package.funcname</code>。</p>
<p>注意，你需要引入package <code>unsafe</code>,并且在<strong>b.go</strong>还需要import package a.</p>
<p>你可以在<code>main.go</code>中调用<strong>b</strong>:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"github.com/smallnest/private/b"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> main() {</div><div class="line">	s := b.Greet(<span class="string">"world"</span>)</div><div class="line">	fmt.Println(s)</div><div class="line">	s = b.Hi(<span class="string">"world"</span>)</div><div class="line">	fmt.Println(s)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>但是，如果你<code>go  run main.go</code>,你不会得到正确的结果，而是会出错：</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">main <span class="keyword">go</span> run main.<span class="keyword">go</span></div><div class="line"># github.com/smallnest/private/b</div><div class="line">../b/b.<span class="keyword">go</span><span class="number">:10</span>: missing function body <span class="keyword">for</span> <span class="string">"say"</span></div><div class="line">../b/b.<span class="keyword">go</span><span class="number">:16</span>: missing function body <span class="keyword">for</span> <span class="string">"Hi"</span></div></pre></td></tr></table></figure>

<p>难道我们前面讲的都是错的吗？</p>
<p>这里有一个技巧，你在 package b下创建一个空的文件， w文件名随意，只要文件后缀为<code>.s</code>，再运行一下<code>go  run main.go</code>：</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">main go run main.go</div><div class="line">hello, world</div><div class="line">hi, world</div></pre></td></tr></table></figure>

<p>原因在于Go在编译的时候会启用<code>-complete</code>编译器flag,它要求所有的函数必需包含函数体。创建一个空的汇编语言文件绕过这个限制。</p>
<p>当然， 一般情况下我们不会用到本文所列出的两种突破方式，只有在很稀少的情况下，为了更好地组织我们的代码，我们才会有选择的采用这两种方法。至少，作为一个Go开发者，你会记住有两种突破方法，可以打破Go语言规范中关于权限的限制。</p>
<h3 id="访问其它package中的struct_私有字段">访问其它package中的struct 私有字段</h3>
<p>再额外附送一个技巧， 可以访问其它package struct的私有字段。</p>
<p>当然正常情况下struct的私有字段并没有export，所以在其它package是不能正常访问。通过使用<code>refect</code>,可以访问struct的私有字段:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"reflect"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/smallnest/private/c"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> ChangeFoo(f *c.Foo) {</div><div class="line">	v := reflect.ValueOf(f)</div><div class="line">	x := v.Elem().FieldByName(<span class="string">"x"</span>)</div><div class="line">	fmt.Println(x.Int())</div><div class="line">	<span class="comment">//panic: reflect: reflect.Value.SetInt using value obtained using unexported field</span></div><div class="line">	<span class="comment">//x.SetInt(100)</span></div><div class="line">	fmt.Println(x.Int())</div><div class="line"></div><div class="line">	y := v.Elem().FieldByName(<span class="string">"Y"</span>)</div><div class="line">	y.SetString(<span class="string">"world"</span>)</div><div class="line">	fmt.Println(f.Y)</div><div class="line">}</div></pre></td></tr></table></figure>

<p>但是你不能设置私有字段的值，否则会panic,这是因为<code>SetXXX</code>会首先使用<code>v.mustBeAssignable()</code>检查字段是否是exported的。</p>
<p>当然，还可以通过&quot;指针&quot;的方式获取字段的地址，通过地址获取数据或者设置数据。<br>还是用相同的例子：</p>
<figure class="highlight go"><figcaption><span>c.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> c</div><div class="line"></div><div class="line"><span class="keyword">type</span> Foo <span class="keyword">struct</span> {</div><div class="line">	x <span class="typename">int</span></div><div class="line">	Y <span class="typename">string</span></div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> (f Foo) X() <span class="typename">int</span> {</div><div class="line">	<span class="keyword">return</span> f.x</div><div class="line">}</div><div class="line"></div><div class="line"><span class="keyword">func</span> New(x <span class="typename">int</span>, y <span class="typename">string</span>) *Foo {</div><div class="line">	<span class="keyword">return</span> &Foo{x: x, Y: y}</div><div class="line">}</div></pre></td></tr></table></figure>

<p>在package d中访问：</p>
<figure class="highlight go"><figcaption><span>d.go</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> d</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"unsafe"</span></div><div class="line"></div><div class="line">	<span class="string">"github.com/smallnest/private/c"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">func</span> ChangeFoo(f *c.Foo) {</div><div class="line">	p := unsafe.Pointer(f)</div><div class="line">	<span class="comment">// 事先获取或者通过 reflect获得</span></div><div class="line">	<span class="comment">// 本例中是第一个字段，所以offset=0</span></div><div class="line">	offset := <span class="typename">uintptr</span><span class="number">(0</span>)</div><div class="line">	ptr2x := (*<span class="typename">int</span>)(unsafe.Pointer(<span class="typename">uintptr</span>(p) + offset))</div><div class="line">	fmt.Println(*ptr2x)</div><div class="line">	*ptr2x =<span class="number"> 100</span></div><div class="line">	fmt.Println(f.X())</div><div class="line">}</div></pre></td></tr></table></figure>

<h3 id="更hack的方法">更hack的方法</h3>
<p>如果你还不满足，那么我再赠送一个更hack的方法，但是这个也有点限制，就是你腰调用的方法应该在之前的某处调用过。</p>
<p>这是 Alan Pierce 提供了一个方法。<a href="https://golang.org/src/runtime/symtab.go" target="_blank" rel="external">runtime/symtab.go</a>中保存了符号表，通过一些技巧(<code>go:linkname</code>),能访问它的私有方法，查找到想要调用的函数，然后就可以调用了，Alan将相关的代码写成了一个库，方便调用：<a href="https://github.com/alangpierce/go-forceexport" target="_blank" rel="external">go-forceexport</a>。</p>
<p>使用方法如下:</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> timeNow <span class="keyword">func</span>() (<span class="typename">int64</span>, <span class="typename">int32</span>)</div><div class="line">err := forceexport.GetFunc(&timeNow, <span class="string">"time.now"</span>)</div><div class="line"><span class="keyword">if</span> err != <span class="constant">nil</span> {</div><div class="line">    <span class="comment">// Handle errors if you care about name possibly being invalid.</span></div><div class="line">}</div><div class="line"><span class="comment">// Calls the actual time.now function.</span></div><div class="line">sec, nsec := timeNow()</div></pre></td></tr></table></figure>

<p>我在使用的过程中发现只有相应的方法在某处调用过, 符号表中才有这个函数的信息， <code>forceexport.GetFunc</code>才会返回对应的函数。</p>
<p>另外，这是一个非常hack的方式，不保证Go将来的版本是否还能使用，仅供嬉戏之用，慎用在产品代码中。</p>
<h3 id="参考文档">参考文档</h3>
<ol>
<li><a href="https://golang.org/cmd/compile/" target="_blank" rel="external">https://golang.org/cmd/compile/</a></li>
<li><a href="https://github.com/golang/go/issues/15006" target="_blank" rel="external">https://github.com/golang/go/issues/15006</a></li>
<li><a href="https://siadat.github.io/post/golinkname" target="_blank" rel="external">https://siadat.github.io/post/golinkname</a></li>
<li><a href="https://sitano.github.io/2016/04/28/golang-private/" target="_blank" rel="external">https://sitano.github.io/2016/04/28/golang-private/</a></li>
<li><a href="https://golang.org/doc/go1.4#internalpackages" target="_blank" rel="external">https://golang.org/doc/go1.4#internalpackages</a></li>
<li><a href="http://www.alangpierce.com/blog/2016/03/17/adventures-in-go-accessing-unexported-functions/" target="_blank" rel="external">http://www.alangpierce.com/blog/2016/03/17/adventures-in-go-accessing-unexported-functions/</a></li>
<li><a href="https://groups.google.com/forum/#!topic/golang-nuts/ppGGazd9KXI" target="_blank" rel="external">https://groups.google.com/forum/#!topic/golang-nuts/ppGGazd9KXI</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>熟悉C++、Java、C#等面向对象的编程语言的同学，在学习Go语言的过程中，经常会被访问权限所困扰，逐渐才能了解这样一个事实：</p>
<p><strong> Go语言通过<code>identifier</code>的首字母是否大写来决定它是否可以被其它package所访问。</strong></p>
<p>正式的Go语言规范是这么规定的：</p>
<blockquote>
<p>An identifier may be exported to permit access to it from another package. An identifier is exported if both:</p>
<p>the first character of the identifier&#39;s name is a Unicode upper case letter (Unicode class &quot;Lu&quot;); and<br>the identifier is declared in the package block or it is a field name or method name.</p>
<p>All other identifiers are not exported.</p>
</blockquote>
<p>这个Go语言规范定义的访问权限控制方法。</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]通过 raft 的 leader lease 来解决集群脑裂时的 stale read 问题]]></title>
    <link href="http://colobu.com/2017/05/08/raft-and-network-partitions/"/>
    <id>http://colobu.com/2017/05/08/raft-and-network-partitions/</id>
    <published>2017-05-08T08:29:12.000Z</published>
    <updated>2017-05-12T14:50:19.023Z</updated>
    <content type="html"><![CDATA[<p>PingCap联合创始人、CTO 黄东旭写的一篇解决Raft网络分区的一种方案: <a href="https://pingcap.com/blog-stale-read-zh" target="_blank" rel="external">通过 raft 的 leader lease 来解决集群脑裂时的 stale read 问题</a>。本文转载之。</p>
<p><strong>问题</strong>： 当 raft group 发生脑裂的情况下，老的 raft leader 可能在一段时间内并不知道新的 leader 已经被选举出来，这时候客户端在老的 leader 上可能会读取出陈旧的数据（stale read）。 比如，我们假想一个拥有 5 个节点的 raft group:</p>
<a id="more"></a>
<p><img src="1.png" alt=""></p>
<p>其中 <strong>Node 5</strong> 是当前的 raft leader，当出现网络分区时，在 Node 5 的 raft lease 任期还没结束的一段时间内，Node 5 仍然认为自己是当前 term 的 leader，但是此时，另外一边分区已经在新的 term 中选出了新的 leader。</p>
<p><img src="2.png" alt=""></p>
<p>如果此时，客户端在新的 leader 上更新了某个值 x，此时是可以更新成功的（因为还是可以复制到多数派）。但是在分区的另一端，此时一个客户端去读取 x 的值，Node 5 还会返回老的值，这样就发生了 <strong>stale read</strong>。</p>
<p><strong>解决方案</strong>:</p>
<p>引入一个新的概念, <strong>region leader</strong>。region leader 是一个逻辑上的概念, 任意时刻对于某一个 region 来说, 一定只拥有一个 region leader, 每个 region leader 在任期之内尝试每隔 t 时间间隔, 在 raft group 内部更新一下 region leader 的 lease. 所有的读写请求都必须通过 region leader 完成， 但是值得注意的是， region leader 和 raft leader 可能不是一个节点，当 region leader 和 raft leader 不重合的时候，region leader 会将请求转发给当前的 raft leader，当网络出现分区时，会出现以下几种情况：</p>
<ol>
<li>region leader 落在多数派，老 raft leader 在多数派这边</li>
<li>region leader 落在多数派，老 raft leader 在少数派这边</li>
<li>region leader 落在少数派，老 raft leader 在多数派这边</li>
<li>region leader 落在少数派，老 raft leader 在少数派这边</li>
</ol>
<p>用开篇的例子来分情况讨论：</p>
<p>对于第一种情况，region leader 的 lease 不会过期，因为 region leader 的心跳仍然能更新到多数派的节点上，老的 raft leader 仍然能同步到大多数节点上，少数派这边也不会选举出新的 leader， 这种情况下不会出现 stale read。</p>
<p><img src="4.png" alt=""></p>
<p>第二种情况，就是开篇提到会出现 stale read 的典型情况，老的 raft leader 被分到了少数派这边，多数派这边选举出了新的 raft leader ，如果此时的 region leader 在多数派这边。</p>
<p><img src="5.png" alt=""></p>
<p>因为所有的读写请求都会找到 region leader 进行，即使在原来没有出现网络分区的情况下，客户端的请求也都是要走 node 1 ，经由 node 1 转发给 node 5，客户端不会直接访问 node 5，所以此时即使网络出现分区，新 leader 也正好在多数派这边，读写直接就打到 node 1 上，皆大欢喜，没有 stale read。</p>
<p>第三种情况，region leader 落在少数派这边，老 raft leader 在多数派这边，这种情况客户端的请求找到 region leader，他发现的无法联系到 leader（因为在少数派这边没有办法选举出新的 leader），请求会失败，直到本次 region leader 的 lease 过期，同时新的 region leader 会在多数派那边产生（因为新的 region leader 需要尝试走一遍 raft 流程）。因为老的 region leader 没办法成功的写入，所以也不会出现 stale read。但是付出的代价是在 region leader lease 期间的系统的可用性。</p>
<p>第四种情况和第三种情况类似，多数派这边会产生新的 raft leader 和 region leader。</p>
<p>总体来说，这种方法牺牲了一定的可用性（在脑裂时部分客户端的可用性）换取了一致性的保证。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>PingCap联合创始人、CTO 黄东旭写的一篇解决Raft网络分区的一种方案: <a href="https://pingcap.com/blog-stale-read-zh" target="_blank" rel="external">通过 raft 的 leader lease 来解决集群脑裂时的 stale read 问题</a>。本文转载之。</p>
<p><strong>问题</strong>： 当 raft group 发生脑裂的情况下，老的 raft leader 可能在一段时间内并不知道新的 leader 已经被选举出来，这时候客户端在老的 leader 上可能会读取出陈旧的数据（stale read）。 比如，我们假想一个拥有 5 个节点的 raft group:</p>
]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[转]Golang调度器源码分析]]></title>
    <link href="http://colobu.com/2017/05/04/golang-runtime-scheduler/"/>
    <id>http://colobu.com/2017/05/04/golang-runtime-scheduler/</id>
    <published>2017-05-04T11:27:25.000Z</published>
    <updated>2017-05-12T14:50:18.964Z</updated>
    <content type="html"><![CDATA[<p>原文: <a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html" target="_blank" rel="external">Golang调度器源码分析</a>, 作者: 无心之祸<br><a id="more"></a></p>
<h3 id="为什么Golang需要调度器？">为什么Golang需要调度器？</h3>
<p>Goroutine的引入是为了方便高并发程序的编写。 一个Goroutine在进行阻塞操作（比如系统调用）时，会把当前线程中的其他Goroutine移交到其他线程中继续执行， 从而避免了整个程序的阻塞。</p>
<p>由于Golang引入了垃圾回收（gc），在执行gc时就要求Goroutine是停止的。通过自己实现调度器，就可以方便的实现该功能。 通过多个Goroutine来实现并发程序，既有异步IO的优势，又具有多线程、多进程编写程序的便利性。</p>
<p>引入Goroutine，也意味着引入了极大的复杂性。一个Goroutine既要包含要执行的代码， 又要包含用于执行该代码的栈和PC、SP指针。</p>
<h3 id="调度器解决了什么问题？">调度器解决了什么问题？</h3>
<h4 id="栈管理">栈管理</h4>
<p>既然每个Goroutine都有自己的栈，那么在创建Goroutine时，就要同时创建对应的栈。 Goroutine在执行时，栈空间会不停增长。 栈通常是连续增长的，由于每个进程中的各个线程共享虚拟内存空间，当有多个线程时，就需要为每个线程分配不同起始地址的栈。 这就需要在分配栈之前先预估每个线程栈的大小。如果线程数量非常多，就很容易栈溢出。</p>
<p>为了解决这个问题，就有了Split Stacks技术： 创建栈时，只分配一块比较小的内存，如果进行某次函数调用导致栈空间不足时，就会在其他地方分配一块新的栈空间。 新的空间不需要和老的栈空间连续。函数调用的参数会拷贝到新的栈空间中，接下来的函数执行都在新栈空间中进行。</p>
<p>Golang的栈管理方式与此类似，但是为了更高的效率，使用了连续栈 （Golang连续栈） 实现方式也是先分配一块固定大小的栈，在栈空间不足时，分配一块更大的栈，并把旧的栈全部拷贝到新栈中。 这样避免了Split Stacks方法可能导致的频繁内存分配和释放。</p>
<h4 id="抢占式调度">抢占式调度</h4>
<p>Goroutine的执行是可以被抢占的。如果一个Goroutine一直占用CPU，长时间没有被调度过， 就会被runtime抢占掉，把CPU时间交给其他Goroutine。</p>
<h3 id="调度器的设计">调度器的设计</h3>
<p>Golang调度器引入了三个结构来对调度的过程建模：</p>
<ul>
<li>G 代表一个Goroutine；</li>
<li>M 代表一个操作系统的线程；</li>
<li>P 代表一个CPU处理器，通常P的数量等于CPU核数（GOMAXPROCS）。</li>
</ul>
<p>三者都在runtime2.go中定义，他们之间的关系如下：</p>
<ul>
<li>G需要绑定在M上才能运行；</li>
<li>M需要绑定P才能运行；</li>
<li>程序中的多个M并不会同时都处于执行状态，最多只有GOMAXPROCS个M在执行。</li>
</ul>
<p>早期版本的Golang是没有P的，调度是由G与M完成。 这样的问题在于每当创建、终止Goroutine或者需要调度时，需要一个全局的锁来保护调度的相关对象(sched)。 全局锁严重影响Goroutine的并发性能。 (<a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit" target="_blank" rel="external">Scalable Go Scheduler</a>)</p>
<p>通过引入P，实现了一种叫做work-stealing的调度算法：</p>
<ul>
<li>每个P维护一个G队列；</li>
<li>当一个G被创建出来，或者变为可执行状态时，就把他放到P的可执行队列中；</li>
<li>当一个G执行结束时，P会从队列中把该G取出；如果此时P的队列为空，即没有其他G可以执行， 就随机选择另外一个P，从其可执行的G队列中偷取一半。</li>
</ul>
<p>该算法避免了在Goroutine调度时使用全局锁。</p>
<h3 id="调度器的实现">调度器的实现</h3>
<h4 id="schedule()与findrunnable()函数">schedule()与findrunnable()函数</h4>
<p>Goroutine调度是在P中进行，每当runtime需要进行调度时，会调用schedule()函数， 该函数在proc1.go文件中定义。</p>
<p>schedule()函数首先调用runqget()从当前P的队列中取一个可以执行的G。 如果队列为空，继续调用findrunnable()函数。findrunnable()函数会按照以下顺序来取得G：</p>
<ol>
<li>调用runqget()从当前P的队列中取G（和schedule()中的调用相同）；</li>
<li>调用globrunqget()从全局队列中取可执行的G；</li>
<li>调用netpoll()取异步调用结束的G，该次调用为非阻塞调用，直接返回；</li>
<li>调用runqsteal()从其他P的队列中“偷”。</li>
</ol>
<p>如果以上四步都没能获取成功，就继续执行一些低优先级的工作：</p>
<ol>
<li>如果处于垃圾回收标记阶段，就进行垃圾回收的标记工作；</li>
<li>再次调用globrunqget()从全局队列中取可执行的G；</li>
<li>再次调用netpoll()取异步调用结束的G，该次调用为阻塞调用。</li>
</ol>
<p>如果还没有获得G，就停止当前M的执行，返回findrunnable()函数开头重新执行。 如果findrunnable()正常返回一个G，shedule()函数会调用execute()函数执行该G。 execute()函数会调用gogo()函数（在汇编源文件asm_XXX.s中定义，XXX代表系统架构），gogo() 函数会从G.sched结构中恢复出G上次被调度器暂停时的寄存器现场（SP、PC等），然后继续执行。</p>
<h4 id="如何进行抢占?">如何进行抢占?</h4>
<p>runtime在程序启动时，会自动创建一个系统线程，运行sysmon()函数（在proc1.go中定义）。 sysmon()函数在整个程序生命周期中一直执行，负责监视各个Goroutine的状态、判断是否要进行垃圾回收等。</p>
<p>sysmon()会调用retake()函数，retake()函数会遍历所有的P，如果一个P处于执行状态， 且已经连续执行了较长时间，就会被抢占。retake()调用preemptone()将P的stackguard0设为stackPreempt(关于stackguard的详细内容，可以参考 <a href="https://gcc.gnu.org/wiki/SplitStacks" target="_blank" rel="external">Split Stacks</a>)，这将导致该P中正在执行的G进行下一次函数调用时， 导致栈空间检查失败。进而触发morestack()（汇编代码，位于asm_XXX.s中）然后进行一连串的函数调用，主要的调用过程如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">morestack<span class="function"><span class="params">()</span>（汇编代码）-&gt;</span> newstack<span class="function"><span class="params">()</span> -&gt;</span> gopreempt_m<span class="function"><span class="params">()</span> -&gt;</span> goschedImpl<span class="function"><span class="params">()</span> -&gt;</span> schedule()</div></pre></td></tr></table></figure>

<p>在goschedImpl()函数中，会通过调用dropg()将G与M解除绑定；再调用globrunqput()将G加入全局runnable队列中。最后调用schedule() 来用为当前P设置新的可执行的G。</p>
<p>关于Golang抢占式调度的进一步学习，可以参考 <a href="https://docs.google.com/document/d/1ETuA2IOmnaQ4j81AtTGT40Y4_Jr6_IDASEKg0t0dBR8/edit" target="_blank" rel="external">Go Preemptive Scheduler Design Doc</a>。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>原文: <a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html" target="_blank" rel="external">Golang调度器源码分析</a>, 作者: 无心之祸<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[[译]Go 调度器: M, P 和 G]]></title>
    <link href="http://colobu.com/2017/05/04/go-scheduler/"/>
    <id>http://colobu.com/2017/05/04/go-scheduler/</id>
    <published>2017-05-04T08:32:59.000Z</published>
    <updated>2017-05-12T14:50:18.936Z</updated>
    <content type="html"><![CDATA[<p>这是另一篇关于Go调度器(scheduler)的文章。 原文: <a href="https://povilasv.me/go-scheduler/" target="_blank" rel="external">GO SCHEDULER: MS, PS &amp; GS</a> by Uber工程师 Povilas。</p>
<p>网上已经有很多关于Go调度器的文章了， 比如<a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html" target="_blank" rel="external">Golang调度器源码分析</a>,多看一些，可以加深记忆，也可以对比查看文章中是否有不准确的地方,更全面的了解Go的调度器。</p>
<p>我决定深入了解Go的内部机制， 因为很长时间没人写关于Go scheduler的文章了， 我觉得这是一个很有趣的知识点，所以让我们开始吧。<br><a id="more"></a></p>
<h3 id="基础知识">基础知识</h3>
<p>Go的运行时管理着调度、垃圾回收以及goroutine的运行环境。本文只关注于调度器。</p>
<p>运行时负责运行goroutine并把它们影射到操作系统的线程上。goroutine比线程还轻量， 启动的时候花费很少。每个goroutine都是由一个<strong>G</strong>结构来表示，<br>这个结构体的字段用来跟踪此goroutine的栈(stack)和状态，所以你可以认为<code>G = goroutine</code>。</p>
<p>运行时管理着<strong>G</strong>并把它们映射到<strong>Logical Processor</strong>(称之为<strong>P</strong>). <strong>P</strong>可以看作是一个抽象的资源或者一个上下文，它需要获取以便操作系统线程(称之为<strong>M</strong>)可以运行<strong>G</strong>。</p>
<p>通过<code>runtime.GOMAXPROCS (numLogicalProcessors)</code>可以控制多少<strong>P</strong>可以获取。如果你需要调整这个参数(大部分情况下你无需调整)， 只设置一次， 因为它需要 <code>STW</code> gc pause。</p>
<p>本质上，操作系统运行线程，线程运行你的代码。Go的技巧是编译器会在Go运行时的一些地方插入系统调用， （比如通过channel发送值,调用runtime包等），所以Go可以通知调度器执行特定的操作。</p>
<p><img src="go-runtime.png" alt=""></p>
<p>上图的理解来自 <a href="http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf" target="_blank" rel="external">Analysis of the Go runtime scheduler</a></p>
<h3 id="M、P_和_G_之间的交互">M、P 和 G 之间的交互</h3>
<p><strong>M</strong>、<strong>P</strong>和<strong>G</strong>之间的交互有点复杂。看看下面这张来自 Gao Chao的<a href="https://speakerdeck.com/retervision/go-runtime-scheduler" target="_blank" rel="external">go runtime scheduler</a> 幻灯片中的一张图：</p>
<p><img src="go-sched.png" alt=""></p>
<p>可以看到，Go运行时存在两种类型的queue： 一种是一个全局的queue(在<a href="https://github.com/golang/go/blob/5dd978a283ca445f8b5f255773b3904497365b61/src/runtime/runtime2.go#L536" target="_blank" rel="external">schedt结构体中</a>，很少用到)， 一种是每个<strong>P</strong>都维护自己的<strong>G</strong>的queue。</p>
<p>为了运行goroutine, <strong>M</strong>需要持有上下文<strong>P</strong>。<strong>M</strong>会从<strong>P</strong>的queue弹出一个goroutine并执行。</p>
<p>当你创建一个新的goroutine的时候(<code>go func()</code>方法)，它会被放入<strong>P</strong>的queue。当然还有一个 <code>work-stealing</code>调度算法，当<strong>M</strong>执行了一些<strong>G</strong>后,如果它的queue为空，它会随机的选择另外一个<strong>P</strong>,从它的queue中取走一半的<strong>G</strong>到自己的queue中执行。(偷!)</p>
<p>当你的goroutine执行阻塞的系统调用的时候(syscall)，阻塞的系统调用会中断(intercepted)，如果当前有一些<strong>G</strong>在执行，运行时会把这个线程从<strong>P</strong>中摘除(detach)，然后再创建一个新的操作系统的线程(如果没有空闲的线程可用的话)来服务于这个<strong>P</strong>。</p>
<p>当系统调用继续的时候，这个goroutine被放入到本地运行queue，线程会<code>park</code>它自己(休眠)， 加入到空闲线程中。</p>
<p>如果一个goroutine执行网络调用，运行时会做类似的动作。调用会被中断，但是由于Go使用集成的network poller,它有自己的线程，所以还给它。</p>
<p>Go运行时会在下面的goroutine被阻塞的情况下运行另外一个goroutine：</p>
<p>－ blocking syscall (for example opening a file),<br>－ network input,<br>－ channel operations,<br>－ primitives in the sync package.</p>
<h3 id="调度器跟踪调试">调度器跟踪调试</h3>
<p>Go可以跟踪运行时的调度器，这是通过 <code>GODEBUG</code> 环境变量实现的:</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ GODEBUG=scheddetail=<span class="number">1</span>,schedtrace=<span class="number">1000</span> ./program</div></pre></td></tr></table></figure>

<p>下面是输出的例子:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">SCHED <span class="number">0</span>ms: <span class="variable">gomaxprocs=</span><span class="number">8</span> <span class="variable">idleprocs=</span><span class="number">7</span> <span class="variable">threads=</span><span class="number">2</span> <span class="variable">spinningthreads=</span><span class="number">0</span> <span class="variable">idlethreads=</span><span class="number">0</span> <span class="variable">runqueue=</span><span class="number">0</span> <span class="variable">gcwaiting=</span><span class="number">0</span> <span class="variable">nmidlelocked=</span><span class="number">0</span> <span class="variable">stopwait=</span><span class="number">0</span> <span class="variable">sysmonwait=</span><span class="number">0</span></div><div class="line">  P0: <span class="variable">status=</span><span class="number">1</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span><span class="number">0</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P1: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P2: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P3: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P4: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P5: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P6: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  P7: <span class="variable">status=</span><span class="number">0</span> <span class="variable">schedtick=</span><span class="number">0</span> <span class="variable">syscalltick=</span><span class="number">0</span> <span class="variable">m=</span>-<span class="number">1</span> <span class="variable">runqsize=</span><span class="number">0</span> <span class="variable">gfreecnt=</span><span class="number">0</span></div><div class="line">  M1: <span class="variable">p=</span>-<span class="number">1</span> <span class="variable">curg=</span>-<span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">preemptoff=</span> <span class="variable">locks=</span><span class="number">1</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="constant">false</span> <span class="variable">blocked=</span><span class="constant">false</span> <span class="variable">lockedg=</span>-<span class="number">1</span></div><div class="line">  M0: <span class="variable">p=</span><span class="number">0</span> <span class="variable">curg=</span><span class="number">1</span> <span class="variable">mallocing=</span><span class="number">0</span> <span class="variable">throwing=</span><span class="number">0</span> <span class="variable">preemptoff=</span> <span class="variable">locks=</span><span class="number">1</span> <span class="variable">dying=</span><span class="number">0</span> <span class="variable">helpgc=</span><span class="number">0</span> <span class="variable">spinning=</span><span class="constant">false</span> <span class="variable">blocked=</span><span class="constant">false</span> <span class="variable">lockedg=</span><span class="number">1</span></div><div class="line">  G1: <span class="variable">status=</span><span class="number">8</span>() <span class="variable">m=</span><span class="number">0</span> <span class="variable">lockedm=</span><span class="number">0</span></div></pre></td></tr></table></figure>

<p>注意输出使用了 <strong>G</strong>、<strong>M</strong>和<strong>P</strong>的概念以及她们的状态， 比如<strong>P</strong>的queue的大小。 如果你不想关心这些细节，你可以使用：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ <span class="variable">GODEBUG=</span><span class="variable">schedtrace=</span><span class="number">1000</span> ./program</div></pre></td></tr></table></figure>

<p>William Kennedy写了一篇很好的<a href="https://www.goinggo.net/2015/02/scheduler-tracing-in-go.html" target="_blank" rel="external">文章</a>, 解释了这些细节。</p>
<p>当然，还有一个go自己的工具 <code>go tool trace</code>, 它有一个UI, 允许你查看你的程序和运行时的状况。你可以阅读这篇文章:  <a href="https://making.pusher.com/go-tool-trace" target="_blank" rel="external">Pusher</a>。</p>
<p><strong>参考文档</strong></p>
<ol>
<li><a href="https://www.slideshare.net/matthewrdale/demystifying-the-go-scheduler" target="_blank" rel="external">Slides by Matthew Dale</a></li>
<li><a href="http://www.cs.columbia.edu/~aho/cs6998/reports/12-12-11_DeshpandeSponslerWeiss_GO.pdf" target="_blank" rel="external">Columbia University paper: Analysis of the Go runtime scheduler</a></li>
<li><a href="https://docs.google.com/document/d/1TTj4T2JO42uD5ID9e89oa0sLKhJYD0Y_kqxDv3I3XMw/edit?usp=sharing" target="_blank" rel="external">Scalable Go Scheduler Design Doc</a></li>
<li><a href="https://news.ycombinator.com/item?id=12459841" target="_blank" rel="external">Hacker news chat which explains a lot</a></li>
<li><a href="https://speakerdeck.com/retervision/go-runtime-scheduler" target="_blank" rel="external">go runtime scheduler slides by Gao Chao</a></li>
<li><a href="http://morsmachine.dk/go-scheduler" target="_blank" rel="external">Morsmachine article</a></li>
</ol>
]]></content>
    <summary type="html">
    <![CDATA[<p>这是另一篇关于Go调度器(scheduler)的文章。 原文: <a href="https://povilasv.me/go-scheduler/" target="_blank" rel="external">GO SCHEDULER: MS, PS &amp; GS</a> by Uber工程师 Povilas。</p>
<p>网上已经有很多关于Go调度器的文章了， 比如<a href="http://ga0.github.io/golang/2015/09/20/golang-runtime-scheduler.html" target="_blank" rel="external">Golang调度器源码分析</a>,多看一些，可以加深记忆，也可以对比查看文章中是否有不准确的地方,更全面的了解Go的调度器。</p>
<p>我决定深入了解Go的内部机制， 因为很长时间没人写关于Go scheduler的文章了， 我觉得这是一个很有趣的知识点，所以让我们开始吧。<br>]]>
    
    </summary>
    
      <category term="Go" scheme="http://colobu.com/categories/Go/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[OAuth2 RFC6749中文翻译]]></title>
    <link href="http://colobu.com/2017/04/28/oauth2-rfc6749/"/>
    <id>http://colobu.com/2017/04/28/oauth2-rfc6749/</id>
    <published>2017-04-28T03:36:23.000Z</published>
    <updated>2017-05-12T14:50:19.016Z</updated>
    <content type="html"><![CDATA[<p>转自 <a href="https://github.com/jeansfish/RFC6749.zh-cn" target="_blank" rel="external">RFC 6749-OAuth 2.0授权框架简体中文翻译</a><br><a id="more"></a></p>
<h1 id="1-_简介">1. 简介</h1>
<p>在传统的客户端-服务器身份验证模式中，客户端请求服务器上限制访问的资源（受保护资源）时，需要使用资源所有者的凭据在服务器上进行身份验证。<br>资源所有者为了给第三方应用提供受限资源的访问，需要与第三方共享它的凭据。 这造成一些问题和局限：</p>
<ul>
<li>需要第三方应用存储资源所有者的凭据，以供将来使用，通常是明文密码。</li>
<li>需要服务器支持密码身份认证，尽管密码认证天生就有安全缺陷。</li>
<li>第三方应用获得的资源所有者的受保护资源的访问权限过于宽泛，从而导致资源所有者失去对资源使用时限或使用范围的控制。</li>
<li>资源所有者不能仅撤销某个第三方的访问权限而不影响其它，并且，资源所有者只有通过改变第三方的密码，才能单独撤销这第三方的访问权限。</li>
<li>与任何第三方应用的让步导致对终端用户的密码及该密码所保护的所有数据的让步。</li>
</ul>
<p>OAuth通过引入授权层以及分离客户端角色和资源所有者角色来解决这些问题。<br>在OAuth中，客户端在请求受资源所有者控制并托管在资源服务器上的资源的访问权限时，将被颁发一组不同于资源所有者所拥有凭据的凭据。</p>
<p>客户端获得一个访问令牌（一个代表特定作用域、生命期以及其他访问属性的字符串），用以代替使用资源所有者的凭据来访问受保护资源。<br>访问令牌由授权服务器在资源所有者认可的情况下颁发给第三方客户端。客户端使用访问令牌访问托管在资源服务器的受保护资源。</p>
<p>例如，终端用户（资源所有者）可以许可一个打印服务（客户端）访问她存储在图片分享网站（资源服务器）上的受保护图片，而无需与打印服务分享自己的用户名和密码。<br>反之，她直接与图片分享网站信任的服务器（授权服务器）进行身份验证，该服务器颁发给打印服务具体委托凭据（访问令牌）。</p>
<p>本规范是为HTTP（<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>）协议量身定制。在任何非HTTP协议上使用OAuth不在本规范的范围之内。</p>
<p>OAuth 1.0协议（<a href="http://tools.ietf.org/html/rfc5849" title="OAuth 1.0协议" target="_blank" rel="external">RFC5849</a>）作为一个指导性文档发布，是一个小社区的工作成果。<br>本标准化规范在OAuth 1.0的部署经验之上构建，也包括其他使用案例以及从更广泛的IETF社区收集到的可扩展性需求。<br>OAuth 2.0协议不向后兼容OAuth 1.0。这两个版本可以在网络上共存，实现者可以选择同时支持他们。<br>然而，本规范的用意是新的实现支持按本文档指定的Auth 2.0，OAuth 1.0仅用于支持现有的部署。<br>OAuth 2.0协议与OAuth 1.0协议实现细节没有太多关联。熟悉OAuth 1.0的实现者应该学习本文档，而不对有关OAuth 2.0的结构和细节做任何假设。</p>
<ul>
<li>1.1. <a href="1.1.md">角色</a></li>
<li>1.2. <a href="1.2.md">协议流程</a></li>
<li>1.3. <a href="1.3.md">授权许可</a><ul>
<li>1.3.1. <a href="1.3.1.md">授权码</a></li>
<li>1.3.2. <a href="1.3.2.md">隐式授权</a></li>
<li>1.3.3. <a href="1.3.3.md">资源所有者密码凭据</a></li>
<li>1.3.4. <a href="1.3.4.md">客户端凭据</a></li>
</ul>
</li>
<li>1.4. <a href="1.4.md">访问令牌</a></li>
<li>1.5. <a href="1.5.md">刷新令牌</a></li>
<li>1.6. <a href="1.6.md">TLS版本</a></li>
<li>1.7. <a href="1.7.md">HTTP重定向</a></li>
<li>1.8. <a href="1.8.md">互操作性</a></li>
<li>1.9. <a href="1.9.md">符号约定</a></li>
</ul>
<h2 id="Links">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>下一节 <a href="1.1.md">1.1 角色</a></li>
</ul>
<h1 id="1-1-_角色">1.1. 角色</h1>
<p>OAuth定义了四种角色：</p>
<ul>
<li><p>资源所有者</p>
<p>能够许可受保护资源访问权限的实体。当资源所有者是个人时，它作为最终用户被提及。 </p>
</li>
<li><p>资源服务器</p>
<p>托管受保护资源的服务器，能够接收和响应使用访问令牌对受保护资源的请求。</p>
</li>
<li><p>客户端</p>
<p>使用资源所有者的授权代表资源所有者发起对受保护资源的请求的应用程序。术语“客户端”并非特指任何特定的的实现特点（例如：应用程序是否在服务器、台式机或其他设备上执行）。</p>
</li>
<li><p>授权服务器</p>
<p>在成功验证资源所有者且获得授权后颁发访问令牌给客户端的服务器。<br>授权服务器和资源服务器之间的交互超出了本规范的范围。授权服务器可以和资源服务器是同一台服务器，也可以是分离的个体。一个授权服务器可以颁发被多个资源服务器接受的访问令牌。</p>
</li>
</ul>
<h2 id="Links-1">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.md">1. 简介</a></li>
<li>下一节 <a href="1.2.md">1.2 协议流程</a></li>
</ul>
<h1 id="1-2-_协议流程">1.2. 协议流程</h1>
<pre><code> <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(A)</span><span class="literal">-</span> <span class="comment">Authorization</span> <span class="comment">Request</span> <span class="literal">-</span>&gt;<span class="comment">|</span>   <span class="comment">Resource</span>    <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="comment">|</span>     <span class="comment">Owner</span>     <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(B)</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Authorization</span> <span class="comment">Grant</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>        <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(C)</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Authorization</span> <span class="comment">Grant</span> <span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span> <span class="comment">Authorization</span> <span class="comment">|</span>
 <span class="comment">|</span> <span class="comment">Client</span> <span class="comment">|</span>                               <span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(D)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>        <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(E)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>    <span class="comment">Resource</span>   <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>                               <span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
 <span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(F)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Protected</span> <span class="comment">Resource</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>               <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                               <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
</code></pre><p>图1：抽象的协议流程</p>
<p>图1中所示的抽象OAuth 2.0流程描述了四个角色之间的交互，包括以下步骤：</p>
<ul>
<li>（A）客户端向从资源所有者请求授权。授权请求可以直接向资源所有者发起（如图所示），或者更可取的是通过作为中介的授权服务器间接发起。</li>
<li>（B）客户端收到授权许可，这是一个代表资源所有者的授权的凭据，使用本规范中定义的四种许可类型之一或  者使用扩展许可类型表示。授权许可类型取决于客户端请求授权所使用的方式以及授权服务器支持的类型。</li>
<li>（C）客户端与授权服务器进行身份认证并出示授权许可请求访问令牌。</li>
<li>（D）授权服务器验证客户端身份并验证授权许可，若有效则颁发访问令牌。 </li>
<li>（E）客户端从资源服务器请求受保护资源并出示访问令牌进行身份验证。</li>
<li>（F）资源服务器验证访问令牌，若有效则满足该请求。</li>
</ul>
<p>客户端用于从资源所有者获得授权许可（步骤（A）和（B）所示）的更好方法是使用授权服务器作为中介，如                    <a href="../Section04/4.1.md">4.1节</a>图3所示。</p>
<h2 id="Links-2">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.1.md">角色</a></li>
<li>下一节 <a href="1.3.md">授权许可</a></li>
</ul>
<h1 id="1-3-_授权许可">1.3. 授权许可</h1>
<p>授权许可是一个代表资源所有者授权（访问受保护资源）的凭据，客户端用它来获取访问令牌。本规范定义了四种许可类型——授权码、隐式许可、资源所有者密码凭据和客户端凭据——以及用于定义其他类型的可扩展性机制。</p>
<ul>
<li>1.3.1. <a href="1.3.1.md">授权码</a></li>
<li>1.3.2. <a href="1.3.2.md">隐式授权</a></li>
<li>1.3.3. <a href="1.3.3.md">资源所有者密码凭据</a></li>
<li>1.3.4. <a href="1.3.4.md">客户端凭据</a></li>
</ul>
<h2 id="Links-3">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.2.md">协议流程</a></li>
<li>下一节 <a href="1.3.1.md">授权码</a></li>
</ul>
<h1 id="1-3-1-_授权码">1.3.1. 授权码</h1>
<p>授权码通过使用授权服务器做为客户端与资源所有者的中介而获得。客户端不是直接从资源所有者请求授权，而是引导资源所有者至授权服务器（由在<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>中定义的用户代理），授权服务器之后引导资源所有者带着授权码回到客户端。</p>
<p>在引导资源所有者携带授权码返回客户端前，授权服务器会鉴定资源所有者身份并获得其授权。由于资源所有者只与授权服务器进行身份验证，所以资源所有者的凭据不需要与客户端分享。</p>
<p>授权码提供了一些重要的安全益处，例如验证客户端身份的能力，以及向客户端直接的访问令牌的传输而非通过资源所有者的用户代理来传送它而潜在暴露给他人（包括资源所有者）。</p>
<h2 id="Links-4">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.3.md">授权许可</a></li>
<li>下一节 <a href="1.3.2.md">隐式授权</a></li>
</ul>
<h1 id="1-3-2-_隐式许可">1.3.2. 隐式许可</h1>
<p>隐式许可是为用如JavaScript等脚本语言在浏览器中实现的客户端而优化的一种简化的授权码流程。在隐式许可流程中，不再给客户端颁发授权码，取而代之的是客户端直接被颁发一个访问令牌（作为资源所有者的授权）。这种许可类型是隐式的，因为没有中间凭据（如授权码）被颁发（之后用于获取访问令牌）。</p>
<p>当在隐式许可流程中颁发访问令牌时，发授权服务器不对客户端进行身份验证。在某些情况下，客户端身份可以通过用于向客户端传送访问令牌的重定向URI验证。访问令牌可能会暴露给资源所有者，或者对资源所有者的用户代理有访问权限的其他应用程序。</p>
<p>隐式许可提高了一些客户端（例如一个作为浏览器内应用实现的客户端）的响应速度和效率，因为它减少了获取访问令牌所需的往返数量。然而，这种便利应该和采用隐式许可的安全影响作权衡，如那些在<a href="../Section10/10.3.md">10.3</a>和<a href="../Section10/10.16.md">10.16</a>节中所述的，尤其是当授权码许可类型可用的时候。</p>
<h2 id="Links-5">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.3.1md">授权码</a></li>
<li>下一节 <a href="1.3.3.md">资源所有者密码授权</a></li>
</ul>
<h1 id="1-3-3-_资源所有者密码凭据">1.3.3. 资源所有者密码凭据</h1>
<p>资源所有者密码凭据（即用户名和密码），可以直接作为获取访问令牌的授权许可。这种凭据只能应该当资源所有者和客户端之间具有高度信任时（例如，客户端是设备的操作系统的一部分，或者是一个高度特权应用程序），以及当其他授权许可类型（例如授权码）不可用时被使用。</p>
<p>尽管本授权类型需要对资源所有者凭据直接的客户端访问权限，但资源所有者凭据仅被用于一次请求并被交换为访问令牌。通过凭据和长期有效的访问令牌或刷新令牌的互换，这种许可类型可以消除客户端存储资源所有者凭据供将来使用的需要。</p>
<h2 id="Links-6">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.3.2.md">隐式授权</a></li>
<li>下一节 <a href="1.3.4.md">客户端凭据</a></li>
</ul>
<h1 id="1-3-4-_客户端凭据">1.3.4. 客户端凭据</h1>
<p>当授权范围限于客户端控制下的受保护资源或事先与授权服务器商定的受保护资源时客户端凭据可以被用作为一种授权许可。典型的当客户端代表自己表演（客户端也是资源所有者）或者基于与授权服务器事先商定的授权请求对受保护资源的访问权限时，客户端凭据被用作为授权许可。</p>
<h2 id="Links-7">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.3.3.md">资源所有者密码授权</a></li>
<li>下一节 <a href="1.4.md">访问令牌</a></li>
</ul>
<h1 id="1-4-_访问令牌">1.4. 访问令牌</h1>
<p>访问令牌是用于访问受保护资源的凭据。访问令牌是一个代表向客户端颁发的授权的字符串。该字符串通常对于客户端是不透明的。令牌代表了访问权限的由资源所有者许可并由资源服务器和授权服务器实施的具体范围和期限。</p>
<p>令牌可以表示一个用于检索授权信息的标识符或者可以以可验证的方式自包含授权信息（即令牌字符串由数据和签名组成）。额外的身份验证凭据——在本规范范围以外——可以被要求以便客户端使用令牌。</p>
<p>访问令牌提供了一个抽象层，用单一的资源服务器能理解的令牌代替不同的授权结构（例如，用户名和密码）。这种抽象使得颁发访问令牌比颁发用于获取令牌的授权许可更受限制，同时消除了资源服务器理解各种各样身份认证方法的需要。</p>
<p>基于资源服务器的安全要求访问令牌可以有不同的格式、结构及采用的方法（如，加密属性）。访问令牌的属性和用于访问受保护资源的方法超出了本规范的范围，它们在<a href="http://tools.ietf.org/html/rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage" target="_blank" rel="external">RFC6750</a>等配套规范中定义。</p>
<h2 id="Links-8">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.3.4.md">客户端凭据</a></li>
<li>下一节 <a href="1.5.md">刷新令牌</a></li>
</ul>
<h1 id="1-5-_刷新令牌">1.5. 刷新令牌</h1>
<p>访问令牌是用于获取访问令牌的凭据。刷新令牌由授权服务器颁发给客户端，用于在当前访问令牌失效或过期时，获取一个新的访问令牌，或者获得相等或更窄范围的额外的访问令牌（访问令牌可能具有比资源所有者所授权的更短的生命周期和更少的权限）。颁发刷新令牌是可选的，由授权服务器决定。如果授权服务器颁发刷新令牌，在颁发访问令牌时它被包含在内（即图1中的步骤D）。</p>
<p>刷新令牌是一个代表由资源所有者给客户端许可的授权的字符串。该字符串通常对于客户端是不透明的。该令牌表示一个用于检索授权信息的标识符。不同于访问令牌，刷新令牌设计只与授权服务器使用，并不会发送到资源服务器。</p>
<pre><code><span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                                           <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
<span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(A)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Authorization</span> <span class="comment">Grant</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                                           <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(B)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>               <span class="comment">&amp;</span> <span class="comment">Refresh</span> <span class="comment">Token</span>             <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                                           <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                            <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(C)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>          <span class="comment">|</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                            <span class="comment">|</span>          <span class="comment">|</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(D)</span><span class="literal">-</span> <span class="comment">Protected</span> <span class="comment">Resource</span> <span class="literal">-</span><span class="literal">-</span><span class="comment">|</span> <span class="comment">Resource</span> <span class="comment">|</span>   <span class="comment">|</span> <span class="comment">Authorization</span> <span class="comment">|</span>
<span class="comment">|</span> <span class="comment">Client</span> <span class="comment">|</span>                            <span class="comment">|</span>  <span class="comment">Server</span>  <span class="comment">|</span>   <span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(E)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>          <span class="comment">|</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                            <span class="comment">|</span>          <span class="comment">|</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(F)</span><span class="literal">-</span> <span class="comment">Invalid</span> <span class="comment">Token</span> <span class="comment">Error</span> <span class="literal">-</span><span class="comment">|</span>          <span class="comment">|</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                            <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>   <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                                           <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(G)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Refresh</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>                                           <span class="comment">|</span>               <span class="comment">|</span>
<span class="comment">|</span>        <span class="comment">|</span>&lt;<span class="literal">-</span><span class="comment">(H)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span>               <span class="comment">|</span>
<span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>           <span class="comment">&amp;</span> <span class="comment">Optional</span> <span class="comment">Refresh</span> <span class="comment">Token</span>        <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
</code></pre><p>图2：刷新过期的访问令牌</p>
<p>图2中的所示流程包含以下步骤：</p>
<ul>
<li>（A）客户端通过与授权服务器进行身份验证并出示授权许可请求访问令牌。</li>
<li>（B）授权服务器对客户端进行身份验证并验证授权许可，若有效则颁发访问令牌和刷新令牌。</li>
<li>（C）客户端通过出示访问令牌向资源服务器发起受保护资源的请求。</li>
<li>（D）资源服务器验证访问令牌，若有效则满足该要求。</li>
<li>（E）步骤（C）和（D）重复进行，直到访问令牌到期。如果客户端知道访问令牌已过期，跳到步骤（G），否  则它将继续发起另一个对受保护资源的请求。</li>
<li>（F）由于访问令牌是无效的，资源服务器返回无效令牌错误。</li>
<li>（G）客户端通过与授权服务器进行身份验证并出示刷新令牌，请求一个新的访问令牌。客户端身份验证要求基于客户端的类型和授权服务器的策略。</li>
<li>（H）授权服务器对客户端进行身份验证并验证刷新令牌，若有效则颁发一个新的访问令牌（和——可选地——一个新的刷新令牌）。</li>
</ul>
<p>步骤（C）、（D）、（E）和（F）在本规范的范围以外，如<a href="../Section07/7.md">第7节</a>中所述。</p>
<h2 id="Links-9">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.4.md">访问令牌</a></li>
<li>下一节 <a href="1.6.md">TLS 版本</a></li>
</ul>
<h1 id="1-6-_TLS版本">1.6. TLS版本</h1>
<p>本规范任何时候使用传输层安全性（TLS），基于广泛的部署和已知的安全漏洞TLS的相应版本（或多个版本）将会随时间而变化。在本规范撰写时，TLS 1.2版<a href="http://tools.ietf.org/html/rfc5246" title="传输层安全（TLS）协议1.2版" target="_blank" rel="external">RFC5246</a>是最新的版本，但它具有非常局限的部署基础，可能还未准备好可以实现。TLS 1.0版<a href="http://tools.ietf.org/html/rfc2246" title="TLS协议1.0版" target="_blank" rel="external">RFC2246</a>是部署最广泛的版本并将提供最宽泛的互操作性。</p>
<p>实现也可以支持满足其安全需求的其他传输层安全机制。</p>
<h2 id="Links-10">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.5.md">刷新令牌</a></li>
<li>下一节 <a href="1.7.md">HTTP重定向</a></li>
</ul>
<h1 id="1-7-_HTTP重定向">1.7. HTTP重定向</h1>
<p>本规范广泛采用了HTTP重定向，有此客户端或授权服务器引导资源所有者的用户代理到另一个目的地址。虽然本规范中的例子演示了HTTP 302状态码的使用，但是任何其他通过用户代理完成重定向的方法都是允许的并被考虑作为实现细节。</p>
<h2 id="Links-11">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.6.md">TLS版本</a></li>
<li>下一节 <a href="1.8.md">互操作性</a></li>
</ul>
<h1 id="1-8-_互操作性">1.8. 互操作性</h1>
<p>OAuth 2.0提供了丰富的具有明确的安全性质的授权框架。然而，尽管在其自身看来是一个带有许多可选择组件的丰富且高度可扩展的框架，本规范有可能产生许多非可互操作的实现。</p>
<p>此外，本规范中留下一些必需组件部分或完全没有定义（例如，客户端注册、授权服务器性能、端点发现等）。没有这些组件，客户端必须针对特定的授权服务器和资源服务器被手动并专门配置，以进行互操作。</p>
<p>本框架设计具有一个明确的期望，即未来工作将定义实现完整的web范围的互操作性所需的规范性的配置和扩展。</p>
<h2 id="Links-12">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.7md">HTTP重定向</a></li>
<li>下一节 <a href="1.9.md">符号约定</a></li>
</ul>
<h1 id="1-9-_符号约定">1.9. 符号约定</h1>
<p>本规范中的关键词“必须”、“不能”、“必需的”、“要”、“不要”、“应该”、“不应该”、“推荐的”、“可以”以及“可选的”按<a href="http://tools.ietf.org/html/rfc2119" title="Key words for use in RFCs to Indicate Requirement Levels" target="_blank" rel="external">RFC2119</a>所述解释。<br>本规范使用<a href="http://tools.ietf.org/html/rfc5234" title="Augmented BNF for Syntax Specifications: ABNF" target="_blank" rel="external">RFC5234</a>的扩展巴科斯-诺尔范式(ABNF)表示法。此外，来自“统一资源标识符（URI）：通用语法”<a href="http://tools.ietf.org/html/rfc3986" title="Uniform Resource Identifier (URI): Generic Syntax" target="_blank" rel="external">RFC3986</a>的规则URI引用也包含在内。</p>
<p>某些安全相关的术语按照<a href="http://tools.ietf.org/html/rfc4949" title="Internet Security Glossary, Version 2" target="_blank" rel="external">RFC4949</a>中定义的意思理解。这些术语包括但不限于：“攻击”、“身份认证”、“授权”、“证书”、“机密”，“凭据”，“加密”，“身份”，“记号”，“签名”，“信任”，“验证”和“核实”。</p>
<p>除非另有说明，所有协议参数的名称和值是大小写敏感的。</p>
<h2 id="Links-13">Links</h2>
<ul>
<li><a href="../TableofContents.md">目录</a></li>
<li>上一节 <a href="1.8.md">互操作性</a></li>
<li>下一节 <a href="../Section02/2.md">客户端注册</a></li>
</ul>
<h1 id="2-0_客户端注册">2.0 客户端注册</h1>
<p>在开始协议前，客户端在授权服务器注册。客户端在授权服务器上注册所通过的方式超出了本规范，但典型的涉及到最终用户与HTML注册表单的交互。</p>
<p>客户端注册不要求客户端与授权服务器之间的直接交互。在授权服务器支持时，注册可以依靠其他方式来建立信任关系并获取客户端的属性（如重定向URI、客户端类型）。例如，注册可以使用自发行或第三方发行声明或通过授权服务器使用信任通道执行客户端发现完成。</p>
<p>当注册客户端时，客户端开发者应该：</p>
<ul>
<li>指定<a href="2.1.md">2.1</a>节所述的客户端类型，</li>
<li>提供它的如<a href="../Section03/3.1.2.md">3.1.2</a>节所述的客户端重定向URI，且</li>
<li>包含授权服务器要求的任何其他信息（如，应用名称、网址、描述、Logo图片、接受法律条款等）。</li>
</ul>
<ul>
<li>2.1. <a href="2.1.md">客户端类型</a></li>
<li>2.2. <a href="2.2.md">客户端标识</a></li>
<li>2.3. <a href="2.3.md">客户端身份验证</a></li>
<li>2.3.1. <a href="2.3.1.md">客户端密码</a></li>
<li>2.3.2. <a href="2.3.2.md">其他身份验证方法</a></li>
<li>2.4. <a href="2.4.md">未注册的客户端</a><h1 id="2-1-_客户端类型">2.1. 客户端类型</h1>
根据客户端与授权服务器安全地进行身份验证的能力（即维护客户端凭据机密性的能力），OAuth定义了两种客户端类型：</li>
<li>机密客户端<br>能够维持其凭据机密性（如客户端执行在具有对客户端凭据有限访问权限的安全的服务器上），或者能够使用    其他方式保证客户端身份验证的安全性。</li>
<li>公开客户端<br>不能够维持其凭据的机密性（如客户端执行在由资源所有者使用的设备上，例如已安装的本地应用程序或基于Web浏览器的应用），且不能通过其他方式保证客户端身份验证的安全性。<br>客户端类型的选择基于授权服务器的安全身份认证定义以及其对客户端凭据可接受的暴露程度。授权服务器不应该对客户端类型做假设。</li>
</ul>
<p>客户端可以以分布式的组件集合实现，每一个组件具有不同的客户端类型和安全上下文（例如，一个同时具有机密的基于服务器的组件和公开的基于浏览器的组件的分布式客户端）。如果授权服务器不提供对这类客户端的支持，或不提供其注册方面的指导，客户端应该注册每个组件为一个单独的客户端。<br>本规范围绕下列客户端配置涉及：</p>
<ul>
<li>Web应用程序<br>Web应用是一个运行在Web服务器上的机密客户端。资源所有者通过其使用的设备上的用户代理里渲染的HTML用户界面访问客户端。客户端凭据以及向客户端颁发的任何访问令牌都存储在Web服务器上且不会暴露给资源所有者或者被资源所有者可访问。</li>
<li>基于用户代理的应用<br>基于用户代理的应用是一个公开客户端，客户端的代码从Web服务器下载，并在资源所有者使用的设备上的用户代理（如Web浏览器）中执行。协议数据和凭据对于资源所有者是可轻易访问的（且经常是可见的）。由于这些应用驻留在用户代理内，在请求授权时它们可以无缝地使用用户代理的功能。</li>
<li>本机应用程序<br>本机应用是一个安装、运行在资源所有者使用的设备上的公开客户端。协议数据和凭据对于资源所有者是可访问的。假定包含在应用程序中的任何客户端身份认证凭据可以被提取。另一方面，动态颁发的如访问令牌或者刷新令牌等凭据可以达到可接受的保护水平。至少，这些凭据被保护不被应用可能与之交互的恶意服务器接触。在一些平台上，这些凭证可能被保护免于被驻留在相同设备上的其他应用接触。<h1 id="2-2-_客户端标识">2.2. 客户端标识</h1>
授权服务器颁发给已注册客户端客户端标识——一个代表客户端提供的注册信息的唯一字符串。客户端标识不是一个秘密，它暴露给资源所有者并且不能单独用于客户端身份验证。客户端标识对于授权服务器是唯一的。</li>
</ul>
<p>客户端的字符串大小本规范未定义。客户端应该避免对标识大小做假设。授权服务器应记录其发放的任何标识的大小。</p>
<h1 id="2-3-_客户端身份验证">2.3. 客户端身份验证</h1>
<p>如果客户端类型是机密的，客户端和授权服务器建立适合于授权服务器的安全性要求的客户端身份验证方法。授权服务器可以接受符合其安全要求的任何形式的客户端身份验证。</p>
<p>机密客户端通常颁发（或建立）一组客户端凭据用于与授权服务器进行身份验证（例如，密码、公/私钥对）。授权服务器可以与公共客户端建立客户端身份验证方法。然而，授权服务器不能依靠公共客户端身份验证达到识别客户端的目的。</p>
<p>客户端在每次请求中不能使用一个以上的身份验证方法。</p>
<ul>
<li>2.3.1. <a href="2.3.1.md">客户端密码</a></li>
<li><p>2.3.2. <a href="2.3.2.md">其他身份验证方法</a></p>
<h1 id="2-3-1-_客户端密码">2.3.1. 客户端密码</h1>
<p>拥有客户端密码的客户端可以使用<a href="http://tools.ietf.org/html/rfc2617" title="HTTP Authentication: Basic and Digest Access Authentication" target="_blank" rel="external">RFC2617</a>中定义的HTTP基本身份验证方案与授权服务器进行身份验证。客户端标识使用按照<a href="../AppendixB/b.md">附录B</a>的“application/x-www-form-urlencoded”编码算法编码，编码后的值用作用户名；客户端密码使用相同的算法编码并用作密码。授权服务器必须支持HTTP基本身份验证方案，用于验证被颁发客户端密码的客户端的身份。例如（额外的换行仅用于显示目的）：</p>
<p>   Authorization: Basic czZCaGRSa3F0Mzo3RmpmcDBaQnIxS3REUmJuZlZkbUl3</p>
</li>
</ul>
<p>此外，授权服务器可以使用下列参数支持在请求正文中包含客户端凭据：</p>
<ul>
<li>client_id<br>必需的。如<a href="2.2.md">2.2</a>节所述的注册过程中颁发给客户端的客户端标识。</li>
<li>client_secret<br>必需的。客户端秘密。 客户端可以忽略该参数若客户端秘密是一个空字符串。</li>
</ul>
<p>使用这两个参数在请求正文中包含客户端凭据是不被建议的，应该限于不能直接采用HTTP基本身份验证方案（或其他基于密码的HTTP身份验证方案）的客户端。参数只能在请求正文中传送，不能包含在请求URI中。</p>
<p>例如，使用请求正文参数请求刷新访问令牌（第<a href="../Section06/6.md">6</a>节）（额外的换行仅用于显示目的）：</p>
<pre><code> POST /token HTTP/<span class="number">1.1</span>
 Host: server.example.com
 Content-Type: application/x-www-form-urlencoded
 <span class="variable">grant_type=</span>refresh_token&amp;<span class="variable">refresh_token=</span>tGzv3JOkF0XG5Qx2TlKWIA&amp;<span class="variable">client_id=</span>s6BhdRkqt3&amp;<span class="variable">client_secret=</span><span class="number">7</span>Fjfp0ZBr1KtDRbnfVdmIw
</code></pre><p>当使用密码身份验证发送请求时，授权服务器必须要求使用如<a href="../Section01/1.6.md">1.6</a>所述的TLS。</p>
<p>由于该客户端身份验证方法包含密码，授权服务器必须保护所有使用到密码的端点免受暴力攻击。</p>
<h1 id="2-3-2-_其他身份验证方法">2.3.2. 其他身份验证方法</h1>
<p>授权服务器可以支持任何与其安全要求匹配的合适的HTTP身份验证方案。当使用其他身份验证方法时，授权服务器必须定义客户端标识（注册记录）和认证方案之间的映射。</p>
<h1 id="2-4-_未注册客户端">2.4. 未注册客户端</h1>
<p>本规范不排除使用未注册的客户端。然而，使用这样的客户端超出了本规范的范围，并需要额外的安全性分析并审查其互操作性影响。</p>
<h1 id="3-_协议端点">3. 协议端点</h1>
<p>授权过程采用了两种授权服务器端点（HTTP资源）：</p>
<ul>
<li>授权端点——客户端用其通过用户代理重定向从资源所有者获取授权。</li>
<li>令牌端点——客户端用其将授权许可交换为访问令牌，通常伴有客户端身份验证。</li>
</ul>
<p>以及一种客户端端点：</p>
<ul>
<li>重定向端点——授权服务器用其通过资源所有者用户代理向客户端返回含有授权凭据的响应。</li>
</ul>
<p>并不是每种授权许可类型都采用两种端点。</p>
<p>扩展许可类型可以按需定义其他端点。</p>
<ul>
<li>3.1. <a href="3.1.md">授权端点</a></li>
<li>3.1.1. <a href="3.1.1.md">响应类型</a></li>
<li>3.1.2. <a href="3.1.2.md">重定向端点</a></li>
<li>3.2. <a href="3.2.md">令牌端点</a></li>
<li>3.2.1. <a href="3.2.1.md">客户端身份验证</a></li>
<li>3.3. <a href="3.3.md">访问令牌范围</a><h1 id="3-1-_授权端点">3.1. 授权端点</h1>
授权端点用于与资源所有者交互获取授权许可。 授权服务器必须先验证资源所有者的身份。 授权服务器对资源所有者进行身份验证的方式（例如，用户名和密码登录、会话cookies）超出了本规范的范围。</li>
</ul>
<p>客户端通过何种方式获得授权端点的位置超出了本文档范围，但该位置通常在服务文档中提供。</p>
<p>端点URI可以包含“application/x-www-form-urlencoded”格式（按<a href="../AppendixB/b.md">附录B</a>）的查询部分（<a href="http://tools.ietf.org/html/rfc3986#section-3.4" title="Uniform Resource Identifier (URI): Generic Syntax 3.4节" target="_blank" rel="external">RFC3986的3.4节</a>），当添加额外的查询参数时必须保留该部分。端点URI不得包含片段部分。</p>
<p>由于向授权端点的请求引起用户身份验证和明文凭据传输（在HTTP响应中），当向授权端点发送请求时，授权服务器必须要求如<a href="../Section01/1.6.md">1.6</a>节所述的TLS的使用。</p>
<p>授权服务器对于授权端点必须支持使用HTTP“GET”方法<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>，也可以支持使用“POST”的方法。</p>
<p>发送的没有值的参数必须被对待为好像它们在请求中省略了。授权服务器必须忽略不能识别的请求参数。 请求和响应参数不能包含超过一次。</p>
<ul>
<li>3.1.1. <a href="3.1.1.md">响应类型</a></li>
<li>3.1.2. <a href="3.1.2.md">重定向端点</a></li>
</ul>
<h1 id="3-1-1-_响应类型">3.1.1. 响应类型</h1>
<p>授权端点被授权码许可类型和隐式许可类型流程使用。客户端使用下列参数通知授权服务器期望的许可类型：</p>
<ul>
<li>response_type<br>必需的。其值必须是如<a href="../Section04/4.1.1.md">4.1.1</a>节所述用于请求授权码的“code”，如<a href="../Section04/4.2.1.md">4.2.1</a>节所述用于请求访问令牌的“token”（隐式许可）或者如<a href="../Section08/8.4.md">8.4</a>节所述的一个注册的扩展值之中的一个。</li>
</ul>
<p>扩展响应类型可以包含一个空格（%x20）分隔的值的列表，值的顺序并不重要（例如，响应类型“a b”与“b a”相同）。 这样的复合响应类型的含义由他们各自的规范定义。</p>
<p>如果授权请求缺少“response_type”参数，或者如果响应类型不被理解，授权服务器必须返回一个<a href="../Section04/4.1.2.1.md">4.1.2.1</a>所述的错误响应。</p>
<h1 id="3-1-2-_重定向端点">3.1.2. 重定向端点</h1>
<p>在完成与资源所有者的交互后，授权服务器引导资源所有者的用户代理返回到客户端。授权服务器重定向用户代理至客户端的重定向端点，该端点是事先在客户端注册过程中或者当发起授权请求时与授权服务器建立的。</p>
<p>重定向端点URI必须是如<a href="http://tools.ietf.org/html/rfc3986#section-3.4" title="Uniform Resource Identifier (URI): Generic Syntax 3.4节" target="_blank" rel="external">RFC3986的3.4节</a>所述的绝对URI。端点URI可以包含“application/x-www-form-urlencoded”格式（按<a href="../AppendixB/b.md">附录B</a>）的查询部分（<a href="http://tools.ietf.org/html/rfc3986#section-3.4" title="Uniform Resource Identifier (URI): Generic Syntax 3.4节" target="_blank" rel="external">RFC3986的3.4节</a>），当添加额外的查询参数时必须保留该部分。端点URI不得包含片段部分。</p>
<ul>
<li>3.1.2.1. <a href="3.1.2.1.md">端点请求的机密性</a></li>
<li>3.1.2.2. <a href="3.1.2.2.md">注册要求</a></li>
<li>3.1.2.3. <a href="3.1.2.3.md">动态配置</a></li>
<li>3.1.2.4. <a href="3.1.2.4.md">无效端点</a></li>
<li>3.1.2.5. <a href="3.1.2.5.md">端点内容</a></li>
</ul>
<h1 id="3-1-2-1-_端点请求的机密性">3.1.2.1. 端点请求的机密性</h1>
<p>当所请求的响应类型是“code”或“token”时，或者当重定向请求将引起在蜜柑凭据通过公开网络传输时，重定向端点应该要求使用<a href="../Section01/1.6.md">1.6</a>节所述的TLS。本规范没有强制使用TLS，因为在撰写本规范时，要求客户端部署TLS对于许多客户端开发者是一严重的困难。如果TLS不可用，授权服务器应该在重定向之前警告资源所有者有关非安全端点（例如，在授权请求期间现实一条信息）。</p>
<p>缺乏传输层安全可能对客户端及它被授权访问的受保护资源的安全具有严重影响。当授权过程用作一种客户端委托的对最终用户认证（例如，第三方登录服务）的形式时，使用传输层安全尤其关键。</p>
<h1 id="3-1-2-2-_注册要求">3.1.2.2. 注册要求</h1>
<p>授权服务器必须要求下列客户端注册它们的重定向端点：</p>
<ul>
<li>公开客户端。</li>
<li>采用隐式许可类型的机密客户端。</li>
</ul>
<p>授权服务器应该要求所有客户端在使用授权端点前注册它们的重定向端点。</p>
<p>授权服务器应该要求客户端提供完整的重定向URI（客户端可以使用“state”请求参数实现每请求自定义）。如果要求完整的重定向URI注册不可行，授权服务器应该要求注册URI方案、授权和路径（当请求授权时只允许客户端动态改变重定向URI的查询部分）。</p>
<p>授权服务器可以允许客户端注册多个重定向端点。</p>
<p>缺少重定向URI注册的要求，可能使攻击者如<a href="../Section10/10.15.md">10.15</a>所述将授权端点用作自由重定向端点。</p>
<h1 id="3-1-2-3-_动态配置">3.1.2.3. 动态配置</h1>
<p>如果多个重定向URI被注册，或者如果只有部分重定向URI被注册，或者如果没有重定向URI被注册，客户端都必须使用“redirect_uri”请求参数在授权请求中包含重定向URI。</p>
<p>当重定向URI被包含在授权请求中时，若有任何重定向URI被注册，授权服务器必须将接收到的值与至少一个已注册的重定向URI（或URI部分）按<a href="http://tools.ietf.org/html/rfc3986#section-6" title="Uniform Resource Identifier (URI): Generic Syntax 6节" target="_blank" rel="external">RFC3986第6节</a>所述进行比较并匹配。如果客户端注册包含了完整的重定向URI，授权服务器必须使用<a href="http://tools.ietf.org/html/rfc3986#section-6.2.1" title="Uniform Resource Identifier (URI): Generic Syntax 6.2.1节" target="_blank" rel="external">RFC3986第6.2.1节</a>中定义的简单字符串比较法比对这两个URI 。</p>
<h1 id="3-1-2-4-_无效端点">3.1.2.4. 无效端点</h1>
<p>如果由于缺失、无效或不匹配的重定向URI而验证失败，授权服务器应该通知资源所有者该错误且不能向无效的重定向URI自动重定向用户代理。</p>
<h1 id="3-1-2-5-_端点内容">3.1.2.5. 端点内容</h1>
<p>向客户端端点的重定向请求通常会引起由用户代理处理的HTML文档响应。如果HTML响应直接作为重定向请求的服务结果，任何包含在HTML文档中的脚本将执行，并具有对重定向URI和其包含的凭据的完全访问权限。</p>
<p>客户端不应该在重定向端点的响应中包含任何第三方的脚本（例如，第三方分析、社交插件、广告网络）。相反，它应该从URI中提取凭据并向另一个端点重定向用户代理而不暴露凭据（在URI中或其他地方）。如果包含第三方脚本，客户端必须确保它自己的脚本（用于从URI中提取凭据并从URI中删除）将首先执行。</p>
<h1 id="3-2-_令牌端点">3.2. 令牌端点</h1>
<p>客户端通过提交它的授权许可或刷新令牌使用令牌端点获取访问令牌。令牌端点被用于除了隐式许可类型（因为访问令牌是直接颁发的）外的每种授权许可中。</p>
<p>客户端通过何种方式获得令牌端点的位置超出了本文档范围，但该位置通常在服务文档中提供。</p>
<p>端点URI可以包含“application/x-www-form-urlencoded”格式（按<a href="../AppendixB/b.md">附录B</a>）的查询部分（<a href="http://tools.ietf.org/html/rfc3986#section-3.4" title="Uniform Resource Identifier (URI): Generic Syntax 3.4节" target="_blank" rel="external">RFC3986的3.4节</a>），当添加额外的查询参数时必须保留该部分。端点URI不得包含片段部分。</p>
<p>由于向令牌端点的请求引起明文凭据的传输（在HTTP请求和响应中），当向令牌端点发送请求时，授权服务器必须要求如<a href="../Section01/1.6.md">1.6</a>节所述的TLS的使用。</p>
<p>当发起访问令牌请求时，客户端必须使用HTTP“POST”方法。</p>
<p>发送的没有值的参数必须被对待为好像它们在请求中省略了。授权服务器必须忽略不能识别的请求参数。请求和响应参数不能包含超过一次。</p>
<ul>
<li>3.2.1. <a href="3.2.1.md">客户端身份验证</a></li>
</ul>
<h1 id="3-2-1-_客户端身份验证">3.2.1. 客户端身份验证</h1>
<p>在向令牌端点发起请求时，机密客户端或其他被颁发客户端凭据的客户端必须如<a href="../Section02/2.3.md">2.3</a>节所述与授权服务器进行身份验证。客户端身份验证用于：</p>
<ul>
<li>实施刷新令牌和授权码到它们被颁发给的客户端的绑定。当授权码在不安全通道上向重定向端点传输时，或者 当重定向URI没有被完全注册时，客户端身份验证是关键的。</li>
<li>通过禁用客户端或者改变其凭据从被入侵的客户端恢复，从而防止攻击者滥用被盗的刷新令牌。改变单套客户端凭据显然快于撤销一整套刷新令牌。</li>
<li>实现身份验证管理的最佳实践，要求定期凭证轮转。轮转一整套刷新令牌可能是艰巨的，而轮转单组客户端凭据显然更容易。</li>
</ul>
<p>在向令牌端点发送请求时，客户端可以使用“client_id”请求参数标识自己。向令牌端点的“authorization_code”和“grant_type”请求中，未经身份验证的客户端必须发送它的“client_id”，以防止自己无意中接受了本打算给具有另一个“client_id”的客户端的代码。这保护了客户端免于被替换认证码。（它没有对手保护起源提供额外的安全。）</p>
<h1 id="3-3-_访问令牌范围">3.3. 访问令牌范围</h1>
<p>授权端点和令牌端点允许客户端使用“scope”请求参数指定访问请求的范围。反过来，授权服务器使用“scope”响应参数通知客户端颁发的访问令牌的范围。</p>
<p>范围参数的值表示为以空格分隔，大小写敏感的字符串。 由授权服务器定义该字符串。如果该值包含多个空格分隔的字符串，他们的顺序并不重要且每个字符串为请求的范围添加一个额外的访问区域。</p>
<p>  scope = scope-token *( SP scope-token )<br>  scope-token = 1*( %x21 / %x23-5B / %x5D-7E )</p>
<p>基于授权服务器的策略或资源拥有者的指示，授权服务器可以全部或部分地忽略客户端请求的范围。如果颁发的访问令牌范围和客户端请求的范围不同，授权服务器必须包含“scope”响应参数通知客户端实际许可的范围。</p>
<p>在请求授权时如果客户端忽略了范围参数，授权服务器必须要么使用预定义的默认值处理请求，要么使请求失败以指出无效范围。授权服务器应该记录它的范围需求和默认值（如果已定义）。</p>
<h1 id="4-_获得授权">4. 获得授权</h1>
<p>为了请求访问令牌，客户端从资源所有者获得授权。授权表现为授权许可的形式，客户端用它请求访问令牌。OAuth定义了四种许可类型：授权码、隐式许可、资源所有者密码凭据和客户端凭据。它还提供了扩展机制定义其他许可类型。</p>
<ul>
<li>4.1. <a href="4.1.md">授权码许可</a></li>
<li>4.1.1. <a href="4.1.1.md">授权请求</a></li>
<li>4.1.2. <a href="4.1.2.md">授权响应</a></li>
<li>4.1.3. <a href="4.1.3.md">访问令牌请求</a></li>
<li>4.1.4. <a href="4.1.4.md">访问令牌响应</a></li>
<li>4.2. <a href="4.2.md">隐式许可</a></li>
<li>4.2.1. <a href="4.2.1.md">授权请求</a></li>
<li>4.2.2. <a href="4.2.2.md">访问令牌响应</a></li>
<li>4.3. <a href="4.3.md">资源所有者密码凭据许可</a></li>
<li>4.3.1. <a href="4.3.1.md">授权请求和响应</a></li>
<li>4.3.2. <a href="4.3.2.md">访问令牌请求</a></li>
<li>4.3.3. <a href="4.3.3.md">访问令牌响应</a></li>
<li>4.4. <a href="4.4.md">客户端凭证许可</a></li>
<li>4.4.1. <a href="4.4.1.md">授权请求和响应</a></li>
<li>4.4.2. <a href="4.4.2.md">访问令牌请求</a></li>
<li>4.4.3. <a href="4.4.3.md">访问令牌响应</a></li>
<li><p>4.5. <a href="4.5.md">扩展许可</a></p>
<h1 id="4-1-_授权码许可">4.1. 授权码许可</h1>
<p>授权码许可类型用于获得访问令牌和刷新令牌并未机密客户端进行了优化。由于这是一个基于重定向的流程，客户端必须能够与资源所有者的用户代理（通常是Web浏览器）进行交互并能够接收来自授权服务器的传入请求（通过重定向）。</p>
<p>   +----------+<br>   | Resource |<br>   |   Owner  |<br>   |          |<br>   +----------+</p>
<pre><code>    ^
    <span class="string">|</span>
   (B)
</code></pre><p>   +----|-----+          Client Identifier      +---------------+<br>   |         -+----(A)-- &amp; Redirection URI ----&gt;|               |<br>   |  User-   |                                 | Authorization |<br>   |  Agent  -+----(B)-- User authenticates ---&gt;|     Server    |<br>   |          |                                 |               |<br>   |         -+----(C)-- Authorization Code ---&lt;|               |<br>   +-|----|---+                                 +---------------+</p>
<pre><code> <span class="string">|    |                                         ^      v</span>
(A)  (C)                                        <span class="string">|      |</span>
 <span class="string">|    |                                         |      |</span>
 ^    v                                         <span class="string">|      |</span>
</code></pre><p>   +---------+                                      |      |<br>   |         |&gt;---(D)-- Authorization Code ---------&#39;      |<br>   |  Client |          &amp; Redirection URI                  |<br>   |         |                                             |<br>   |         |&lt;---(E)----- Access Token -------------------&#39;<br>   +---------+       (w/ Optional Refresh Token)<br>注：说明步骤（A）、（B）和（C）的直线因为通过用户代理而被分为两部分。<br>图3：授权码流程</p>
</li>
</ul>
<p>在图3中所示的流程包括以下步骤：</p>
<ul>
<li>（A）客户端通过向授权端点引导资源所有者的用户代理开始流程。客户端包括它的客户端标识、请求范围、本地状态和重定向URI，一旦访问被许可（或拒绝）授权服务器将传送用户代理回到该URI。</li>
<li>（B）授权服务器验证资源拥有者的身份（通过用户代理），并确定资源所有者是否授予或拒绝客户端的访问请求。</li>
<li>（C）假设资源所有者许可访问，授权服务器使用之前（在请求时或客户端注册时）提供的重定向URI重定向用户代理回到客户端。重定向URI包括授权码和之前客户端提供的任何本地状态。</li>
<li>（D）客户端通过包含上一步中收到的授权码从授权服务器的令牌端点请求访问令牌。当发起请求时，客户端与授权服务器进行身份验证。客户端包含用于获得授权码的重定向URI来用于验证。</li>
<li><p>（E）授权服务器对客户端进行身份验证，验证授权代码，并确保接收的重定向URI与在步骤（C）中用于重定向客户端的URI相匹配。如果通过，授权服务器响应返回访问令牌与可选的刷新令牌。</p>
</li>
<li><p>4.1.1. <a href="4.1.1.md">授权请求</a></p>
</li>
<li>4.1.2. <a href="4.1.2.md">授权响应</a></li>
<li>4.1.3. <a href="4.1.3.md">访问令牌请求</a></li>
<li>4.1.4. <a href="4.1.4.md">访问令牌响应</a><h1 id="4-1-1-_授权请求">4.1.1. 授权请求</h1>
客户端通过按<a href="../AppendixB/b.md">附录B</a>使用“application/x-www-form-urlencoded”格式向授权端点URI的查询部分添加下列参数构造请求URI：</li>
<li>response_type<br>必需的。值必须被设置为“code”。</li>
<li>client_id<br>必需的。如<a href="../Section02/2.2.md">2.2</a>节所述的客户端标识。</li>
<li>redirect_uri<br>可选的。如<a href="../Section03/3.1.2.md">3.1.2</a>节所述。</li>
<li>scope<br>可选的。如3.3节所述的访问请求的范围。</li>
<li>state<br>推荐的。客户度用于维护请求和回调之间的状态的不透明的值。当重定向用户代理回到客户端时，授权服务器包含此值。该参数应该用于防止如<a href="../Section10/10.12.md">10.12</a>所述的跨站点请求伪造。</li>
</ul>
<p>客户端使用HTTP重定向响应向构造的URI定向资源所有者，或者通过经由用户代理至该URI的其他可用方法。<br>例如，客户端使用TLS定向用户代理发起下述HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>GET /authorize?response_type=code&amp;client_id=s6BhdRkqt3&amp;<span class="keyword">state</span>=xyz&amp;redirect_uri=https<span class="variable">%3A</span><span class="variable">%2F</span><span class="variable">%2Fclient</span><span class="variable">%2Eexample</span><span class="variable">%2Ecom</span><span class="variable">%2Fcb</span> HTTP/<span class="number">1.1</span>
Host: server.example.com
</code></pre><p>授权服务器验证该请求，确保所有需要的参数已提交且有效。如果请求是有效的，授权服务器对资源所有者进行身份验证并获得授权决定（通过询问资源所有者或通过经由其他方式确定批准）。</p>
<p>当确定决定后，授权服务器使用HTTP重定向响应向提供的客户端重定向URI定向用户代理，或者通过经由用户代理至该URI的其他可行方法。</p>
<h1 id="4-1-2-_授权响应">4.1.2. 授权响应</h1>
<p>如果资源所有者许可访问请求，授权服务器颁发授权码，通过按<a href="../AppendixB/b.md">附录B</a>使用“application/x-www-form-urlencoded”格式向重定向URI的查询部分添加下列参数传递授权码至客户端：</p>
<ul>
<li>code<br>必需的。授权服务器生成的授权码。授权码必须在颁发后很快过期以减小泄露风险。推荐的最长的授权码生命周期是10分钟。客户端不能使用授权码超过一次。如果一个授权码被使用一次以上，授权服务器必须拒绝该请求并应该撤销（如可能）先前发出的基于该授权码的所有令牌。授权码与客户端标识和重定向URI绑定。</li>
<li>state<br>必需的，若“state”参数在客户端授权请求中提交。从客户端接收的精确值。</li>
</ul>
<p>例如，授权服务器通过发送以下HTTP响应重定向用户代理：</p>
<pre><code><span class="status">HTTP/1.1 <span class="number">302</span> Found</span>
<span class="attribute">Location</span>: <span class="string">https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA&amp;state=xyz</span>
</code></pre><p>客户端必须忽略无法识别的响应参数。本规范未定义授权码字符串大小。客户端应该避免假设代码值的长度。授权服务器应记录其发放的任何值的大小。</p>
<ul>
<li>4.1.2.1. <a href="4.1.2.1.md">错误响应</a><h1 id="4-1-2-1-_错误响应">4.1.2.1. 错误响应</h1>
如果由于缺失、无效或不匹配的重定向URI而请求失败，或者如果客户端表示缺失或无效，授权服务器应该通知资源所有者该错误且不能向无效的重定向URI自动重定向用户代理。</li>
</ul>
<p>如果资源所有者拒绝访问请求，或者如果请求因为其他非缺失或无效重定向URI原因而失败，授权服务器通过按<a href="../AppendixB/b.md">附录B</a>使用“application/x-www-form-urlencoded”格式向重定向URI的查询部分添加下列参数通知客户端：</p>
<ul>
<li><p>error<br>必需的。下列ASCII[USASCII]错误代码之一：</p>
<ul>
<li>invalid_request<br>请求缺少必需的参数、包含无效的参数值、包含一个参数超过一次或其他不良格式。</li>
<li>unauthorized_client<br>客户端未被授权使用此方法请求授权码。</li>
<li>access_denied<br>资源所有者或授权服务器拒绝该请求。</li>
<li>unsupported_response_type<br>授权服务器不支持使用此方法获得授权码。</li>
<li>invalid_scope<br>请求的范围无效，未知的或格式不正确。</li>
<li>server_error<br>授权服务器遇到意外情况导致其无法执行该请求。（此错误代码是必要的，因为500内部服务器错误HTTP状态代码不能由HTTP重定向返回给客户端）。</li>
<li>temporarily_unavailable<br>授权服务器由于暂时超载或服务器维护目前无法处理请求。（此错误代码是必要的，因为503服务不可用HTTP状态代码不可以由HTTP重定向返回给客户端）。</li>
</ul>
<p>“error”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</p>
</li>
<li>error_description<br>可选的。提供额外信息的人类可读的ASCII[USASCII]文本，用于协助客户端开发人员理解所发生的错误。<br>“error_description”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</li>
<li>error_uri<br>可选的。指向带有有关错误的信息的人类可读网页的URI，用于提供客户端开发人员关于该错误的额外信息。<br>“error_uri”参数值必须符合URI参考语法，因此不能包含集合％x21/%x23-5B /％x5D-7E以外的字符。</li>
<li>state<br>必需的，若“state”参数在客户端授权请求中提交。从客户端接收的精确值。</li>
</ul>
<p>例如，授权服务器通过发送以下HTTP响应重定向用户代理：</p>
<pre><code><span class="status">HTTP/1.1 <span class="number">302</span> Found</span>
<span class="attribute">Location</span>: <span class="string">https://client.example.com/cb?error=access_denied&amp;state=xyz</span>
</code></pre><h1 id="4-1-3-_访问令牌请求">4.1.3. 访问令牌请求</h1>
<p>客户端通过使用按<a href="../AppendixB/b.md">附录B</a>“application/x-www-form-urlencoded”格式在HTTP请求实体正文中发送下列UTF-8字符编码的参数向令牌端点发起请求：</p>
<ul>
<li>grant_type<br>必需的。值必须被设置为“authorization_code”。</li>
<li>code<br>从授权服务器收到的授权码。</li>
<li>redirect_uri<br>必需的，若“redirect_uri”参数如<a href="../Section04/4.1.1.md">4.1.1</a>节所述包含在授权请求中，且他们的值必须相同。</li>
<li>client_id<br>必需的，如果客户端没有如<a href="../Section03/3.2.1.md">3.2.1</a>节所述与授权服务器进行身份认证。</li>
</ul>
<p>如果客户端类型是机密的或客户端被颁发了客户端凭据（或选定的其他身份验证要求），客户端必须如<br>  必需的，如果客户端没有如<a href="../Section03/3.2.1.md">3.2.1</a>节所述与授权服务器进行身份验证。</p>
<p>例如，客户端使用TLS发起如下的HTTP请求（额外的换行符仅用于显示目的）：</p>
<pre><code>POST /token HTTP/<span class="number">1.1</span>
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/<span class="keyword">x</span>-www-form-urlencoded
grant_type=authorization_code&amp;code=SplxlOBeZQQYbYS6WxSbIA&amp;redirect_uri=https<span class="variable">%3A</span><span class="variable">%2F</span><span class="variable">%2Fclient</span><span class="variable">%2Eexample</span><span class="variable">%2Ecom</span><span class="variable">%2Fcb</span>
</code></pre><p>授权服务器必须：</p>
<ul>
<li>要求机密客户端或任何被颁发了客户端凭据（或有其他身份验证要求）的客户端进行客户端身份验证，</li>
<li>若包括了客户端身份验证，验证客户端身份，</li>
<li>确保授权码颁发给了通过身份验证的机密客户端，或者如果客户端是公开的，确保代码颁发给了请求中的“client_id”，</li>
<li>验证授权码是有效的，并</li>
<li>确保给出了“redirect_uri”参数，若“redirect_uri”参数如<a href="../Section04/4.1.1.md">4.1.1</a>所述包含在初始授权请求中，且若包含，确保它们的值是相同的。<h1 id="4-1-4-_访问令牌响应">4.1.4. 访问令牌响应</h1>
如果访问令牌请求是有效的且被授权，授权服务器如5.1节所述颁发访问令牌以及可选的刷新令牌。如果请求客户端身份验证失败或无效，授权服务器如5.2节所述的返回错误响应。</li>
</ul>
<p>一个样例成功响应：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
<span class="operator"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-store
<span class="keyword">Pragma</span>: <span class="keyword">no</span>-<span class="keyword">cache</span>
{
  <span class="string">"access_token"</span>:<span class="string">"2YotnFZFEjr1zCsicMWpAA"</span>,
  <span class="string">"token_type"</span>:<span class="string">"example"</span>,
  <span class="string">"expires_in"</span>:<span class="number">3600</span>,
  <span class="string">"refresh_token"</span>:<span class="string">"tGzv3JOkF0XG5Qx2TlKWIA"</span>,
  <span class="string">"example_parameter"</span>:<span class="string">"example_value"</span>
}</span>
</code></pre><h1 id="4-2-_隐式许可">4.2. 隐式许可</h1>
<p>隐式授权类型被用于获取访问令牌（它不支持发行刷新令牌），并对知道操作具体重定向URI的公共客户端进行优化。这些客户端通常在浏览器中使用诸如JavaScript的脚本语言实现。</p>
<p>由于这是一个基于重定向的流程，客户端必须能够与资源所有者的用户代理（通常是Web浏览器）进行交互并能够接收来自授权服务器的传入请求（通过重定向）。</p>
<p>不同于客户端分别请求授权和访问令牌的授权码许可类型，客户端收到访问令牌作为授权请求的结果。</p>
<p>隐式许可类型不包含客户端身份验证而依赖于资源所有者在场和重定向URI的注册。因为访问令牌被编码到重定向URI中，它可能会暴露给资源所有者和其他驻留在相同设备上的应用。</p>
<pre><code> <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span> <span class="comment">Resource</span> <span class="comment">|</span>
 <span class="comment">|</span>  <span class="comment">Owner</span>   <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
      <span class="comment">^</span>
      <span class="comment">|</span>
     <span class="comment">(B)</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>          <span class="comment">Client</span> <span class="comment">Identifier</span>     <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>         <span class="literal">-</span><span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(A)</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">&amp;</span> <span class="comment">Redirection</span> <span class="comment">URI</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>  <span class="comment">User</span><span class="literal">-</span>   <span class="comment">|</span>                                <span class="comment">|</span> <span class="comment">Authorization</span> <span class="comment">|</span>
 <span class="comment">|</span>  <span class="comment">Agent</span>  <span class="literal">-</span><span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(B)</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">User</span> <span class="comment">authenticates</span> <span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>                                <span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(C)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Redirection</span> <span class="comment">URI</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&lt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>          <span class="comment">with</span> <span class="comment">Access</span> <span class="comment">Token</span>     <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>          <span class="comment">|</span>            <span class="comment">in</span> <span class="comment">Fragment</span>
 <span class="comment">|</span>          <span class="comment">|</span>                                <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>          <span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(D)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Redirection</span> <span class="comment">URI</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>   <span class="comment">Web</span><span class="literal">-</span><span class="comment">Hosted</span>  <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>          <span class="comment">without</span> <span class="comment">Fragment</span>      <span class="comment">|</span>     <span class="comment">Client</span>    <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>                                <span class="comment">|</span>    <span class="comment">Resource</span>   <span class="comment">|</span>
 <span class="comment">|</span>     <span class="comment">(F)</span>  <span class="comment">|</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="comment">(E)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Script</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&lt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>                                <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="literal">+</span><span class="literal">-</span><span class="comment">|</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
   <span class="comment">|</span>    <span class="comment">|</span>
  <span class="comment">(A)</span>  <span class="comment">(G)</span> <span class="comment">Access</span> <span class="comment">Token</span>
   <span class="comment">|</span>    <span class="comment">|</span>
   <span class="comment">^</span>    <span class="comment">v</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>         <span class="comment">|</span>
 <span class="comment">|</span>  <span class="comment">Client</span> <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
</code></pre><p>注：说明步骤（A）和（B）的直线因为通过用户代理而被分为两部分。</p>
<p>图4：隐式许可流程</p>
<p>图4中的所示流程包含以下步骤：</p>
<ul>
<li>（A）客户端通过向授权端点引导资源所有者的用户代理开始流程。客户端包括它的客户端标识、请求范围、本地状态和重定向URI，一旦访问被许可（或拒绝）授权服务器将传送用户代理回到该URI。</li>
<li>（B）授权服务器验证资源拥有者的身份（通过用户代理），并确定资源所有者是否授予或拒绝客户端的访问请求。</li>
<li>（C）假设资源所有者许可访问，授权服务器使用之前（在请求时或客户端注册时）提供的重定向URI重定向用户代理回到客户端。重定向URI在URI片段中包含访问令牌。</li>
<li>（D）用户代理顺着重定向指示向Web托管的客户端资源发起请求（按<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>该请求不包含片段）。用户代理在本地保留片段信息。</li>
<li>（E）Web托管的客户端资源返回一个网页（通常是带有嵌入式脚本的HTML文档），该网页能够访问包含用户代理保留的片段的完整重定向URI并提取包含在片段中的访问令牌（和其他参数）。</li>
<li>（F）用户代理在本地执行Web托管的客户端资源提供的提取访问令牌的脚本。</li>
<li>（G）用户代理传送访问令牌给客户端。</li>
</ul>
<p>参见<a href="../Section01/1.2.3.md">1.3.2</a>节和第<a href="../Section09/9.md">9</a>节了解使用隐式许可的背景。</p>
<p>参见<a href="../Section10/10.3.md">10.3</a>节和<a href="../Section10/10.16.md">10.16</a>节了解当使用隐式许可时的重要安全注意事项。</p>
<ul>
<li>4.2.1. <a href="4.2.1.md">授权请求</a></li>
<li>4.2.2. <a href="4.2.2.md">访问令牌响应</a></li>
</ul>
<h1 id="4-2-1-_授权请求">4.2.1. 授权请求</h1>
<p>客户端通过按<a href="../AppendixB/b.md">附录B</a>使用“application/x-www-form-urlencoded”格式向授权端点URI的查询部分添加下列参数构造请求URI：</p>
<ul>
<li>response_type<br>必需的。值必须设置为“token”。</li>
<li>client_id<br>必需的。如<a href="../Section02/2.2.md">2.2</a>节所述的客户端标识。</li>
<li>redirect_uri<br>可选的。如<a href="../Section03/3.1.2.md">3.1.2</a>节所述。</li>
<li>scope<br>可选的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问请求的范围。</li>
<li>state<br>推荐的。客户度用于维护请求和回调之间的状态的不透明的值。当重定向用户代理回到客户端时，授权服务器包含此值。该参数应该用于防止如<a href="../Section10/10.12.md">10.12</a>所述的跨站点请求伪造。</li>
</ul>
<p>客户端使用HTTP重定向响应向构造的URI定向资源所有者，或者通过经由用户代理至该URI的其他可用方法。</p>
<p>例如，客户端使用TLS定向用户代理发起下述HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>GET /authorize?response_type=token&amp;client_id=s6BhdRkqt3&amp;<span class="keyword">state</span>=xyz&amp;redirect_uri=https<span class="variable">%3A</span><span class="variable">%2F</span><span class="variable">%2Fclient</span><span class="variable">%2Eexample</span><span class="variable">%2Ecom</span><span class="variable">%2Fcb</span> HTTP/<span class="number">1.1</span>
Host: server.example.com
</code></pre><p>授权服务器验证该请求，确保所有需要的参数已提交且有效。授权服务器必须验证它将重定向访问令牌的重定向URI与如<a href="../Section03/3.1.2.md">3.1.2</a>节所述的客户端注册的重定向URI匹配。</p>
<p>如果请求是有效的，授权服务器对资源所有者进行身份验证并获得授权决定（通过询问资源所有者或通过经由其他方式确定批准）。</p>
<p>当确定决定后，授权服务器使用HTTP重定向响应向提供的客户端重定向URI定向用户代理，或者通过经由用户代理至该URI的其他可行方法。</p>
<h1 id="4-2-2-_访问令牌响应">4.2.2. 访问令牌响应</h1>
<p>如果资源所有者许可访问请求，授权服务器颁发访问令牌，通过使用按<a href="../AppendixB/b.md">附录B</a>的“application/x-www-form-urlencoded”格式向重定向URI的片段部分添加下列参数传递访问令牌至客户端：</p>
<ul>
<li>access_token<br>必需的。授权服务器颁发的访问令牌。</li>
<li>token_type<br>必需的。如<a href="../Section07/7.1.md">7.1</a>节所述的颁发的令牌的类型。值是大小写敏感的。</li>
<li>expires_in<br>推荐的。以秒为单位的访问令牌生命周期。例如，值“3600”表示访问令牌将在从生成响应时的1小时后到期。如果省略，则授权服务器应该通过其他方式提供过期时间，或者记录默认值。</li>
<li>scope<br>可选的，若与客户端请求的范围相同；否则，是必需的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问令牌的范围。</li>
<li>state<br>必需的，若“state”参数在客户端授权请求中提交。从客户端接收的精确值。授权服务器不能颁发刷新令牌。</li>
</ul>
<p>例如，授权服务器通过发送以下HTTP响应重定向用户代理：（额外的换行符仅用于显示目的）：</p>
<pre><code><span class="status">HTTP/1.1 <span class="number">302</span> Found</span>
<span class="attribute">Location</span>: <span class="string">http://example.com/cb#access_token=2YotnFZFEjr1zCsicMWpAA&amp;state=xyz&amp;token_type=example&amp;expires_in=3600</span>
</code></pre><p>开发人员应注意，一些用户代理不支持在HTTP“Location”HTTP响应标头字段中包含片段组成部分。这些客户端需要使用除了3xx重定向响应以外的其他方法来重定向客户端——-例如，返回一个HTML页面，其中包含一个具有链接到重定向URI的动作的“继续”按钮。</p>
<p>客户端必须忽略无法识别的响应参数。本规范未定义授权码字符串大小。客户端应该避免假设代码值的长度。 授权服务器应记录其发放的任何值的大小。</p>
<ul>
<li>4.2.2.1. <a href="4.2.2.1.md">错误响应</a><h1 id="4-2-2-1-_错误响应">4.2.2.1. 错误响应</h1>
如果由于缺失、无效或不匹配的重定向URI而请求失败，或者如果客户端表示缺失或无效，授权服务器应该通知资源所有者该错误且不能向无效的重定向URI自动重定向用户代理。</li>
</ul>
<p>如果资源所有者拒绝访问请求，或者如果请求因为其他非缺失或无效重定向URI原因而失败，授权服务器通过按<a href="../AppendixB/b.md">附录B</a>使用“application/x-www-form-urlencoded”格式向重定向URI的片段部分添加下列参数通知客户端：</p>
<ul>
<li><p>error<br>必需的。下列ASCII[USASCII]错误代码之一：</p>
<ul>
<li>invalid_request<br>请求缺少必需的参数、包含无效的参数值、包含一个参数超过一次或其他不良格式。</li>
<li>unauthorized_client<br>客户端未被授权使用此方法请求授权码。</li>
<li>access_denied<br>资源所有者或授权服务器拒绝该请求。</li>
<li>unsupported_response_type<br>授权服务器不支持使用此方法获得授权码。</li>
<li>invalid_scope<br>请求的范围无效，未知的或格式不正确。</li>
<li>server_error<br>授权服务器遇到意外情况导致其无法执行该请求。（此错误代码是必要的，因为500内部服务器错误HTTP状态代码不能由HTTP重定向返回给客户端）。</li>
<li>temporarily_unavailable<br>授权服务器由于暂时超载或服务器维护目前无法处理请求。 （此错误代码是必要的，因为503服务不可用HTTP状态代码不可以由HTTP重定向返回给客户端）。</li>
</ul>
<p>“error”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</p>
</li>
<li><p>error_description<br>可选的。提供额外信息的人类可读的ASCII[USASCII]文本，用于协助客户端开发人员理解所发生的错误。</p>
<p>“error_description”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</p>
</li>
<li><p>error_uri<br>可选的。指向带有有关错误的信息的人类可读网页的URI，用于提供客户端开发人员关于该错误的额外信息。</p>
<p>“error_uri”参数值必须符合URI参考语法，因此不能包含集合％x21/%x23-5B /％x5D-7E以外的字符。</p>
</li>
<li>state<br>必需的，若“state”参数在客户端授权请求中提交。从客户端接收的精确值。</li>
</ul>
<p>例如，授权服务器通过发送以下HTTP响应重定向用户代理：</p>
<pre><code><span class="status">HTTP/1.1 <span class="number">302</span> Found</span>
<span class="attribute">Location</span>: <span class="string">https://client.example.com/cb#error=access_denied&amp;state=xyz</span>
</code></pre><h1 id="4-3-_资源所有者密码凭据许可">4.3. 资源所有者密码凭据许可</h1>
<p>资源所有者密码凭据许可类型适合于资源所有者与客户端具有信任关系的情况，如设备操作系统或高级特权应用。当启用这种许可类型时授权服务器应该特别关照且只有当其他流程都不可用时才可以。</p>
<p>这种许可类型适合于能够获得资源所有者凭据（用户名和密码，通常使用交互的形式）的客户端。通过转换已存储的凭据至访问令牌，它也用于迁移现存的使用如HTTP基本或摘要身份验证的直接身份验证方案的客户端至OAuth。</p>
<pre><code> <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span> <span class="comment">Resource</span> <span class="comment">|</span>
 <span class="comment">|</span>  <span class="comment">Owner</span>   <span class="comment">|</span>
 <span class="comment">|</span>          <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
      <span class="comment">v</span>
      <span class="comment">|</span>    <span class="comment">Resource</span> <span class="comment">Owner</span>
     <span class="comment">(A)</span> <span class="comment">Password</span> <span class="comment">Credentials</span>
      <span class="comment">|</span>
      <span class="comment">v</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                                  <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>         <span class="comment">|</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="comment">(B)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Resource</span> <span class="comment">Owner</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>         <span class="comment">Password</span> <span class="comment">Credentials</span>     <span class="comment">|</span> <span class="comment">Authorization</span> <span class="comment">|</span>
 <span class="comment">|</span> <span class="comment">Client</span>  <span class="comment">|</span>                                  <span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="comment">(C)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&lt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>    <span class="comment">(w/</span> <span class="comment">Optional</span> <span class="comment">Refresh</span> <span class="comment">Token)</span>   <span class="comment">|</span>               <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                                  <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
</code></pre><p>图5：资源所有者密码凭据流程</p>
<p>图5中的所示流程包含以下步骤：</p>
<ul>
<li>（A）资源所有者提供给客户端它的用户名和密码。</li>
<li>（B）通过包含从资源所有者处接收到的凭据，客户端从授权服务器的令牌端点请求访问令牌。当发起请求时，客户端与授权服务器进行身份验证。</li>
<li><p>（C）授权服务器对客户端进行身份验证，验证资源所有者的凭证，如果有效，颁发访问令牌。</p>
</li>
<li><p>4.3.1. <a href="4.3.1.md">授权请求和响应</a></p>
</li>
<li>4.3.2. <a href="4.3.2.md">访问令牌请求</a></li>
<li>4.3.3. <a href="4.3.3.md">访问令牌响应</a><h1 id="4-3-1-_授权请求和响应">4.3.1. 授权请求和响应</h1>
客户端获得资源所有者凭据所通过的方式超出了本规范的范围。一旦获得访问令牌，客户端必须丢弃凭据。<h1 id="4-3-2-_访问令牌请求">4.3.2. 访问令牌请求</h1>
客户端通过使用按<a href="../AppendixB/b.md">附录B</a>“application/x-www-form-urlencoded”格式在HTTP请求实体正文中发送下列UTF-8字符编码的参数向令牌端点发起请求：</li>
<li>grant_type<br>必需的。值必须设置为“password”。</li>
<li>username<br>必需的。资源所有者的用户名。</li>
<li>password<br>必需的。资源所有者的密码。</li>
<li>scope<br>可选的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问请求的范围。<br>如果客户端类型是机密的或客户端被颁发了客户端凭据（或选定的其他身份验证要求），客户端必须如<a href="(../Section03/3.2.1.md">3.2.1</a>)节所述与授权服务器进行身份验证。</li>
</ul>
<p>例如，客户端使用传输层安全发起如下HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>POST /token HTTP/<span class="number">1.1</span>
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded
<span class="variable">grant_type=</span>password&amp;<span class="variable">username=</span>johndoe&amp;<span class="variable">password=</span>A3ddj3w
</code></pre><p>授权服务器必须：</p>
<ul>
<li>要求机密客户端或任何被颁发了客户端凭据（或有其他身份验证要求）的客户端进行客户端身份验证，</li>
<li>若包括了客户端身份验证，验证客户端身份，并</li>
<li>使用它现有的密码验证算法验证资源所有者的密码凭据。</li>
</ul>
<p>由于这种访问令牌请求使用了资源所有者的密码，授权服务器必须保护端点防止暴力攻击（例如，使用速率限制或生成警报）。 </p>
<h1 id="4-3-3-_访问令牌响应">4.3.3. 访问令牌响应</h1>
<p>如果访问令牌请求是有效的且被授权，授权服务器如<a href="../Section05/5.1.md">5.1</a>节所述颁发访问令牌以及可选的刷新令牌。如果请求客户端身份验证失败或无效，授权服务器如<a href="../Section05/5.2.md">5.2</a>节所述的返回错误响应。<br>一个样例成功响应：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
<span class="operator"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-store
<span class="keyword">Pragma</span>: <span class="keyword">no</span>-<span class="keyword">cache</span>
{
  <span class="string">"access_token"</span>:<span class="string">"2YotnFZFEjr1zCsicMWpAA"</span>,
  <span class="string">"token_type"</span>:<span class="string">"example"</span>,
  <span class="string">"expires_in"</span>:<span class="number">3600</span>,
  <span class="string">"refresh_token"</span>:<span class="string">"tGzv3JOkF0XG5Qx2TlKWIA"</span>,
  <span class="string">"example_parameter"</span>:<span class="string">"example_value"</span>
}</span>
</code></pre><h1 id="4-4-_客户端凭据许可">4.4. 客户端凭据许可</h1>
<p>当客户端请求访问它所控制的，或者事先与授权服务器协商（所采用的方法超出了本规范的范围）的其他资源所有者的受保护资源，客户端可以只使用它的客户端凭据（或者其他受支持的身份验证方法）请求访问令牌。</p>
<p>客户端凭据许可类型必须只能由机密客户端使用。</p>
<pre><code> <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                                  <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
 <span class="comment">|</span>         <span class="comment">|</span>                                  <span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>&gt;<span class="literal">-</span><span class="literal">-</span><span class="comment">(A)</span><span class="literal">-</span> <span class="comment">Client</span> <span class="comment">Authentication</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">|</span> <span class="comment">Authorization</span> <span class="comment">|</span>
 <span class="comment">|</span> <span class="comment">Client</span>  <span class="comment">|</span>                                  <span class="comment">|</span>     <span class="comment">Server</span>    <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>&lt;<span class="literal">-</span><span class="literal">-</span><span class="comment">(B)</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span> <span class="comment">Access</span> <span class="comment">Token</span> <span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span>&lt;<span class="comment">|</span>               <span class="comment">|</span>
 <span class="comment">|</span>         <span class="comment">|</span>                                  <span class="comment">|</span>               <span class="comment">|</span>
 <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>                                  <span class="literal">+</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">-</span><span class="literal">+</span>
</code></pre><p>图6：客户端凭证流程</p>
<p>图6中的所示流程包含以下步骤：</p>
<ul>
<li>（A）客户端与授权服务器进行身份验证并向令牌端点请求访问令牌。</li>
<li><p>（B）授权服务器对客户端进行身份验证，如果有效，颁发访问令牌。</p>
</li>
<li><p>4.4.1. <a href="4.4.1.md">授权请求和响应</a></p>
</li>
<li>4.4.2. <a href="4.4.2.md">访问令牌请求</a></li>
<li>4.4.3. <a href="4.4.3.md">访问令牌响应</a><h1 id="4-4-1-_授权请求和响应">4.4.1. 授权请求和响应</h1>
由于客户端身份验证被用作授权许可，所以不需要其他授权请求。<h1 id="4-4-2-_访问令牌请求">4.4.2. 访问令牌请求</h1>
客户端通过使用按附录B“application/x-www-form-urlencoded”格式在HTTP请求实体正文中发送下列UTF-8字符编码的参数向令牌端点发起请求：</li>
<li>grant_type<br>必需的。值必须设置为“client_credentials”。</li>
<li>scope<br>可选的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问请求的范围。</li>
</ul>
<p>客户端必须如<a href="../Section03/3.2.1.md">3.2.1</a>所述与授权服务器进行身份验证。</p>
<p>例如，客户端使用传输层安全发起如下HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>POST /token HTTP/<span class="number">1.1</span>
<span class="label">Host:</span> server.example.com
<span class="label">Authorization:</span> Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/<span class="built_in">x</span>-www-form-urlencoded
grant_type=client_credentials
</code></pre><p>授权服务器必须对客户端进行身份验证。</p>
<h1 id="4-4-3-_访问令牌响应">4.4.3. 访问令牌响应</h1>
<p>如果访问令牌请求是有效的且被授权，授权服务器如<a href="../Section05/5.1.md">5.1</a>节所述颁发访问令牌以及可选的刷新令牌。刷新令牌不应该包含在内。 如果请求因客户端身份验证失败或无效，授权服务器如<a href="../Section05/5.2.md">5.2</a>节所述的返回错误响应。</p>
<p>一个样例成功响应：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
<span class="operator"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-store
<span class="keyword">Pragma</span>: <span class="keyword">no</span>-<span class="keyword">cache</span>
{
  <span class="string">"access_token"</span>:<span class="string">"2YotnFZFEjr1zCsicMWpAA"</span>,
  <span class="string">"token_type"</span>:<span class="string">"example"</span>,
  <span class="string">"expires_in"</span>:<span class="number">3600</span>， <span class="string">"example_parameter"</span>:<span class="string">"example_value"</span>
}</span>
</code></pre><h1 id="4-5-_扩展许可">4.5. 扩展许可</h1>
<p>通过使用绝对URI作为令牌端点的“grant_type”参数的值指定许可类型，并通过添加任何其他需要的参数，客户端使用扩展许可类型。</p>
<p>例如，采用[OAuth-SAML]定义的安全断言标记语言（SAML）2.0断言许可类型请求访问令牌，客户端可以使用TLS发起如下的HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>POST /token HTTP/<span class="number">1.1</span>
Host: server.example.com
Content-Type: application/x-www-form-urlencoded
grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2bearer&amp;assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU[<span class="keyword">...</span>为简洁起见省略<span class="keyword">...</span>]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
</code></pre><p>如果访问令牌请求是有效的且被授权，授权服务器如<a href="../Section05/5.1.md">5.1</a>节所述颁发访问令牌以及可选的刷新令牌。如果请求因客户端身份验证失败或无效，授权服务器如<a href="../Section05/5.2.md">5.2</a>节所述的返回错误响应。</p>
<h1 id="5-_颁发访问令牌">5. 颁发访问令牌</h1>
<p>如果访问令牌请求是有效的且被授权，授权服务器如5.1节所述颁发访问令牌以及可选的刷新令牌。如果请求因客户端身份验证失败或无效，授权服务器如5.2节所述的返回错误响应。</p>
<ul>
<li>5.1. <a href="5.1.md">成功响应</a></li>
<li>5.2. <a href="5.2.md">错误响应</a><h1 id="5-1-_成功的响应">5.1. 成功的响应</h1>
授权服务器颁发访问令牌和可选的刷新令牌，通过向HTTP响应实体正文中添加下列参数并使用200（OK）状态码构造响应：</li>
<li>access_token<br>必需的。授权服务器颁发的访问令牌。</li>
<li>token_type<br>必需的。如<a href="../Section07/7.1.md">7.1</a>节所述的颁发的令牌的类型。值是大小写敏感的。</li>
<li>expires_in<br>推荐的。以秒为单位的访问令牌生命周期。例如，值“3600”表示访问令牌将在从生成响应时的1小时后到期。如果省略，则授权服务器应该通过其他方式提供过期时间，或者记录默认值。</li>
<li>refresh_token<br>可选的。刷新令牌，可以用于如第<a href="../Section06/6.md">6</a>节所述使用相同的授权许可获得新的访问令牌。</li>
<li>scope<br>可选的，若与客户端请求的范围相同；否则，必需的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问令牌的范围。</li>
</ul>
<p>这些参数使用<a href="http://tools.ietf.org/html/rfc4627" title="JSON" target="_blank" rel="external">RFC4627</a>定义的“application/json”媒体类型包含在HTTP响应实体正文中。通过将每个参数添加到最高结构级别， 参数被序列化为JavaScript对象表示法（JSON）的结构。参数名称和字符串值作为JSON字符串类型包含。数值的值作为JSON数字类型包含。参数顺序无关并可以变化。</p>
<p>在任何包含令牌、凭据或其他敏感信息的响应中，授权服务器必须在其中包含值为“no-store”的HTTP“Cache-Control”响应头部域<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>，和值为“no-cache”的“Pragma”响应头部域<a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a>。例如：</p>
<pre><code>HTTP/1.1 200 OK
Content-Type: application/json;charset=UTF-8
<span class="operator"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-store
<span class="keyword">Pragma</span>: <span class="keyword">no</span>-<span class="keyword">cache</span>
{
  <span class="string">"access_token"</span>:<span class="string">"2YotnFZFEjr1zCsicMWpAA"</span>,
  <span class="string">"token_type"</span>:<span class="string">"example"</span>,
  <span class="string">"expires_in"</span>:<span class="number">3600</span>,
  <span class="string">"refresh_token"</span>:<span class="string">"tGzv3JOkF0XG5Qx2TlKWIA"</span>,
  <span class="string">"example_parameter"</span>:<span class="string">"example_value"</span>
}</span>
</code></pre><p>客户端必须忽略响应中不能识别的值的名称。令牌和从授权服务器接收到的值的大小未定义。客户端应该避免对值的大小做假设。授权服务器应记录其发放的任何值的大小。</p>
<h1 id="5-2-_错误响应">5.2. 错误响应</h1>
<p>授权服务器使用HTTP 400（错误请求）状态码响应，在响应中包含下列参数：</p>
<ul>
<li><p>error<br>必需的。下列ASCII[USASCII]错误代码之一：</p>
<ul>
<li>invalid_request<br>请求缺少必需的参数、包含不支持的参数值（除了许可类型）、重复参数、包含多个凭据、采用超过一种客户端身份验证机制或其他不规范的格式。</li>
<li>invalid_client<br>客户端身份验证失败（例如，未知的客户端，不包含客户端身份验证，或不支持的身份验证方法）。授权服务器可以返回HTTP 401（未授权）状态码来指出支持的HTTP身份验证方案。如果客户端试图通过“Authorization”请求标头域进行身份验证，授权服务器必须响应HTTP 401（未授权）状态码，并包含与客户端使用的身份验证方案匹配的“WWW-Authenticate”响应标头字段。</li>
<li>invalid_grant<br>提供的授权许可（如授权码、资源所有者凭据）或刷新令牌无效、过期、吊销、与在授权请求使用的重定向URI不匹配或颁发给另一个客户端。</li>
<li>unauthorized_client<br>进行身份验证的客户端没有被授权使用这种授权许可类型。</li>
<li>unsupported_grant_type<br>授权许可类型不被授权服务器支持。</li>
<li>invalid_scope<br>请求的范围无效、未知的、格式不正确或超出资源所有者许可的范围。</li>
</ul>
<p>“error”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</p>
</li>
<li>error_description<br>可选的。提供额外信息的人类可读的ASCII[USASCII]文本，用于协助客户端开发人员理解所发生的错误。“error_description”参数的值不能包含集合％x20-21 /％x23-5B /％x5D-7E以外的字符。</li>
<li>error_uri<br>可选的。指向带有有关错误的信息的人类可读网页的URI，用于提供客户端开发人员关于该错误的额外信息。“error_uri”参数值必须符合URI参考语法，因此不能包含集合％x21/%x23-5B /％x5D-7E以外的字符。</li>
</ul>
<p>这些参数使用<a href="http://tools.ietf.org/html/rfc4627" title="JSON" target="_blank" rel="external">RFC4627</a>定义的“application/json”媒体类型包含在HTTP响应实体正文中。通过将每个参数添加到最高结构级别， 参数被序列化为JavaScript对象表示法（JSON）的结构。参数名称和字符串值作为JSON字符串类型包含。数值的值作为JSON数字类型包含。参数顺序无关并可以变化。例如：</p>
<pre><code>HTTP/1.1 400 Bad Request
Content-Type: application/json;charset=UTF-8
<span class="operator"><span class="keyword">Cache</span>-Control: <span class="keyword">no</span>-store
<span class="keyword">Pragma</span>: <span class="keyword">no</span>-<span class="keyword">cache</span>
{
  <span class="string">"error"</span>:<span class="string">"invalid_request"</span>
}</span>
</code></pre><h1 id="6-_刷新访问令牌">6. 刷新访问令牌</h1>
<p>若授权服务器给客户端颁发了刷新令牌，客户端通过使用按<a href="../AppendixB/b.md">附录B</a>“application/x-www-form-urlencoded”格式在HTTP请求实体正文中发送下列UTF-8字符编码的参数向令牌端点发起刷新请求：</p>
<ul>
<li>grant_type<br>必需的。值必须设置为“refresh_token”。</li>
<li>refresh_token<br>必需的。颁发给客户端的刷新令牌。</li>
<li>scope<br>可选的。如<a href="../Section03/3.3.md">3.3</a>节所述的访问请求的范围。请求的范围不能包含任何不是由资源所有者原始许可的范围，若省略，被视为与资源所有者原始许可的范围相同。</li>
</ul>
<p>因为刷新令牌通常是用于请求额外的访问令牌的持久凭证，刷新令牌绑定到被它被颁发给的客户端。如果客户端类型是机密的或客户端被颁发了客户端凭据（或选定的其他身份验证要求），客户端必须如<a href="../Section03/3.2.1.md">3.2.1</a>节所述与授权服务器进行身份验证。</p>
<p>例如，客户端使用传输层安全发起如下HTTP请求（额外的换行仅用于显示目的）：</p>
<pre><code>POST /token HTTP/<span class="number">1.1</span>
Host: server.example.com
Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
Content-Type: application/x-www-form-urlencoded
<span class="variable">grant_type=</span>refresh_token&amp;<span class="variable">refresh_token=</span>tGzv3JOkF0XG5Qx2TlKWIA
</code></pre><p>授权服务器必须：</p>
<ul>
<li>要求机密客户端或任何被颁发了客户端凭据（或有其他身份验证要求）的客户端进行客户端身份验证，</li>
<li>若包括了客户端身份验证，验证客户端身份并确保刷新令牌是被颁发给进行身份验证的客户端的，并</li>
<li>验证刷新令牌。</li>
</ul>
<p>如果有效且被授权，授权服务器如<a href="../Section05/5.1.md">5.1</a>节所述颁发访问令牌。如果请求因验证失败或无效，授权服务器<a href="../Section05/5.2.md">5.2</a>节所述返回错误响应。</p>
<p>授权服务器可以颁发新的刷新令牌，在这种情况下，客户端必须放弃旧的刷新令牌，替换为新的刷新令牌。在向客户端颁发新的刷新令牌后授权服务器可以撤销旧的刷新令牌。若颁发了新的刷新令牌，刷新令牌的范围必须与客户端包含在请求中的刷新令牌的范围相同。</p>
<h1 id="7-_访问受保护资源">7. 访问受保护资源</h1>
<p>通过向资源服务器出示访问令牌，客户端访问受保护资源。资源服务器必须验证访问令牌，并确保它没有过期且其范围涵盖了请求的资源。资源服务器用于验证访问令牌的方法（以及任何错误响应）超出了本规范的范围，但一般包括资源服务器和授权服务器之间的互动或协调。</p>
<p>客户端使用访问令牌与资源服务器进行证认的方法依赖于授权服务器颁发的访问令牌的类型。通常，它涉及到使用具有所采用的访问令牌类型的规范定义的身份验证方案(如<a href="http://tools.ietf.org/html/rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage" target="_blank" rel="external">RFC6750</a>)的HTTP“Authorization”的请求标头字段<a href="http://tools.ietf.org/html/rfc2617" title="HTTP Authentication: Basic and Digest Access Authentication" target="_blank" rel="external">RFC2617</a>。</p>
<ul>
<li>7.1. <a href="7.1.md">访问令牌类型</a></li>
<li>7.2. <a href="7.2.md">错误响应</a></li>
</ul>
<h1 id="7-1-_访问令牌类型">7.1. 访问令牌类型</h1>
<p>访问令牌的类型给客户端提供了成功使用该访问令牌（和类型指定的属性）发起受保护资源请求所需的信息 若客户端不理解令牌类型，则不能使用该访问令牌。</p>
<p>例如，<a href="http://tools.ietf.org/html/rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage" target="_blank" rel="external">RFC6750</a>定义的“bearer”令牌类型简单的在请求中包含访问令牌字符串来使用：</p>
<pre><code><span class="request">GET <span class="string">/resource/1</span> HTTP/1.1</span>
<span class="attribute">Host</span>: <span class="string">example.com</span>
<span class="attribute">Authorization</span>: <span class="string">Bearer F_9.B5f-4.1JqM</span>
</code></pre><p>而[OAuth-HTTP-MAC]定义的“mac”令牌类型通过与许可类型一起颁发用于对HTTP请求中某些部分签名的消息认证码（MAC）的密钥来使用。</p>
<pre><code><span class="request">GET <span class="string">/resource/1</span> HTTP/1.1</span>
<span class="attribute">Host</span>: <span class="string">example.com</span>
<span class="attribute">Authorization</span>: <span class="string">MAC id="h480djs93hd8",nonce="274312:dj83hs9s",mac="kDZvddkndxvhGRXZhvuDjEWhGeE="</span>
</code></pre><p>提供上面的例子仅作说明用途。建议开发人员在使用前查阅<a href="http://tools.ietf.org/html/rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage" target="_blank" rel="external">RFC6750</a>和[OAuth-HTTP-MAC]规范。</p>
<p>每一种访问令牌类型的定义指定与“access_token”响应参数一起发送到客户端的额外属性。它还定义了HTTP验证方法当请求受保护资源时用于包含访问令牌。</p>
<h1 id="7-2-_错误响应">7.2. 错误响应</h1>
<p>如果资源访问请求失败，资源服务器应该通知客户端该错误。虽然规定这些错误响应超出了本规范的范围，但是本文档在<a href="../Section11/11.4.md">11.4</a>节建立了一张公共注册表，用作OAuth令牌身份验证方案之间分享的错误值。</p>
<p>主要为OAuth令牌身份验证设计的新身份验证方案应该定义向客户端提供错误状态码的机制，其中允许的错误值限于本规范建立的错误注册表中。</p>
<p>这些方案可以限制有效的错误代码是注册值的子集。如果错误代码使用命名参数返回，该参数名称应该是“error”。</p>
<p>其他能够被用于OAuth令牌身份验证的方案，但不是主要为此目的而设计的，可以帮顶他们的错误值到相同方式的注册表项。</p>
<p>新的认证方案也可以选择指定使用“error_description”和&quot;error_uri&quot;参数，用于以本文档中用法相同的方式的返回错误信息。</p>
<h1 id="8-_可扩展性">8. 可扩展性</h1>
<ul>
<li>8.1. <a href="8.1.md">定义访问令牌类型</a></li>
<li>8.2. <a href="8.2.md">定义新的端点参数</a></li>
<li>8.3. <a href="8.3.md">定义新的授权许可类型</a></li>
<li>8.4. <a href="8.4.md">定义新的授权端点响应类型</a></li>
<li>8.5. <a href="8.5.md">定义其他错误代码</a><h1 id="8-1-_定义访问令牌类型">8.1. 定义访问令牌类型</h1>
访问令牌类型可以用以下两种方法之一来定义：在访问令牌类型注册表中注册（按<a href="../Section11/11.1.md">11.1</a>节中的过程）的，或者通过使用一个唯一的绝对URI作为它的名字。</li>
</ul>
<p>采用URI命名的类型应该限定于特定供应商的实现，它们不是普遍适用的并且特定于使用它们的资源服务器的实现细节。</p>
<p>所有其他类型都必须注册。类型名称必需符合type-name ANBF。如果类型定义包含了一种新的HTTP身份验证方案，该类型名称应该与该HTTP身份验证方案名称一致（如<a href="http://tools.ietf.org/html/rfc2617" title="HTTP Authentication: Basic and Digest Access Authentication" target="_blank" rel="external">RFC2617</a>定义）。令牌类型“example”被保留用于样例中。</p>
<pre><code><span class="class"><span class="keyword">type</span>-<span class="title">name</span>  </span>= <span class="number">1</span>*name-<span class="built_in">char</span>
name-<span class="built_in">char</span>  = <span class="string">"-"</span> / <span class="string">"."</span> / <span class="string">"_"</span> / DIGIT / ALPHA
</code></pre><h1 id="8-2-_定义新的端点参数">8.2. 定义新的端点参数</h1>
<p>用于授权端点或令牌端点的新的请求或响应参数按照<a href="../Section11/11.2.md">11.2</a>节中的过程在OAuth参数注册表中定义和注册。</p>
<p>参数名称必须符合param-name ABNF，并且参数值的语法必须是明确定义的（例如，使用ABNF，或现有参数的语法的引用）。</p>
<pre><code>param-name  = <span class="number">1</span>*name-<span class="keyword">char</span>
name-<span class="keyword">char</span>   = <span class="string">"-"</span> <span class="regexp">/ "." /</span> <span class="string">"_"</span> <span class="regexp">/ DIGIT /</span> ALPHA
</code></pre><p>不是普遍适用的并且特定于使用它们的授权服务器的实现细节的未注册的特定供应商的参数扩展应该采用特定供应商的前缀（例如，以“companyname_”开头），从而不会与其他已注册的值冲突。</p>
<h1 id="8-3-_定义新的授权许可类型">8.3. 定义新的授权许可类型</h1>
<p>新的授权许可类型可以通过赋予它们一个“grant_type”参数使用的唯一的绝对URI来定义。如果扩展许可类型需要其他令牌端点参数，它们必须如<a href="../Section11/11.2.md">11.2</a>节所述在OAuth参数注册表中注册。</p>
<h1 id="8-4-_定义新的授权端点响应类型">8.4. 定义新的授权端点响应类型</h1>
<p>用于授权端点的新的响应类型按照<a href="../Section11/11.3.md">11.3</a>节中的过程在授权端点响应类型注册表中定义和注册。响应类型名称必须符合response-type ABNF。</p>
<pre><code><span class="built_in">response</span>-type  = <span class="built_in">response</span>-name *( SP <span class="built_in">response</span>-name )
<span class="built_in">response</span>-name  = <span class="number">1</span>*<span class="built_in">response</span>-char
<span class="built_in">response</span>-char  = <span class="string">"_"</span> / DIGIT / ALPHA
</code></pre><p>如果响应类型包含一个或多个空格字符（%x20），它被看作是一个空格分隔的值列表，其中的值的顺序不重要。只有一种值的顺序可以被注册，它涵盖了相同的值的集合的所有其他排列。</p>
<p>例如，响应类型“token code”未由本规范定义。然而，一个扩展可以定义和注册“token code”响应类型。 一旦注册，相同的组合“code token”不能被注册，但是这两个值都可以用于表示相同的响应类型。</p>
<h1 id="8-5-_定义其他错误代码">8.5. 定义其他错误代码</h1>
<p>在协议扩展（例如，访问令牌类型、扩展参数或扩展许可类型等）需要其他错误代码用于授权码许可错误响应（<a href="../Section04/4.1.2.1.md">4.1.2.1</a>节）、隐式许可错误响应（<a href="../Section04/4.2.2.1.md">4.2.2.1</a>节）、令牌错误响应（<a href="../Section5.2.md">5.2</a>节）或资源访问错误响应（<a href="../Section07/7.2.md">7.2</a>节）的情况下，这些错误代码可以被定义。</p>
<p>如果用于与它们配合的扩展是已注册的访问令牌类型，已注册的端点参数或者扩展许可类型，扩展错误代码必须被注册。用于未注册扩展的错误代码可以被注册。</p>
<p>错误代码必须符合的error ABNF，且可能的话应该以一致的名称作前缀。例如，一个表示给扩展参数“example”设置了无效值的错误应该被命名为“example_invalid”。</p>
<pre><code> <span class="keyword">error</span>      = <span class="number">1</span>*<span class="keyword">error</span>-<span class="built_in">char</span>
 <span class="keyword">error</span>-<span class="built_in">char</span> = %x20-<span class="number">21</span> / %x23-<span class="number">5</span>B / %x5D-<span class="number">7</span>E
</code></pre><h1 id="9-_本机应用程序">9. 本机应用程序</h1>
<p>本机应用程序是安装和执行在资源所有者使用的设备上的客户端（例如，桌面程序，本机移动应用）。本机应用程序需要关于安全、平台能力和整体最终用户体验的特别注意事项。</p>
<p>授权端点需要在客户端和资源所有者用户代理之间进行交互。本机应用程序可以调用外部的用户代理，或在应用程序中嵌入用户代理。例如：</p>
<ul>
<li>外部用户代理-本机应用程序可以捕获来自授权服务器的响应。它可以使用带有操作系统已注册方案的重定向URI调用客户端作为处理程序，手动复制粘贴凭据，运行本地Web服务器，安装用户代理扩展，或者通过提供重定向URI来指定客户端控制下的服务器托管资源，反过来使响应对本机应用程序可用。</li>
<li>嵌入式用户代理-通过监视资源加载过程中发生的状态变化或者访问用户代理的cookies存储，本机应用程序直接与嵌入式用户代理通信，获得响应。<br>当在外部或嵌入式用户代理中选择时，开发者应该考虑如下：</li>
<li>外部用户代理可能会提高完成率，因为资源所有者可能已经有了与授权服务器的活动会话，避免了重新进行身份验证的需要。它提供了熟悉的最终用户体验和功能。资源所有者可能也依赖于用户代理特性或扩展帮助他进行身份验证（例如密码管理器、两步设备读取器）</li>
<li>嵌入式用户代理可能会提供更好的可用性，因为它避免了切换上下文和打开新窗口的需要。</li>
<li>嵌入式用户代理构成了安全挑战，因为资源所有者在一个未识别的窗口中进行身份验证，无法获得在大多数外部用户代理中的可视的保护。嵌入式用户代理教育用户信任未标识身份验证请求（使钓鱼攻击更易于实施）。<br>当在隐式许可类型和授权码许可类型中选择时，下列应该被考虑：</li>
<li>使用授权码许可类型的本机应用程序应该这么做而不需使用用户凭据，因为本机应用程序无力保持客户端凭据的机密性。</li>
<li>当使用隐式许可类型流程时，刷新令牌不会返回，这就要求一旦访问令牌过期就要重复授权过程。</li>
</ul>
<h1 id="10-_安全考量">10. 安全考量</h1>
<p>作为一个灵活的可扩展的框架，OAuth的安全性考量依赖于许多因素。 以下小节提为实现者提供了聚焦在<a href="../Section02/2.1.md">2.1</a>节所述的三种客户端配置上的安全指南：Web应用、基于用户代理的应用和本地应用程序。</p>
<p>全面的OAuth安全模型和分析以及该协议设计的背景在[OAuth-THREATMODE]中提供。</p>
<ul>
<li>10.1. <a href="10.1.md">客户端身份验证</a></li>
<li>10.2. <a href="10.2.md">客户端仿冒</a></li>
<li>10.3. <a href="10.3.md">访问令牌</a></li>
<li>10.4. <a href="10.4.md">刷新令牌</a></li>
<li>10.5. <a href="10.5.md">授权码</a></li>
<li>10.6. <a href="10.6.md">授权码重定向URI操纵</a></li>
<li>10.7. <a href="10.7.md">资源拥有者密码凭据</a></li>
<li>10.8. <a href="10.8.md">请求机密性</a></li>
<li>10.9. <a href="10.9.md">确保端点真实性</a></li>
<li>10.10. <a href="10.10.md">凭据猜测攻击</a></li>
<li>10.11. <a href="10.11.md">钓鱼攻击</a></li>
<li>10.12. <a href="10.12.md">跨站请求伪造</a></li>
<li>10.13. <a href="10.13.md">点击劫持</a></li>
<li>10.14. <a href="10.14.md">代码注入和输入验证</a></li>
<li>10.15. <a href="10.15.md">自由重定向</a></li>
<li>10.16. <a href="10.16.md">隐式流程中滥用访问令牌假冒资源所有者</a><h1 id="10-1-_客户端身份验证">10.1. 客户端身份验证</h1>
授权服务器为进行客户端身份验证的目的，为Web应用客户端创建客户端凭据。授权服务器被鼓励考虑比客户端密码更强的客户端身份验证手段。Web应用程序客户端必须确保客户端密码和其他客户端凭据的机密性。</li>
</ul>
<p>授权不得向本地应用程序或基于用户代理的应用客户端颁发客户端密码或其他客户端凭据用于客户端验证目的。授权服务器可以颁发客户端密码或其他凭据给专门的设备上特定安装的本地应用程序客户端。</p>
<p>当客户端身份验证不可用时，授权服务器应该采用其他方式来验证客户端的身份-例如，通过要求客户端重定向URI的注册或者引入资源所有者来确认身份。当请求资源所有者授权时，有效的重定向URI是不足以验证客户端的身份，但可以用来防止在获得资源所有者授权后将凭据传递给假冒的客户端。</p>
<p>授权服务器必须考虑与未进行身份验证的客户端交互的安全实现并采取措施限制颁发给这些客户端的其他凭据（如刷新令牌）的潜在泄露。</p>
<h1 id="10-2-_客户端仿冒">10.2. 客户端仿冒</h1>
<p>如果被仿冒的客户端不能，或无法保持其客户端凭据保密。恶意客户端可能冒充其他客户端，并获得对受保护资源的访问权限。</p>
<p>授权服务器任何可能的时候必须验证客户端身份。如果授权服务器由于客户端的性质无法对客户端进行身份验证，授权服务器必须要求注册任何用于接收授权响应的重定向URI并且应该利用其他手段保护资源所有者防止这样的潜在仿冒客户端。例如，授权服务器可以引入资源所有者来帮助识别客户端和它的来源。</p>
<p>授权服务器应该实施显式的资源所有者身份验证并且提供给资源所有者有关客户端及其请求的授权范围和生命周期的信息。由资源所有者在当前客户端上下文中审查信息并授权或拒绝该请求。</p>
<p>授权服务器未对客户端进行身份验证（没有活动的资源所有者交互）或未依靠其他手段确保重复的请求来自于原始客户端而非冒充者时，不应该自动处理重复的授权请求。</p>
<h1 id="10-3-_访问令牌">10.3. 访问令牌</h1>
<p>访问令牌凭据（以及任何机密的访问令牌属性）在传输和储存时必须保持机密性，并只与授权服务器、访问令牌生效的资源服务器和访问令牌被颁发的客户端共享。访问令牌凭据必须只能使用带有<a href="http://tools.ietf.org/html/rfc2818" title="HTTP Over TLS" target="_blank" rel="external">RFC2818</a>定义的服务器身份验证的<a href="../Section01/1.6.md">1.6</a>节所述的TLS 传输。</p>
<p>当使用隐式授权许可类型时，访问令牌在URI片段中传输，这可能泄露访问令牌给未授权的一方。</p>
<p>授权服务器必须确保访问令牌不能被生成、修改或被未授权一方猜测而产生有效的访问令牌。</p>
<p>客户端应该为最小范围的需要请求访问令牌。授权服务器在选择如何兑现请求的范围时应该将客户端身份考虑在内，且可以颁发具有比请求的更少的权限的访问令牌。</p>
<p>本规范未给资源服务器提供任何方法来确保特定的客户端提交给它的访问令牌是授权服务器颁发给此客户端的。</p>
<h1 id="10-4-_刷新令牌">10.4. 刷新令牌</h1>
<p>授权服务器可以给Web应用客户端和本机应用程序客户端颁发刷新令牌。</p>
<p>刷新令牌在传输和储存时必须保持机密性，并只与授权服务器和刷新令牌被颁发的客户端共享。授权服务器必须维护刷新令牌和它被颁发给的客户端之间的绑定。刷新令牌必须只能使用带有<a href="http://tools.ietf.org/html/rfc2818" title="HTTP Over TLS" target="_blank" rel="external">RFC2818</a>定义的服务器身份验证的<a href="../Section01/1.6.md">1.6</a>所述的TLS 传输。<br>授权服务器必须验证刷新令牌和客户端身份之间的绑定，无论客户端身份是否能被验证。当无法进行客户端身份验证时，授权服务器应该采取其他手段检测刷新令牌滥用。</p>
<p>例如，授权服务器可以使用刷新令牌轮转机制，随着每次访问令牌刷新响应，新的刷新令牌被颁发。以前的刷新令牌被作废但是由授权服务器保留。如果刷新令牌被泄露，随后同时被攻击者和合法客户端使用，他们中一人将提交被作废的刷新令牌，这将通知入侵给授权服务器。</p>
<p>授权服务器必须确保刷新令牌不能被生成、修改或被未授权一方猜测而产生有效的刷新令牌。</p>
<h1 id="10-5-_授权码">10.5. 授权码</h1>
<p>授权码的传输应该建立在安全通道上，客户端应该要求在它的重定向URI上使用TLS，若该URI指示了一个网络资源。 由于授权码由用户代理重定向传输，它们可能潜在地通过用户代理历史记录和HTTP参照标头被泄露。</p>
<p>授权码明以纯文本承载凭据使用，用于验证在授权服务器许可权限的资源所有者就是返回到客户端完成此过程的相同的资源所有者。因此，如果客户端依赖于授权码作为它自己的资源所有者身份验证，客户端重定向端点必须要求使用TLS。</p>
<p>授权码必须是短暂的且是单用户的。如果授权服务器观察到多次以授权码交换访问令牌的尝试，授权服务器应该试图吊销所有基于泄露的授权码而颁发的访问令牌。</p>
<p>如果客户端可以进行身份验证，授权服务器必须验证客户端身份，并确保授权码颁发给了同一个客户端。</p>
<h1 id="10-6-_授权码重定向URI伪造">10.6. 授权码重定向URI伪造</h1>
<p>当使用授权码许可类型请求授权时，客户端可以通过“redirect_uri”参数指定重定向URI。 如果攻击者能够伪造重定向URI的值，这可能导致授权服务器向攻击者控制的URI重定向带有授权码的资源所有者用户代理。</p>
<p>攻击者可以在合法客户端上创建一个帐户，并开始授权流程。当攻击者的用户代理被发送到授权服务器来许可访问权限时，攻击者抓取合法客户端提供的授权URI并用攻击者控制下的URI替换客户端的重定向URI。 攻击者然后欺骗受害者顺着仿冒的链接来对合法客户端授权访问权限。</p>
<p>一旦在授权服务器——受害者被唆使代表一个合法的被信任的客户端使用正常有效的请求——授权该请求时。受害者然后带着授权码重定向到受攻击者控制的端点。通过使用客户端提交的原始重定向URI向客户端发送授权码，攻击者完成授权流程。客户端用授权码交换访问令牌并与将它与攻击者的客户端账号关联，该账户现在能获得受害者授权的（通过客户端）对访问受保护资源的访问权限。</p>
<p>为了防止这种攻击，授权服务器必须确保用于获得授权码的重定向URI与当用授权码交换访问令牌时提供的重定向URI相同。授权服务器必须要求公共客户端，并且应该要求机密客户注册它们的重定向URI。如果在请求中提供一个重定向URI，授权服务器必须验证对注册的值。如果在请求中提供了重定向URI，授权服务器必须对比已注册的。<br>10.7. 资源所有者密码凭据</p>
<p>资源所有者密码凭据许可类型通常用于遗留或迁移原因。它降低了由客户端存储用户名和密码的整体风险，但并没有消除泄露高度特权的凭证给客户端的需求。</p>
<p>这种许可类型比其他许可类型承载了更高的风险，因为它保留了本协议寻求避免的密码反模式。客户端可能滥用密码或密码可能会无意中被泄露给攻击者（例如，通过客户端保存的日志文件或其他记录）。</p>
<p>此外，由于资源拥有者对授权过程没有控制权（在转手它的凭据给客户端后资源所有者的参与结束），客户端可以获得比资源所有者预期的具有更大范围的访问令牌。授权服务器应该考虑由这种许可类型颁发的访问令牌的范围和寿命。</p>
<p>授权服务器和客户端应该尽量减少这种许可类型的使用，并尽可能采用其他许可类型。</p>
<h1 id="10-8-_请求机密性">10.8. 请求机密性</h1>
<p>访问令牌、刷新令牌、资源所有者密码和客户端凭据不能以明文传输。授权码不应该以明文传输。</p>
<p>“state”和“scope”参数不应该包含敏感的客户端或资源所有者的纯文本信息，因为它们可能在不安全的通道上被传输或被不安全地存储。</p>
<h1 id="10-9-_确保端点真实性">10.9. 确保端点真实性</h1>
<p>为了防止中间人攻击，授权服务器必须对任何被发送到授权和令牌端点的请求要求<a href="http://tools.ietf.org/html/rfc2818" title="HTTP Over TLS" target="_blank" rel="external">RFC2818</a>中定义的具有服务器身份验证的TLS 的使用。客户端必须按<a href="http://tools.ietf.org/html/rfc6125" title="Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)" target="_blank" rel="external">RFC6125</a>定义且按照它服务器身份进行身份验证的需求验证授权服务器的的TLS证书。</p>
<h1 id="10-10-_凭据猜测攻击">10.10. 凭据猜测攻击</h1>
<p>授权服务器必须防止攻击者猜测访问令牌、授权码、刷新令牌、资源所有者密码和客户端凭据。</p>
<p>攻击者猜测已生成令牌（和其它不打算被最终用户掌握的凭据）的概率必须小于或等于2 ^（-128），并且应该小于或等于2 ^（-160）。</p>
<p>授权服务器必须采用其他手段来保护打算给最终用户使用的凭据。</p>
<h1 id="10-11-_钓鱼攻击">10.11. 钓鱼攻击</h1>
<p>本协议或类似协议的广泛部署，可能导致最终用户变成习惯于被重定向到要求输入他们的密码的网站的做法。</p>
<p>如果最终用户在输入他们的凭据前不注意辨别这些网站的真伪，这将使攻击者利用这种做法窃取资源所有者的密码成为可能。</p>
<p>服务提供者应尝试教育最终用户有关钓鱼攻击构成的风险，并且应该为最终用户提供使确认它们的站点的真伪变得简单的机制。客户端开发者应该考虑他们如何与用户代理（例如，外部的和嵌入式的）交互的安全启示以及最终用户辨别授权服务器真伪的能力。</p>
<p>为了减小钓鱼攻击的风险，授权服务器必须要求在用于最终用户交互的每个端点上使用TLS。</p>
<h1 id="10-12-_跨站请求伪造">10.12. 跨站请求伪造</h1>
<p>跨站请求伪造（CSRF）是一种漏洞利用，攻击者致使受害的最终用户按恶意URI（例如以误导的链接、图片或重定向提供给用户代理）到达受信任的服务器（通常由存在有效的会话Cookie而建立）。</p>
<p>针对客户端的重定向URI的CSRF攻击允许攻击者注入自己的授权码或访问令牌，这将导致在客户端中使用与攻击者的受保护资源关联的访问令牌而非受害者的（例如，保存受害者的银行账户信息到攻击者控制的受保护资源）。</p>
<p>客户端必须为它的重定向URI实现CSRF保护。这通常通过要求向重定向URI端点发送的任何请求包含该请求对用户代理身份认证状态的绑定值（例如，用于对用户代理进行身份验证的会话Cookie的哈希值）来实现。客户端应该使用“state”请求参数在发起授权请求时向授权服务器传送该值。</p>
<p>一旦从最终用户获得授权，授权服务器重定向最终用户的用户代理带着要求的包含在“state”参数中的绑定值回到客户端。 通过该绑定值与用户代理的身份验证状态的匹配，绑定值使客户端能够验证请求的有效性。用于CSRF保护的绑定值必须包含不可猜测的值（如<a href="10.10.md">10.10</a>节所述）且用户代理的身份验证状态（例如会话Cookie、HTML5本地存储）必须保存在只能被客户端和用户代理访问的地方（即通过同源策略保护）。</p>
<p>针对授权服务器的授权端点的CSRF攻击可能导致攻击者获得最终用户为恶意客户端的授权而不牵涉或警告最终用户。</p>
<p>授权服务器必须为它的授权端点实现CSRF保护并且确保在资源所有者未意识到且无显式同意时恶意客户端不能获得授权。</p>
<h1 id="10-13-_点击劫持">10.13. 点击劫持</h1>
<p>在点击劫持攻击中，攻击者注册一个合法客户端然后构造一个恶意站点，在一个透明的覆盖在一组虚假按钮上面的嵌入框架中加载授权服务器的授权端点Web页面，这些按钮被精心构造恰好放置在授权页面上的重要按钮下方。当最终用户点击了一个误导的可见的按钮时，最终用户实际上点击了授权页面上一个不可见的按钮（例如“授权”按钮）。 这允许攻击者欺骗资源所有者许可它的客户端最终用户不知晓的访问权限。</p>
<p>为了防止这种形式的攻击，在请求最终用户授权时本机应用程序应该使用外部浏览器而非应用程序中嵌入的浏览器。 对于大多数较新的浏览器，避免嵌入框架可以由授权服务器使用（非标准的）“x-frame-options”标头实施。 该标头可以有两个值，“deny”和“sameorigin”，它将阻止任何框架，或按不同来源的站点分别构造框架。 对于较旧的浏览器，JavaScript框架破坏技术可以使用，但可能不会在所有的浏览器中生效。</p>
<h1 id="10-14-_代码注入和输入验证">10.14. 代码注入和输入验证</h1>
<p>代码注入攻击当程序使用的输入或其他外部变量未清洗而导致对程序逻辑的修改时发生。 这可能允许攻击者对应用程序的设备或它的数据的访问权限，导致服务拒绝或引入许多的恶意副作用。</p>
<p>授权服务器和客户端必须清洗（并在可能的情况下验证）收到的任何值--特别是，“state”和“redirect_uri”参数的值。</p>
<h1 id="10-15-_自由重定向器">10.15. 自由重定向器</h1>
<p>授权服务器、授权端点和客户端重定向端点可能被不当配置，被作为自由重定向器。自由重定向器是一个使用参数自动地向参数值指定而无任何验证的地址重定向用户代理的端点。</p>
<p>自由重定向器可被用于钓鱼攻击，或者被攻击者通过使用熟悉的受信任的目标地址的URI授权部分使最终用户访问恶意站点。此外，如果授权服务器允许客户端只注册部分的重定向URI，攻击者可以使用客户端操作的自由重定向器构造重定向URI，这将跳过授权服务器验证但是发送授权码或访问令牌给攻击者控制下的端点。</p>
<h1 id="10-16-_在隐式流程中滥用访问令牌假冒资源所有者">10.16. 在隐式流程中滥用访问令牌假冒资源所有者</h1>
<p>对于使用隐式流程的公共客户端，本规范没有为客户端提供任何方法来决定访问令牌颁发给的是什么样的客户端。</p>
<p>资源所有者可能通过给攻击者的恶意客户端许可访问令牌自愿委托资源的访问权限。这可能是由于钓鱼或一些其他借口。攻击者也可能通过其他机制窃取令牌。 攻击者然后可能会尝试通过向合法公开客户端提供该访问令牌假冒资源拥有者。</p>
<p>在隐式流程（response_type=token）中，攻击者可以轻易转换来自授权服务器的响应中的令牌，用事先颁发给攻击者的令牌替换真实的访问令牌。</p>
<p>依赖于在返回通道中传递访问令牌识别客户端用户的与本机应用程序通信的服务器可能由攻击者创建能够注入随意的窃取的访问令牌的危险的程序被类似地危及。</p>
<p>任何做出只有资源所有者能够提交给它有效的为资源的访问令牌的假设的公共客户端都是易受这种类型的攻击的。</p>
<p>这种类型的攻击可能在合法的客户端上泄露有关资源所有者的信息给攻击者（恶意客户端）。这也将允许攻击者在合法客户端上用和资源所有者相同的权限执行操作，该资源所有者最初许可了访问令牌或授权码。</p>
<p>客户端对资源拥有者进行身份验证超出了本规范的范围。任何使用授权过程作为客户端对受委托的最终用户进行身份验证的形式的规范（例如，第三方登录服务）不能在没有其他的客户端能够判断访问令牌是否颁发是颁发给它使用的安全机制的情况下使用隐式流程（例如，限制访问令牌的受众）。</p>
<h1 id="11-_IANA考量">11. IANA考量</h1>
<ul>
<li>11.1. <a href="11.1.md">OAuth访问令牌类型注册表</a></li>
<li>11.1.1. <a href="11.1.1.md">注册模板</a></li>
<li>11.2. <a href="11.2.md">OAuth参数注册表</a></li>
<li>11.2.1. <a href="11.2.1md">注册模板</a></li>
<li>11.2.2. <a href="11.2.2.md">初始注册表内容</a></li>
<li>11.3. <a href="11.3.md">OAuth授权端点响应类型注册表</a></li>
<li>11.3.1. <a href="11.3.1.md">注册模板</a></li>
<li>11.3.2. <a href="11.3.2.md">初始注册表内容</a></li>
<li>11.4. <a href="11.4.md">OAuth扩展错误注册表</a></li>
<li>11.4.1. <a href="11.4.1.md">注册模板</a><h1 id="11-1-_OAuth访问令牌类型注册表">11.1. OAuth访问令牌类型注册表</h1>
本规范建立OAuth访问令牌类型注册表。</li>
</ul>
<p>在oauth-ext-review@ietf.org邮件列表上的两周的审查期后，根据一位或多位指定的专家的建议下，按规范需求（<a href="http://tools.ietf.org/html/rfc5226" title="Guidelines for Writing an IANA Considerations Section in RFCs" target="_blank" rel="external">RFC5226</a>）注册访问令牌类型。然而，为允许发表之前的值的分配，指定的专家（们）一旦他们对这样的规范即将发布感到满意可以同意注册。</p>
<p>注册请求必须使用正确的主题（例如“访问令牌类型example”的请求）发送到oauth-ext-review@ietf.org邮件列表来审查和评论。</p>
<p>在审查期间，指定的专家（们）将同意或拒绝该注册请求，向审查列表和IANA通报该决定。拒绝应该包含解释，并且可能的话，包含如何使请求成功的建议。</p>
<p>IANA必须只接受来自指定的专家（们）的注册表更新并且应该引导所有注册请求至审查邮件列表。</p>
<ul>
<li>11.1.1. <a href="11.1.1.md">注册模板</a></li>
</ul>
<h1 id="11-1-1-_注册模板">11.1.1. 注册模板</h1>
<ul>
<li><p>Type name：</p>
<p>请求的名称（例如，“example”）。</p>
</li>
<li><p>Additional Token Endpoint Response Parameters:</p>
<p>随“access_token”参数一起返回的其他响应参数。 新的参数都必须如<a href="11.2.md">11.2</a>节所述在OAuth参数注册表中分别注册。</p>
</li>
<li><p>HTTP Authentication Scheme(s):</p>
<p>HTTP身份验证方案名称，如果有的话，用于使用这种类型的访问令牌对受保护资源进行身份验证。</p>
</li>
<li><p>Change controller：</p>
<p>对于标准化过程的RFC，指定为“IETF”。 对于其他，给出负责的部分的名称。 其他细节（例如，邮政地址，电子邮件地址，主页URI）也可以包括在内。</p>
</li>
<li><p>Specification document(s):</p>
<p>指定参数的文档的引用文献，最好包括可以用于检索文档副本的URI。 相关章节的指示也可以包含但不是必需的。</p>
<h1 id="11-2-_OAuth参数注册表">11.2. OAuth参数注册表</h1>
<p>本规范建立OAuth参数注册表。</p>
</li>
</ul>
<p>在oauth-ext-review@ietf.org邮件列表上的两周的审查期后，根据一位或多位指定的专家的建议下，按规范需求（<a href="http://tools.ietf.org/html/rfc5226" title="Guidelines for Writing an IANA Considerations Section in RFCs" target="_blank" rel="external">RFC5226</a>）注册列入授权端点请求、授权端点响应、令牌端点请求或令牌端点响应的其他参数。然而，为允许发表之前的值的分配，指定的专家（们）一旦他们对这样的规范即将发布感到满意可以同意注册。</p>
<p>注册请求必须使用正确的主题（例如，参数“example”的请求）发送到oauth-ext-review@ietf.org邮件列表来审查和评论。</p>
<p>在审查期间，指定的专家（们）将同意或拒绝该注册请求，向审查列表和IANA通报该决定。拒绝应该包含解释，并且可能的话，包含如何使请求成功的建议。</p>
<p>IANA必须只接受来自指定的专家（们）的注册表更新并且应该引导所有注册请求至审查邮件列表。</p>
<ul>
<li>11.2.1. <a href="11.2.1md">注册模板</a></li>
<li>11.2.2. <a href="11.2.2.md">初始注册表内容</a></li>
</ul>
<h1 id="11-2-1-_注册模板">11.2.1. 注册模板</h1>
<ul>
<li><p>Parameter name:</p>
<p>请求的名称（例如，“example”）。</p>
</li>
<li><p>Parameter usage location:</p>
<p>参数可以使用的位置。 可能的位置为授权请求、授权响应、令牌请求或令牌响应。</p>
</li>
<li><p>Change controller:</p>
<p>对于标准化过程的RFC，指定为“IETF”。对于其他，给出负责的部分的名称。其他细节（例如，邮政地址，电子邮件地址，主页URI）也可以包括在内。</p>
</li>
<li><p>Specification document(s):</p>
<p>指定参数的文档的引用文献，最好包括可以用于检索文档副本的URI。相关章节的指示也可以包含但不是必需的。</p>
<h1 id="11-2-2-_最初的注册表内容">11.2.2. 最初的注册表内容</h1>
<p>OAuth参数注册表中的初始内容：</p>
</li>
<li>Parameter name: client_id</li>
<li>Parameter usage location: authorization request, token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: client_secret</li>
<li>Parameter usage location: token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: response_type</li>
<li>Parameter usage location: authorization request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: redirect_uri</li>
<li>Parameter usage location: authorization request, token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: scope</li>
<li>Parameter usage location: authorization request, authorization response, token request, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: state</li>
<li>Parameter usage location: authorization request, authorization response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: code</li>
<li>Parameter usage location: authorization response, token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: error_description</li>
<li>Parameter usage location: authorization response, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: error_uri</li>
<li>Parameter usage location: authorization response, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: grant_type</li>
<li>Parameter usage location: token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: access_token</li>
<li>Parameter usage location: authorization response, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: token_type</li>
<li>Parameter usage location: authorization response, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: expires_in</li>
<li>Parameter usage location: authorization response, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: username</li>
<li>Parameter usage location: token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: password</li>
<li>Parameter usage location: token request</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Parameter name: refresh_token</li>
<li>Parameter usage location: token request, token response</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<h1 id="11-3-_OAuth授权端点响应类型注册表">11.3. OAuth授权端点响应类型注册表</h1>
<p>本规范建立OAuth授权端点响应类型注册表。</p>
<p>在oauth-ext-review@ietf.org邮件列表上的两周的审查期后，根据一位或多位指定的专家的建议下，按规范需求（<a href="http://tools.ietf.org/html/rfc5226" title="Guidelines for Writing an IANA Considerations Section in RFCs" target="_blank" rel="external">RFC5226</a>）注册授权端点使用的其他响应类型。然而，为允许发表之前的值的分配，指定的专家（们）一旦他们对这样的规范即将发布感到满意可以同意注册。</p>
<p>注册请求必须使用正确的主题（例如“响应类型example”的请求）发送到oauth-ext-review@ietf.org邮件列表来审查和评论。</p>
<p>在审查期间，指定的专家（们）将同意或拒绝该注册请求，向审查列表和IANA通报该决定。</p>
<p>IANA必须只接受来自指定的专家（们）的注册表更新并且应该引导所有注册请求至审查邮件列表。</p>
<ul>
<li>11.3.1. <a href="11.3.1.md">注册模板</a></li>
<li>11.3.2. <a href="11.3.2.md">初始注册表内容</a></li>
</ul>
<h1 id="11-3-1-_注册模板">11.3.1. 注册模板</h1>
<ul>
<li><p>Response type name:</p>
<p>请求的名称（例如，“example”）。</p>
</li>
<li><p>Change controller:</p>
<p>对于标准化过程的RFC，指定为“IETF”。对于其他，给出负责的部分的名称。其他细节（例如，邮政地址，电子邮件地址，主页URI）也可以包括在内。</p>
</li>
<li><p>Specification document(s):</p>
<p>指定参数的文档的引用文献，最好包括可以用于检索文档副本的URI。相关章节的指示也可以包含但不是必需的</p>
<h1 id="11-3-2-_最初的注册表内容">11.3.2. 最初的注册表内容</h1>
<p>OAuth授权端点响应类型注册表的初始内容：</p>
</li>
<li>Response type name: code</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<ul>
<li>Response type name: token</li>
<li>Change controller: IETF</li>
<li>Specification document(s): <a href="../index.md" title="RFC 6749">RFC 6749</a></li>
</ul>
<h1 id="11-4-_OAuth扩展错误注册表">11.4. OAuth扩展错误注册表</h1>
<p>本规范建立OAuth扩展错误注册表。</p>
<p>在oauth-ext-review@ietf.org邮件列表上的两周的审查期后，根据一位或多位指定的专家的建议下，按规范需求（<a href="http://tools.ietf.org/html/rfc5226" title="Guidelines for Writing an IANA Considerations Section in RFCs" target="_blank" rel="external">RFC5226</a>）注册与其他协议扩展（例如，扩展的许可类型、访问令牌类型或者扩展参数）一起使用的其他错误代码。然而，为允许发表之前的值的分配，指定的专家（们）一旦他们对这样的规范即将发布感到满意可以同意注册。</p>
<p>注册请求必须使用正确的主题（例如“错误代码example”的请求）发送到oauth-ext-review@ietf.org邮件列表来审查和评论。</p>
<p>在审查期间，指定的专家（们）将同意或拒绝该注册请求，向审查列表和IANA通报该决定。拒绝应该包含解释，并且可能的话，包含如何使请求成功的建议。</p>
<p>IANA必须只接受来自指定的专家（们）的注册表更新并且应该引导所有注册请求至审查邮件列表。</p>
<ul>
<li>11.4.1. <a href="11.4.1.md">注册模板</a></li>
</ul>
<h1 id="11-4-1-_注册模板">11.4.1. 注册模板</h1>
<ul>
<li><p>Error name:</p>
<p>请求的名称（例如，“example”）。错误名称的值<br>不能包含集合%x20-21 /%x23-5B /%x5D-7E以外的字符。</p>
</li>
<li><p>Error usage location:</p>
<p>错误使用的位置。可能的位置是授权代码许可错误响应（<a href="../Section04/4.1.2.1.md">4.1.2.1</a>节），隐式许可错误响应（<a href="../Section04/4.2.2.1.md">4.2.2.1</a>节），令牌错误响应（<a href="../Section05/5.2.md">5.2</a>节），或资源访问错误的响应（<a href="../Section07/7.2.md">7.2</a>节）。</p>
</li>
<li><p>Related protocol extension:</p>
<p>与错语代码一起使用的扩展许可类型、访问令牌类型或扩展参数的名称。</p>
</li>
<li><p>Change controller:</p>
<p>对于标准化过程的RFC，指定为“IETF”。对于其他，给出负责的部分的名称。其他细节（例如，邮政地址，电子邮件地址，主页URI）也可以包括在内。</p>
</li>
<li><p>Specification document(s):</p>
<p>指定参数的文档的引用文献，最好包括可以用于检索文档副本的URI。相关章节的指示也可以包含但不是必需的。</p>
</li>
</ul>
<h1 id="12-_参考文献">12. 参考文献</h1>
<ul>
<li>12.1. <a href="12.1.md">规范性文献</a></li>
<li>12.2. <a href="12.2.md">参考性文献</a><h1 id="12-1-_规范性参考文件">12.1. 规范性参考文件</h1>
</li>
<li><a href="http://tools.ietf.org/html/rfc2119" title="Key words for use in RFCs to Indicate Requirement Levels" target="_blank" rel="external">RFC2119</a><br>Bradner, S., &quot;Key words for use in RFCs to Indicate Requirement Levels&quot;, BCP 14,RFC 2119, March 1997.</li>
<li><a href="http://tools.ietf.org/html/rfc2246" title="TLS协议1.0版" target="_blank" rel="external">RFC2246</a><br>Dierks, T. and C. Allen, &quot;The TLS Protocol Version 1.0&quot;, RFC 2246, January 1999.</li>
<li><a href="http://tools.ietf.org/html/rfc2616" title="HTTP/1/1" target="_blank" rel="external">RFC2616</a><br>Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L., Leach, P., and T. Berners-Lee, &quot;Hypertext Transfer Protocol -- HTTP/1.1&quot;, RFC 2616, June 1999.</li>
<li><a href="http://tools.ietf.org/html/rfc2617" title="HTTP Authentication: Basic and Digest Access Authentication" target="_blank" rel="external">RFC2617</a><br>Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S., Leach, P., Luotonen, A., and L. Stewart, &quot;HTTP Authentication: Basic and Digest Access Authentication&quot;, RFC 2617, June 1999.</li>
<li><a href="http://tools.ietf.org/html/rfc2818" title="HTTP Over TLS" target="_blank" rel="external">RFC2818</a><br>Rescorla, E., &quot;HTTP Over TLS&quot;, RFC 2818, May 2000.</li>
<li>[RFC3629]<br>Yergeau, F., &quot;UTF-8, a transformation format of ISO 10646&quot;, STD 63, RFC 3629, November 2003.</li>
<li><a href="http://tools.ietf.org/html/rfc3986" title="Uniform Resource Identifier (URI): Generic Syntax" target="_blank" rel="external">RFC3986</a><br>Berners-Lee, T., Fielding, R., and L. Masinter, &quot;Uniform Resource Identifier (URI): Generic Syntax&quot;, STD 66, RFC 3986, January 2005.</li>
<li><a href="http://tools.ietf.org/html/rfc4627" title="JSON" target="_blank" rel="external">RFC4627</a><br>Crockford, D., &quot;The application/json Media Type for JavaScript Object Notation (JSON)&quot;, RFC 4627, July 2006.</li>
<li><a href="http://tools.ietf.org/html/rfc4949" title="Internet Security Glossary, Version 2" target="_blank" rel="external">RFC4949</a><br>Shirey, R., &quot;Internet Security Glossary, Version 2&quot;, RFC 4949, August 2007.</li>
<li><a href="http://tools.ietf.org/html/rfc5226" title="Guidelines for Writing an IANA Considerations Section in RFCs" target="_blank" rel="external">RFC5226</a><br>Narten, T. and H. Alvestrand, &quot;Guidelines for Writing an IANA Considerations Section in RFCs&quot;, BCP 26,RFC 5226, May 2008.</li>
<li><a href="http://tools.ietf.org/html/rfc5234" title="Augmented BNF for Syntax Specifications: ABNF" target="_blank" rel="external">RFC5234</a><br>Crocker, D. and P. Overell, &quot;Augmented BNF for Syntax Specifications: ABNF&quot;, STD 68, RFC 5234, January 2008.</li>
<li><a href="http://tools.ietf.org/html/rfc5246" title="传输层安全（TLS）协议1.2版" target="_blank" rel="external">RFC5246</a><br>Dierks, T. and E. Rescorla, &quot;The Transport Layer Security (TLS) Protocol Version 1.2&quot;, RFC 5246, August 2008.</li>
<li><a href="http://tools.ietf.org/html/rfc6125" title="Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)" target="_blank" rel="external">RFC6125</a><br>Saint-Andre, P. and J. Hodges, &quot;Representation and Verification of Domain-Based Application Service Identity within Internet Public Key Infrastructure Using X.509 (PKIX) Certificates in the Context of Transport Layer Security (TLS)&quot;, RFC 6125, March 2011.</li>
<li>[USASCII]<br>American National Standards Institute, &quot;Coded Character Set -- 7-bit American Standard Code for Information Interchange&quot;, ANSI X3.4, 1986.</li>
<li>[W3C.REC-html401-19991224]<br>Raggett, D., Le Hors, A., and I. Jacobs, &quot;HTML 4.01 Specification&quot;, World Wide Web Consortium Recommendation REC-html401-19991224, December 1999, <a href="http://www.w3.org/TR/1999/REC-html401-19991224" target="_blank" rel="external">http://www.w3.org/TR/1999/REC-html401-19991224</a>.</li>
<li>[W3C.REC-xml-20081126]<br>Bray, T., Paoli, J., Sperberg-McQueen, C., Maler, E., and F. Yergeau, &quot;Extensible Markup Language (XML) 1.0 (Fifth Edition)&quot;, World Wide Web Consortium Recommendation REC-xml-20081126, November 2008, <a href="http://www.w3.org/TR/2008/REC-xml-20081126" target="_blank" rel="external">http://www.w3.org/TR/2008/REC-xml-20081126</a>.<h1 id="12-2-_参考性引用文献">12.2. 参考性引用文献</h1>
</li>
<li>[OAuth-HTTP-MAC]<br>Hammer-Lahav, E., Ed., &quot;HTTP Authentication: MAC Access Authentication&quot;, Work in Progress, February 2012.</li>
<li>[OAuth-SAML2]<br>Campbell, B. and C. Mortimore, &quot;SAML 2.0 Bearer Assertion Profiles for OAuth 2.0&quot;, Work in Progress, September 2012.</li>
<li>[OAuth-THREATMODEL]<br>Lodderstedt, T., Ed., McGloin, M., and P. Hunt, &quot;OAuth 2.0 Threat Model and Security Considerations&quot;, Work in Progress, October 2012.</li>
<li>[OAuth-WRAP]<br>Hardt, D., Ed., Tom, A., Eaton, B., and Y. Goland, &quot;OAuth Web Resource Authorization Profiles&quot;, Work in Progress, January 2010.</li>
<li><a href="http://tools.ietf.org/html/rfc5849" title="OAuth 1.0协议" target="_blank" rel="external">RFC5849</a><br>Hammer-Lahav, E., &quot;The OAuth 1.0 Protocol&quot;, RFC 5849, April 2010.</li>
<li><a href="http://tools.ietf.org/html/rfc6750" title="The OAuth 2.0 Authorization Framework: Bearer Token Usage" target="_blank" rel="external">RFC6750</a><br>Jones, M. and D. Hardt, &quot;The OAuth 2.0 Authorization Framework: Bearer Token Usage&quot;, RFC 6750, October 2012.</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>转自 <a href="https://github.com/jeansfish/RFC6749.zh-cn" target="_blank" rel="external">RFC 6749-OAuth 2.0授权框架简体中文翻译</a><br>]]>
    
    </summary>
    
      <category term="工具" scheme="http://colobu.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
